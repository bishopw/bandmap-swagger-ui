swagger: '2.0'
info:
  title: Band Map
  version: 1.0.0
  description: Welcome to the Seattle Band Map API!  This is a [RESTful web interface](https://en.wikipedia.org/wiki/Representational_state_transfer) for accessing info about Seattle bands and how they are connected.

host: localhost:3000
basePath: /api
schemes:
- http
produces:
- application/json

tags:
- name: API Root
  description: General API info.
- name: Bands
  description: Resources about bands.
- name: People
  description: Resources about band members and related people.
- name: Roles
  description: Resources about the roles people have in bands.
- name: Connections
  description: Resources about connections between bands.
- name: Locations
  description: Resources related to the geographic location of bands.
- name: Edit History
  description: Resources for tracking edits users make to Band Map info.
- name: Admin
  description: Resources related to Band Map site and app administration.

  # Here we apply the security flow called 'accessCode' globally to all the opeartions in the spec. 
  # This security scheme is defined below in the 'securityDefinitions' section.
  # Global security can be overriden an operation level as seen in the example below
  # security:
  #   - accessCode:
  #     - read
  #     - write

paths:
  # Index:
  # /
  # /bands
  # /bands/{band}
  # /bands/{band}/people
  # /bands/{band}/people/{person}
  # /bands/{band}/people/{person}/roles
  # /bands/{band}/people/{person}/roles/{role}
  # /bands/{band}/cities
  # /bands/{band}/cities/{city}
  # /bands/{band}/connected-bands
  # /bands/{band}/connected-bands/{connected-band}
  # /bands/{band}/web-links
  # /bands/{band}/web-links/{web-link}
  # /connections
  # /connections/{connection}
  # /people
  # /people/{person}
  # /people/{person}/bands
  # /people/{person}/bands/{band}
  # /people/{person}/bands/{band}/roles
  # /people/{person}/bands/{band}/roles/{role}
  # /people/{person}/roles
  # /people/{person}/roles/{role}
  # /people/{person}/cities
  # /people/{person}/cities/{city}
  # /roles
  # /roles/{role}
  # /locations/cities
  # /locations/cities/{city}
  # /locations/cities/{city}/regions
  # /locations/cities/{city}/regions/{region}
  # /locations/states
  # /locations/states/{state}
  # /locations/states/{state}/cities
  # /locations/states/{state}/cities/{city}
  # /locations/states/{state}/regions
  # /locations/states/{state}/regions/{region}
  # /locations/countries
  # /locations/countries/{country}
  # /locations/countries/{country}/states
  # /locations/countries/{country}/states/{state}
  # /locations/countries/{country}/regions
  # /locations/countries/{country}/regions/{region}
  # /locations/regions
  # /locations/regions/{region}
  # /locations/regions/{region}/cities
  # /locations/regions/{region}/cities/{city}
  # /locations/regions/{region}/states
  # /locations/regions/{region}/states/{state}
  # /locations/regions/{region}/countries
  # /locations/regions/{region}/countries/{country}
  # /locations/regions/{region}/regions
  # /locations/regions/{region}/regions/{sub-region}
  # /edit-history/edits
  # /edit-history/edits/{edit}
  # /edit-history/edits/{edit}/revisions
  # /edit-history/edits/{edit}/revisions/{revision}
  # /edit-history/edits/{edit}/annotations
  # /edit-history/edits/{edit}/annotations/{annotation}
  # /edit-history/editors
  # /edit-history/editors/{editor}
  # /edit-history/editors/{editor}/edits
  # /edit-history/editors/{editor}/edits/{edit}
  # /edit-history/editors/{editor}/revisions
  # /edit-history/editors/{editor}/revisions/{revision}
  # /edit-history/editors/{editor}/annotations
  # /edit-history/editors/{editor}/annotations/{annotation}
  # /edit-history/editors/{editor}/sessions
  # /edit-history/editors/{editor}/sessions/{session}
  # /edit-history/revisions
  # /edit-history/revisions/{revision}
  # /edit-history/revisions/{revision}/annotations
  # /edit-history/revisions/{revision}/annotations/{annotation}
  # /edit-history/annotations
  # /edit-history/annotations/{annotation}
  # /edit-history/info-sources
  # /edit-history/info-sources/{info-source}
  # /edit-history/info-source-tags
  # /edit-history/info-source-tags/{info-source-tag}
  # /users
  # /users/{user}
  # /users/{user}/edits
  # /users/{user}/edits/{edit}
  # /users/{user}/revisions
  # /users/{user}/revisions/{revision}
  # /users/{user}/annotations
  # /users/{user}/annotations/{annotation}
  # /users/{user}/sessions
  # /users/{user}/sessions/{session}
  # /sessions
  # /sessions/{session}
  # /sessions/{session}/edits
  # /sessions/{session}/edits/{edit}
  # /sessions/{session}/revisions
  # /sessions/{session}/revisions/{revision}
  # /sessions/{session}/annotations
  # /sessions/{session}/annotations/{annotation}
  /:
    get:
      tags:
      - API Root
      summary: Get general API info and a listing of resources available at the API root.
      description: Get general API info and a listing of resources available at the API root.
        # Require no security schemes and override the globally defined security scheme.
      security: []
      parameters:
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: Object containing API info and a listing of resources available at the API root.
          schema:
            $ref: '#/definitions/APIRootListing'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands:
    get:
      tags:
      - Bands
      summary: Get the collection of bands with band info.
      description: Get the collection of bands with band info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of bands with band info.
          schema:
            $ref: '#/definitions/Bands'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new band or bands.
      description: Submit a new band or bands to the bands collection.  Bands must be submitted in an array, even if there is only one.
      parameters:
      - name: bands
        in: body
        description: An array containing one or more bands to add to the bands collection.
        required: true
        schema:
          type: array
          description: An array containing one or more bands to add to the bands collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified band or bands were added successfully.  The newly added band or bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added band or bands including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Band'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or create the specified band or bands.
      description: Modify or create the specified band or bands.  Specify an existing band or bands to be modified using band id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: bandsPatch
        in: body
        description: An array containing one or more band modification objects, or new bands.  Specify existing bands to modify by id or name.  If you specify any bands that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more band modification objects, or new bands.  Specify existing bands to modify by id or name.  If you specify any bands that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/BandPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band or bands were modified successfully.  The modified band or bands are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new bands were created.
          schema:
            type: array
            description: Array containing the band or bands that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Band'
        201:
          description: The specified band or bands were modified and/or created successfully.  The modified/created band or bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the bands were new additions to the collection, not just modifications of existing bands.
          schema:
            type: array
            description: An array containing the band or bands that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Band'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace or create the specified band or bands.
      description: Replace or create the specified band or bands.  Specify existing bands to replace by id or name.  If you specify any bands that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: bandsPut
        in: body
        description: An array containing one or more bands specified by id or name.  If you specify a band that is not found in the collection already, the band will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more bands specified by id or name.  If you specify a band that is not found in the collection already, the band will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/BandPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band or bands were replaced successfully.  The replaced band or bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new bands were created.
          schema:
            type: array
            description: An array containing the band or bands that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Band'
        201:
          description: The specified band or bands were replaced and/or created successfully.  The replaced/created band or bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the bands were new additions to the collection, not just replacements of existing bands.
          schema:
            type: array
            description: An array containing the band or bands that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Band'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Delete the specified band or bands.
      description: Delete the specified band or bands.
      parameters:
      - name: bandsDelete
        in: body
        description: 'An array of id or name values representing one or more bands to delete.  Use either this request body or the provided query args to select which bands you want to delete.  WARNING: A DELETE call to this URI with no particular bands specified will cause ALL bands to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more bands to delete.  Use either this request body or the provided query args to select which bands you want to delete.  WARNING: A DELETE call to this URI with no particular bands specified will cause ALL bands to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a band to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified bands were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}:
    get:
      tags:
      - Bands
      summary: Get the specified band.
      description: Get the specified band and band info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified band with band info.
          schema:
            $ref: '#/definitions/BandWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified band.
      description: Modify the specified band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPatch
        in: body
        description: An object containing one or more fields to modify on the specified band.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band was modified successfully.  The band is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Band'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified band.
      description: Replace the specified band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPut
        in: body
        description: A new band to replace the specified band.
        required: true
        schema:
          $ref: '#/definitions/BandPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band was replaced successfully.  The new band is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Band'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Delete the specified band.
      description: Delete the specified band.
      parameters:
      - $ref: '#/parameters/bandParam'
      responses:
        204:
          description: The specified band was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/people:
    get:
      tags:
      - Bands
      summary: Get the collection of band members or other people associated with this band.
      description: Get the collection of band members or other people associated with this band.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of band members or other people associated with this band.
          schema:
            $ref: '#/definitions/BandPeople'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new set of band members or other people associated with this band.
      description: Submit a new set of band members or other people associated with this band.  People must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPeople
        in: body
        description: An array containing one or more new or existing people to add to the people collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing people to add to the people collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandPersonPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person or people were added to this band successfully.  The newly added person or people are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the band occurred - no new people were created.
          schema:
            type: array
            description: An array containing the newly added person or people including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        201:
          description: The specified person or people were created and/or added to this band successfully.  The newly added person or people are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the people were newly created, not just modifications of or references to existing people.'
          schema:
            type: array
            description: An array containing the newly added person or people including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or add the specified band members or other people associated with this band.
      description: Modify or add the specified band members or other people associated with this band.  Specify the person or people to be modified/added using person id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPeoplePatch
        in: body
        description: An array containing one or more partial person objects specified by id or name along with the fields you want to modify and their new values.  If you specify any people that do not exist already, they will be created.  If you specify any people that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial person objects specified by id or name along with the fields you want to modify and their new values.  If you specify any people that do not exist already, they will be created.  If you specify any people that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/BandPersonPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person or people were modified and/or added successfully.  The modified/added person or people are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the band occurred - no new people were created.
          schema:
            type: array
            description: Array containing the person or people that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        201:
          description: The specified person or people were modified/created and/or added to the band successfully.  The modified/created/added person or people are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the people were newly created, not just modifications of or references to existing people.
          schema:
            type: array
            description: An array containing the person or people that were modified/created and added to the band successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace/create the specified band members or other people associated with this band.  Add them to this subcollection in the band if they were not already here.
      description: Replace/create the specified band members or other people associated with this band.  Specify people to be replaced by id or name.  Add them to this subcollection in the band if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPeoplePut
        in: body
        description: An array containing one or more people specified by id or name.  If you specify a person that exists already, the person will be replaced.  If you specify a person that does not exist, the person will be created.  Either way, if the person is not associated with this band already (in this collection), the person will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more people specified by id or name.  If you specify a person that exists already, the person will be replaced.  If you specify a person that does not exist, the person will be created.  Either way, if the person is not associated with this band already (in this collection), the person will be added.
          minItems: 1
          items:
            $ref: '#/definitions/BandPersonPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person or people were replaced.  They were added to this band if they were not already associated.  The replaced person or people are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned people are replacements - not brand new people.
          schema:
            type: array
            description: An array containing the person or people that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        201:
          description: The specified person or people were replaced and/or created successfully.  They were added to this band if they were not already associated.  The replaced/created person or people are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the people are brand new and did not replace any existing people.
          schema:
            type: array
            description: An array containing the person or people that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPerson'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified band members or other people associated with this band.
      description: Remove the specified band members or other people associated with this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandPeopleDelete
        in: body
        description: An array of id or name values representing one or more people to remove from this band.  Use either this request body or the provided query args to select which people you want to remove.  A remove call to this URI with no particular people specified will cause ALL people to be removed from the band.
        schema:
          type: array
          description: An array of id or name values representing one or more people to remove from this band.  Use either this request body or the provided query args to select which people you want to remove.  A remove call to this URI with no particular people specified will cause ALL people to be removed from the band.
          minItems: 0
          items:
            type: string
            description: The id or name of a person to remove from the band.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified people were removed from the band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/people/{person}:
    get:
      tags:
      - Bands
      summary: Get the specified person.
      description: Get the specified person and person info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified person with person info.
          schema:
            $ref: '#/definitions/BandPersonWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified person.
      description: Modify the specified person.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonPatch
        in: body
        description: An object containing one or more fields to modify on the specified person.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandPersonPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person was modified successfully.  The person is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandPerson'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified person.
      description: Replace the specified person.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonPut
        in: body
        description: A new person to replace the specified person.
        required: true
        schema:
          $ref: '#/definitions/BandPersonPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person was replaced successfully.  The new person is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandPerson'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified person from this band.
      description: Delete the specified person from this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      responses:
        204:
          description: The specified person was removed from this band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/people/{person}/roles:
    get:
      tags:
      - Bands
      summary: Get the collection of roles this person has had in this band (like instruments played).
      description: Get the collection of roles this person has had in this band (like instruments played).
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of roles this person has had in this band (like instruments played).
          schema:
            $ref: '#/definitions/BandPersonRoles'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new set of roles this person has had in this band (like instruments played).
      description: Submit a new set of roles this person has had in this band (like instruments played).  Roles must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonRoles
        in: body
        description: An array containing one or more new or existing roles to add to the roles collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing roles to add to the roles collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandPersonRolePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were added to this person successfully.  The newly added role or roles are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the person occurred - no new roles were created.
          schema:
            type: array
            description: An array containing the newly added role or roles including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        201:
          description: The specified role or roles were created and/or added to this person successfully.  The newly added role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles were newly created, not just modifications of or references to existing roles.'
          schema:
            type: array
            description: An array containing the newly added role or roles including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or add the specified roles this person has had in this band (like instruments played).
      description: Modify or add the specified roles this person has had in this band (like instruments played).  Specify the role or roles to be modified/added using role id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonRolesPatch
        in: body
        description: An array containing one or more partial role objects specified by id or name along with the fields you want to modify and their new values.  If you specify any roles that do not exist already, they will be created.  If you specify any roles that are not associated with this person already, they will be added.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial role objects specified by id or name along with the fields you want to modify and their new values.  If you specify any roles that do not exist already, they will be created.  If you specify any roles that are not associated with this person already, they will be added.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/BandPersonRolePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were modified and/or added successfully.  The modified/added role or roles are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the person occurred - no new roles were created.
          schema:
            type: array
            description: Array containing the role or roles that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        201:
          description: The specified role or roles were modified/created and/or added to the person successfully.  The modified/created/added role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles were newly created, not just modifications of or references to existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were modified/created and added to the person successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace/create the specified roles this person has had in this band (like instruments played).  Add them to this subcollection in the person if they were not already here.
      description: Replace/create the specified roles this person has had in this band (like instruments played).  Specify roles to be replaced by id or name.  Add them to this subcollection in the person if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonRolesPut
        in: body
        description: An array containing one or more roles specified by id or name.  If you specify a role that exists already, the role will be replaced.  If you specify a role that does not exist, the role will be created.  Either way, if the role is not associated with this person already (in this collection), the role will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more roles specified by id or name.  If you specify a role that exists already, the role will be replaced.  If you specify a role that does not exist, the role will be created.  Either way, if the role is not associated with this person already (in this collection), the role will be added.
          minItems: 1
          items:
            $ref: '#/definitions/BandPersonRolePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were replaced.  They were added to this person if they were not already associated.  The replaced role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned roles are replacements - not brand new roles.
          schema:
            type: array
            description: An array containing the role or roles that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        201:
          description: The specified role or roles were replaced and/or created successfully.  They were added to this person if they were not already associated.  The replaced/created role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles are brand new and did not replace any existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandPersonRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified roles this person has had in this band (like instruments played).
      description: Remove the specified roles this person has had in this band (like instruments played).
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - name: bandPersonRolesDelete
        in: body
        description: An array of id or name values representing one or more roles to remove from this person.  Use either this request body or the provided query args to select which roles you want to remove.  A remove call to this URI with no particular roles specified will cause ALL roles to be removed from the person.
        schema:
          type: array
          description: An array of id or name values representing one or more roles to remove from this person.  Use either this request body or the provided query args to select which roles you want to remove.  A remove call to this URI with no particular roles specified will cause ALL roles to be removed from the person.
          minItems: 0
          items:
            type: string
            description: The id or name of a role to remove from the person.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified roles were removed from the person successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/people/{person}/roles/{role}:
    get:
      tags:
      - Bands
      summary: Get the specified role.
      description: Get the specified role and role info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/roleParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified role with role info.
          schema:
            $ref: '#/definitions/BandPersonRoleWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified role.
      description: Modify the specified role.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/roleParam'
      - name: bandPersonRolePatch
        in: body
        description: An object containing one or more fields to modify on the specified role.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandPersonRolePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was modified successfully.  The role is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandPersonRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified role.
      description: Replace the specified role.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/roleParam'
      - name: bandPersonRolePut
        in: body
        description: A new role to replace the specified role.
        required: true
        schema:
          $ref: '#/definitions/BandPersonRolePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was replaced successfully.  The new role is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandPersonRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified role from this person.
      description: Delete the specified role from this person.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/roleParam'
      responses:
        204:
          description: The specified role was removed from this person successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/cities:
    get:
      tags:
      - Bands
      summary: Get the collection of city or cities this band has been based in, ordered by most recent to oldest.
      description: Get the collection of city or cities this band has been based in, ordered by most recent to oldest.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of city or cities this band has been based in, ordered by most recent to oldest.
          schema:
            $ref: '#/definitions/BandCities'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new set of city or cities this band has been based in, ordered by most recent to oldest.
      description: Submit a new set of city or cities this band has been based in, ordered by most recent to oldest.  Cities must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandCities
        in: body
        description: An array containing one or more new or existing cities to add to the cities collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing cities to add to the cities collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandCityPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were added to this band successfully.  The newly added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the band occurred - no new cities were created.
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        201:
          description: The specified city or cities were created and/or added to this band successfully.  The newly added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.'
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or add the specified city or cities this band has been based in, ordered by most recent to oldest.
      description: Modify or add the specified city or cities this band has been based in, ordered by most recent to oldest.  Specify the city or cities to be modified/added using city id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandCitiesPatch
        in: body
        description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/BandCityPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were modified and/or added successfully.  The modified/added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the band occurred - no new cities were created.
          schema:
            type: array
            description: Array containing the city or cities that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        201:
          description: The specified city or cities were modified/created and/or added to the band successfully.  The modified/created/added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were modified/created and added to the band successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace/create the specified city or cities this band has been based in, ordered by most recent to oldest.  Add them to this subcollection in the band if they were not already here.
      description: Replace/create the specified city or cities this band has been based in, ordered by most recent to oldest.  Specify cities to be replaced by id or name.  Add them to this subcollection in the band if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandCitiesPut
        in: body
        description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this band already (in this collection), the city will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this band already (in this collection), the city will be added.
          minItems: 1
          items:
            $ref: '#/definitions/BandCityPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were replaced.  They were added to this band if they were not already associated.  The replaced city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned cities are replacements - not brand new cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        201:
          description: The specified city or cities were replaced and/or created successfully.  They were added to this band if they were not already associated.  The replaced/created city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities are brand new and did not replace any existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified city or cities this band has been based in, ordered by most recent to oldest.
      description: Remove the specified city or cities this band has been based in, ordered by most recent to oldest.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandCitiesDelete
        in: body
        description: An array of id or name values representing one or more cities to remove from this band.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the band.
        schema:
          type: array
          description: An array of id or name values representing one or more cities to remove from this band.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the band.
          minItems: 0
          items:
            type: string
            description: The id or name of a city to remove from the band.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified cities were removed from the band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/cities/{city}:
    get:
      tags:
      - Bands
      summary: Get the specified city.
      description: Get the specified city and city info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified city with city info.
          schema:
            $ref: '#/definitions/BandCityWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified city.
      description: Modify the specified city.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/cityParam'
      - name: bandCityPatch
        in: body
        description: An object containing one or more fields to modify on the specified city.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandCityPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was modified successfully.  The city is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified city.
      description: Replace the specified city.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/cityParam'
      - name: bandCityPut
        in: body
        description: A new city to replace the specified city.
        required: true
        schema:
          $ref: '#/definitions/BandCityPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was replaced successfully.  The new city is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified city from this band.
      description: Delete the specified city from this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/cityParam'
      responses:
        204:
          description: The specified city was removed from this band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/connected-bands:
    get:
      tags:
      - Bands
      summary: Get the collection of other bands this band is connected to.
      description: Get the collection of other bands this band is connected to.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of other bands this band is connected to.
          schema:
            $ref: '#/definitions/BandConnectedBands'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new set of other bands this band is connected to.
      description: Submit a new set of other bands this band is connected to.  Connected bands must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandConnectedBands
        in: body
        description: An array containing one or more new or existing connected bands to add to the connected bands collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing connected bands to add to the connected bands collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandConnectedBandPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connected band or connected bands were added to this band successfully.  The newly added connected band or connected bands are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the band occurred - no new connected bands were created.
          schema:
            type: array
            description: An array containing the newly added connected band or connected bands including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        201:
          description: The specified connected band or connected bands were created and/or added to this band successfully.  The newly added connected band or connected bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the connected bands were newly created, not just modifications of or references to existing connected bands.'
          schema:
            type: array
            description: An array containing the newly added connected band or connected bands including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or add the specified other bands this band is connected to.
      description: Modify or add the specified other bands this band is connected to.  Specify the connected band or connected bands to be modified/added using connected band id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandConnectedBandsPatch
        in: body
        description: An array containing one or more partial connected band objects specified by id or name along with the fields you want to modify and their new values.  If you specify any connected bands that do not exist already, they will be created.  If you specify any connected bands that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a connected band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial connected band objects specified by id or name along with the fields you want to modify and their new values.  If you specify any connected bands that do not exist already, they will be created.  If you specify any connected bands that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a connected band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/BandConnectedBandPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connected band or connected bands were modified and/or added successfully.  The modified/added connected band or connected bands are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the band occurred - no new connected bands were created.
          schema:
            type: array
            description: Array containing the connected band or connected bands that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        201:
          description: The specified connected band or connected bands were modified/created and/or added to the band successfully.  The modified/created/added connected band or connected bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the connected bands were newly created, not just modifications of or references to existing connected bands.
          schema:
            type: array
            description: An array containing the connected band or connected bands that were modified/created and added to the band successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace/create the specified other bands this band is connected to.  Add them to this subcollection in the band if they were not already here.
      description: Replace/create the specified other bands this band is connected to.  Specify connected bands to be replaced by id or name.  Add them to this subcollection in the band if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandConnectedBandsPut
        in: body
        description: An array containing one or more connected bands specified by id or name.  If you specify a connected band that exists already, the connected band will be replaced.  If you specify a connected band that does not exist, the connected band will be created.  Either way, if the connected band is not associated with this band already (in this collection), the connected band will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more connected bands specified by id or name.  If you specify a connected band that exists already, the connected band will be replaced.  If you specify a connected band that does not exist, the connected band will be created.  Either way, if the connected band is not associated with this band already (in this collection), the connected band will be added.
          minItems: 1
          items:
            $ref: '#/definitions/BandConnectedBandPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connected band or connected bands were replaced.  They were added to this band if they were not already associated.  The replaced connected band or connected bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned connected bands are replacements - not brand new connected bands.
          schema:
            type: array
            description: An array containing the connected band or connected bands that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        201:
          description: The specified connected band or connected bands were replaced and/or created successfully.  They were added to this band if they were not already associated.  The replaced/created connected band or connected bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the connected bands are brand new and did not replace any existing connected bands.
          schema:
            type: array
            description: An array containing the connected band or connected bands that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandConnectedBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified other bands this band is connected to.
      description: Remove the specified other bands this band is connected to.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandConnectedBandsDelete
        in: body
        description: An array of id or name values representing one or more connected bands to remove from this band.  Use either this request body or the provided query args to select which connected bands you want to remove.  A remove call to this URI with no particular connected bands specified will cause ALL connected bands to be removed from the band.
        schema:
          type: array
          description: An array of id or name values representing one or more connected bands to remove from this band.  Use either this request body or the provided query args to select which connected bands you want to remove.  A remove call to this URI with no particular connected bands specified will cause ALL connected bands to be removed from the band.
          minItems: 0
          items:
            type: string
            description: The id or name of a connected band to remove from the band.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified connected bands were removed from the band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/connected-bands/{connected-band}:
    get:
      tags:
      - Bands
      summary: Get the specified connected band.
      description: Get the specified connected band and connected band info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/connectedBandParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified connected band with connected band info.
          schema:
            $ref: '#/definitions/BandConnectedBandWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified connected band.
      description: Modify the specified connected band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/connectedBandParam'
      - name: bandConnectedBandPatch
        in: body
        description: An object containing one or more fields to modify on the specified connected band.  If you are modifying one of the sub-arrays within a connected band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandConnectedBandPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connected band was modified successfully.  The connected band is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandConnectedBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified connected band.
      description: Replace the specified connected band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/connectedBandParam'
      - name: bandConnectedBandPut
        in: body
        description: A new connected band to replace the specified connected band.
        required: true
        schema:
          $ref: '#/definitions/BandConnectedBandPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connected band was replaced successfully.  The new connected band is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandConnectedBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified connected band from this band.
      description: Delete the specified connected band from this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/connectedBandParam'
      responses:
        204:
          description: The specified connected band was removed from this band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/web-links:
    get:
      tags:
      - Bands
      summary: Get the collection of web links related to this band.
      description: Get the collection of web links related to this band.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of web links related to this band.
          schema:
            $ref: '#/definitions/BandWebLinks'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Bands
      summary: Submit a new set of web links related to this band.
      description: Submit a new set of web links related to this band.  Web links must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandWebLinks
        in: body
        description: An array containing one or more new or existing web links to add to the web links collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing web links to add to the web links collection.
          minItems: 1
          items:
            $ref: '#/definitions/BandWebLinkPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified web link or web links were added to this band successfully.  The newly added web link or web links are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the band occurred - no new web links were created.
          schema:
            type: array
            description: An array containing the newly added web link or web links including their assigned url and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        201:
          description: The specified web link or web links were created and/or added to this band successfully.  The newly added web link or web links are returned in the response body array with their assigned url and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the web links were newly created, not just modifications of or references to existing web links.'
          schema:
            type: array
            description: An array containing the newly added web link or web links including their assigned url and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify or add the specified web links related to this band.
      description: Modify or add the specified web links related to this band.  Specify the web link or web links to be modified/added using web link url.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandWebLinksPatch
        in: body
        description: An array containing one or more partial web link objects specified by url along with the fields you want to modify and their new values.  If you specify any web links that do not exist already, they will be created.  If you specify any web links that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a web link, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial web link objects specified by url along with the fields you want to modify and their new values.  If you specify any web links that do not exist already, they will be created.  If you specify any web links that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a web link, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/BandWebLinkPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified web link or web links were modified and/or added successfully.  The modified/added web link or web links are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the band occurred - no new web links were created.
          schema:
            type: array
            description: Array containing the web link or web links that were modified successfully, including their assigned url and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        201:
          description: The specified web link or web links were modified/created and/or added to the band successfully.  The modified/created/added web link or web links are returned in the response body array with their assigned url and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the web links were newly created, not just modifications of or references to existing web links.
          schema:
            type: array
            description: An array containing the web link or web links that were modified/created and added to the band successfully, including their assigned url and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace/create the specified web links related to this band.  Add them to this subcollection in the band if they were not already here.
      description: Replace/create the specified web links related to this band.  Specify web links to be replaced by url.  Add them to this subcollection in the band if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandWebLinksPut
        in: body
        description: An array containing one or more web links specified by url.  If you specify a web link that exists already, the web link will be replaced.  If you specify a web link that does not exist, the web link will be created.  Either way, if the web link is not associated with this band already (in this collection), the web link will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more web links specified by url.  If you specify a web link that exists already, the web link will be replaced.  If you specify a web link that does not exist, the web link will be created.  Either way, if the web link is not associated with this band already (in this collection), the web link will be added.
          minItems: 1
          items:
            $ref: '#/definitions/BandWebLinkPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified web link or web links were replaced.  They were added to this band if they were not already associated.  The replaced web link or web links are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned web links are replacements - not brand new web links.
          schema:
            type: array
            description: An array containing the web link or web links that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        201:
          description: The specified web link or web links were replaced and/or created successfully.  They were added to this band if they were not already associated.  The replaced/created web link or web links are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the web links are brand new and did not replace any existing web links.
          schema:
            type: array
            description: An array containing the web link or web links that were replaced or created successfully, including their assigned url and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/BandWebLink'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified web links related to this band.
      description: Remove the specified web links related to this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - name: bandWebLinksDelete
        in: body
        description: An array of url values representing one or more web links to remove from this band.  Use either this request body or the provided query args to select which web links you want to remove.  A remove call to this URI with no particular web links specified will cause ALL web links to be removed from the band.
        schema:
          type: array
          description: An array of url values representing one or more web links to remove from this band.  Use either this request body or the provided query args to select which web links you want to remove.  A remove call to this URI with no particular web links specified will cause ALL web links to be removed from the band.
          minItems: 0
          items:
            type: string
            description: The url of a web link to remove from the band.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified web links were removed from the band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /bands/{band}/web-links/{web-link}:
    get:
      tags:
      - Bands
      summary: Get the specified web link.
      description: Get the specified web link and web link info.
      security: []
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/webLinkParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified web link with web link info.
          schema:
            $ref: '#/definitions/BandWebLinkWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Bands
      summary: Modify the specified web link.
      description: Modify the specified web link.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/webLinkParam'
      - name: bandWebLinkPatch
        in: body
        description: An object containing one or more fields to modify on the specified web link.  If you are modifying one of the sub-arrays within a web link, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/BandWebLinkPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified web link was modified successfully.  The web link is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandWebLink'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Bands
      summary: Replace the specified web link.
      description: Replace the specified web link.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/webLinkParam'
      - name: bandWebLinkPut
        in: body
        description: A new web link to replace the specified web link.
        required: true
        schema:
          $ref: '#/definitions/BandWebLinkPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified web link was replaced successfully.  The new web link is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/BandWebLink'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Bands
      summary: Remove the specified web link from this band.
      description: Delete the specified web link from this band.
      parameters:
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/webLinkParam'
      responses:
        204:
          description: The specified web link was removed from this band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /connections:
    get:
      tags:
      - Connections
      summary: Get the collection of connections between bands.
      description: Get the collection of connections between bands, with descriptions of what connects them (for example, shared members).  Connections can be POSTed and DELETEd, and their descriptions can be PATCHed, but they can't be replaced with PUT since a their id is fixed once their two bands are defined.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of connections between bands, with descriptions of what connects them (for example, shared members).  Connections can be POSTed and DELETEd, and their descriptions can be PATCHed, but they can't be replaced with PUT since a their id is fixed once their two bands are defined.
          schema:
            $ref: '#/definitions/Connections'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Connections
      summary: Submit a new connection or connections.
      description: Submit a new connection or connections to the connections collection.  Connections must be submitted in an array, even if there is only one.
      parameters:
      - name: connections
        in: body
        description: An array containing one or more connections to add to the connections collection.
        required: true
        schema:
          type: array
          description: An array containing one or more connections to add to the connections collection.
          minItems: 1
          items:
            $ref: '#/definitions/ConnectionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified connection or connections were added successfully.  The newly added connection or connections are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added connection or connections including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Connection'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Connections
      summary: Modify or create the specified connection(s).
      description: 'Modify or create the specified connection(s).  For existing connections, only the description can be modified, not the bands.  Existing connections can be specified in any of three ways: canonical id (like "123-789"), name id (like "band a-band b", also supplied in the connection "id" field) or by including either the id or name of both "band1" and "band2" objects (and not specifying a connection id).  The ordering of bands in any of the three methods does not matter (that is, "band a-band b" will address the same connection as "band b-band a").  The query args for this operation apply only to the returned array confirming your changes.'
      parameters:
      - name: connectionsPatch
        in: body
        description: 'An array containing one or more existing or new connections.  For existing connections, only the description can be modified, not the bands.  Existing connections can be specified in any of three ways: canonical id (like "123-789"), name id (like "band a-band b", also supplied in the connection "id" field) or by including either the id or name of both "band1" and "band2" objects (and not specifying a connection id).  The ordering of bands in any of the three methods does not matter (that is, "band a-band b" will address the same connection as "band b-band a").'
        required: true
        schema:
          type: array
          description: 'An array containing one or more existing or new connections.  For existing connections, only the description can be modified, not the bands.  Existing connections can be specified in any of three ways: canonical id (like "123-789"), name id (like "band a-band b", also supplied in the connection "id" field) or by including either the id or name of both "band1" and "band2" objects (and not specifying a connection id).  The ordering of bands in any of the three methods does not matter (that is, "band a-band b" will address the same connection as "band b-band a").'
          minItems: 1
          items:
            $ref: '#/definitions/ConnectionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connection or connections were modified successfully.  The modified connection or connections are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new connections were created.
          schema:
            type: array
            description: Array containing the connection or connections that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Connection'
        201:
          description: The specified connection or connections were modified and/or created successfully.  The modified/created connection or connections are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the connections were new additions to the collection, not just modifications of existing connections.
          schema:
            type: array
            description: An array containing the connection or connections that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Connection'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Connections
      summary: Delete the specified connection or connections.
      description: Delete the specified connection or connections.
      parameters:
      - name: connectionsDelete
        in: body
        description: 'An array of id values representing one or more connections to delete.  Use either this request body or the provided query args to select which connections you want to delete.  WARNING: A DELETE call to this URI with no particular connections specified will cause ALL connections to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id values representing one or more connections to delete.  Use either this request body or the provided query args to select which connections you want to delete.  WARNING: A DELETE call to this URI with no particular connections specified will cause ALL connections to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id of a connection to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified connections were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /connections/{connection}:
    get:
      tags:
      - Connections
      summary: Get the specified connection.
      description: Get the specified connection and connection info.
      security: []
      parameters:
      - $ref: '#/parameters/connectionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified connection with connection info.
          schema:
            $ref: '#/definitions/ConnectionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Connections
      summary: Modify the specified connection.
      description: Modify the specified connection.
      parameters:
      - $ref: '#/parameters/connectionParam'
      - name: connectionPatch
        in: body
        description: An object specifying a new description for an existing connection.
        required: true
        schema:
          $ref: '#/definitions/ConnectionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified connection was modified successfully.  The connection is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Connection'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Connections
      summary: Delete the specified connection.
      description: Delete the specified connection.
      parameters:
      - $ref: '#/parameters/connectionParam'
      responses:
        204:
          description: The specified connection was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people:
    get:
      tags:
      - People
      summary: Get the collection of people with person info.
      description: Get the collection of people with person info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of people with person info.
          schema:
            $ref: '#/definitions/People'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - People
      summary: Submit a new person or people.
      description: Submit a new person or people to the people collection.  People must be submitted in an array, even if there is only one.
      parameters:
      - name: people
        in: body
        description: An array containing one or more people to add to the people collection.
        required: true
        schema:
          type: array
          description: An array containing one or more people to add to the people collection.
          minItems: 1
          items:
            $ref: '#/definitions/PersonPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified person or people were added successfully.  The newly added person or people are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added person or people including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Person'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify or create the specified person or people.
      description: Modify or create the specified person or people.  Specify an existing person or people to be modified using person id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: peoplePatch
        in: body
        description: An array containing one or more person modification objects, or new people.  Specify existing people to modify by id or name.  If you specify any people that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more person modification objects, or new people.  Specify existing people to modify by id or name.  If you specify any people that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/PersonPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person or people were modified successfully.  The modified person or people are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new people were created.
          schema:
            type: array
            description: Array containing the person or people that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Person'
        201:
          description: The specified person or people were modified and/or created successfully.  The modified/created person or people are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the people were new additions to the collection, not just modifications of existing people.
          schema:
            type: array
            description: An array containing the person or people that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Person'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace or create the specified person or people.
      description: Replace or create the specified person or people.  Specify existing people to replace by id or name.  If you specify any people that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: peoplePut
        in: body
        description: An array containing one or more people specified by id or name.  If you specify a person that is not found in the collection already, the person will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more people specified by id or name.  If you specify a person that is not found in the collection already, the person will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/PersonPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person or people were replaced successfully.  The replaced person or people are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new people were created.
          schema:
            type: array
            description: An array containing the person or people that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Person'
        201:
          description: The specified person or people were replaced and/or created successfully.  The replaced/created person or people are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the people were new additions to the collection, not just replacements of existing people.
          schema:
            type: array
            description: An array containing the person or people that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Person'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Delete the specified person or people.
      description: Delete the specified person or people.
      parameters:
      - name: peopleDelete
        in: body
        description: 'An array of id or name values representing one or more people to delete.  Use either this request body or the provided query args to select which people you want to delete.  WARNING: A DELETE call to this URI with no particular people specified will cause ALL people to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more people to delete.  Use either this request body or the provided query args to select which people you want to delete.  WARNING: A DELETE call to this URI with no particular people specified will cause ALL people to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a person to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified people were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}:
    get:
      tags:
      - People
      summary: Get the specified person.
      description: Get the specified person and person info.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified person with person info.
          schema:
            $ref: '#/definitions/PersonWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify the specified person.
      description: Modify the specified person.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personPatch
        in: body
        description: An object containing one or more fields to modify on the specified person.  If you are modifying one of the sub-arrays within a person, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/PersonPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person was modified successfully.  The person is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Person'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace the specified person.
      description: Replace the specified person.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personPut
        in: body
        description: A new person to replace the specified person.
        required: true
        schema:
          $ref: '#/definitions/PersonPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified person was replaced successfully.  The new person is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Person'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Delete the specified person.
      description: Delete the specified person.
      parameters:
      - $ref: '#/parameters/personParam'
      responses:
        204:
          description: The specified person was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/bands:
    get:
      tags:
      - People
      summary: Get the collection of bands this person is a member of or is associated with.
      description: Get the collection of bands this person is a member of or is associated with.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of bands this person is a member of or is associated with.
          schema:
            $ref: '#/definitions/PersonBands'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - People
      summary: Submit a new set of bands this person is a member of or is associated with.
      description: Submit a new set of bands this person is a member of or is associated with.  Bands must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personBands
        in: body
        description: An array containing one or more new or existing bands to add to the bands collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing bands to add to the bands collection.
          minItems: 1
          items:
            $ref: '#/definitions/PersonBandPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band or bands were added to this person successfully.  The newly added band or bands are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the person occurred - no new bands were created.
          schema:
            type: array
            description: An array containing the newly added band or bands including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        201:
          description: The specified band or bands were created and/or added to this person successfully.  The newly added band or bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the bands were newly created, not just modifications of or references to existing bands.'
          schema:
            type: array
            description: An array containing the newly added band or bands including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify or add the specified bands this person is a member of or is associated with.
      description: Modify or add the specified bands this person is a member of or is associated with.  Specify the band or bands to be modified/added using band id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personBandsPatch
        in: body
        description: An array containing one or more partial band objects specified by id or name along with the fields you want to modify and their new values.  If you specify any bands that do not exist already, they will be created.  If you specify any bands that are not associated with this person already, they will be added.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial band objects specified by id or name along with the fields you want to modify and their new values.  If you specify any bands that do not exist already, they will be created.  If you specify any bands that are not associated with this person already, they will be added.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/PersonBandPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band or bands were modified and/or added successfully.  The modified/added band or bands are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the person occurred - no new bands were created.
          schema:
            type: array
            description: Array containing the band or bands that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        201:
          description: The specified band or bands were modified/created and/or added to the person successfully.  The modified/created/added band or bands are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the bands were newly created, not just modifications of or references to existing bands.
          schema:
            type: array
            description: An array containing the band or bands that were modified/created and added to the person successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace/create the specified bands this person is a member of or is associated with.  Add them to this subcollection in the person if they were not already here.
      description: Replace/create the specified bands this person is a member of or is associated with.  Specify bands to be replaced by id or name.  Add them to this subcollection in the person if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personBandsPut
        in: body
        description: An array containing one or more bands specified by id or name.  If you specify a band that exists already, the band will be replaced.  If you specify a band that does not exist, the band will be created.  Either way, if the band is not associated with this person already (in this collection), the band will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more bands specified by id or name.  If you specify a band that exists already, the band will be replaced.  If you specify a band that does not exist, the band will be created.  Either way, if the band is not associated with this person already (in this collection), the band will be added.
          minItems: 1
          items:
            $ref: '#/definitions/PersonBandPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band or bands were replaced.  They were added to this person if they were not already associated.  The replaced band or bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned bands are replacements - not brand new bands.
          schema:
            type: array
            description: An array containing the band or bands that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        201:
          description: The specified band or bands were replaced and/or created successfully.  They were added to this person if they were not already associated.  The replaced/created band or bands are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the bands are brand new and did not replace any existing bands.
          schema:
            type: array
            description: An array containing the band or bands that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Remove the specified bands this person is a member of or is associated with.
      description: Remove the specified bands this person is a member of or is associated with.
      parameters:
      - $ref: '#/parameters/personParam'
      - name: personBandsDelete
        in: body
        description: An array of id or name values representing one or more bands to remove from this person.  Use either this request body or the provided query args to select which bands you want to remove.  A remove call to this URI with no particular bands specified will cause ALL bands to be removed from the person.
        schema:
          type: array
          description: An array of id or name values representing one or more bands to remove from this person.  Use either this request body or the provided query args to select which bands you want to remove.  A remove call to this URI with no particular bands specified will cause ALL bands to be removed from the person.
          minItems: 0
          items:
            type: string
            description: The id or name of a band to remove from the person.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified bands were removed from the person successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/bands/{band}:
    get:
      tags:
      - People
      summary: Get the specified band.
      description: Get the specified band and band info.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified band with band info.
          schema:
            $ref: '#/definitions/PersonBandWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify the specified band.
      description: Modify the specified band.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandPatch
        in: body
        description: An object containing one or more fields to modify on the specified band.  If you are modifying one of the sub-arrays within a band, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/PersonBandPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band was modified successfully.  The band is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/PersonBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace the specified band.
      description: Replace the specified band.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandPut
        in: body
        description: A new band to replace the specified band.
        required: true
        schema:
          $ref: '#/definitions/PersonBandPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified band was replaced successfully.  The new band is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/PersonBand'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Remove the specified band from this person.
      description: Delete the specified band from this person.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      responses:
        204:
          description: The specified band was removed from this person successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/bands/{band}/roles:
    get:
      tags:
      - People
      summary: Get the collection of roles this person has had in this band (like instruments played).
      description: Get the collection of roles this person has had in this band (like instruments played).
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of roles this person has had in this band (like instruments played).
          schema:
            $ref: '#/definitions/PersonBandRoles'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - People
      summary: Submit a new set of roles this person has had in this band (like instruments played).
      description: Submit a new set of roles this person has had in this band (like instruments played).  Roles must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandRoles
        in: body
        description: An array containing one or more new or existing roles to add to the roles collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing roles to add to the roles collection.
          minItems: 1
          items:
            $ref: '#/definitions/PersonBandRolePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were added to this band successfully.  The newly added role or roles are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the band occurred - no new roles were created.
          schema:
            type: array
            description: An array containing the newly added role or roles including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        201:
          description: The specified role or roles were created and/or added to this band successfully.  The newly added role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles were newly created, not just modifications of or references to existing roles.'
          schema:
            type: array
            description: An array containing the newly added role or roles including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify or add the specified roles this person has had in this band (like instruments played).
      description: Modify or add the specified roles this person has had in this band (like instruments played).  Specify the role or roles to be modified/added using role id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandRolesPatch
        in: body
        description: An array containing one or more partial role objects specified by id or name along with the fields you want to modify and their new values.  If you specify any roles that do not exist already, they will be created.  If you specify any roles that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial role objects specified by id or name along with the fields you want to modify and their new values.  If you specify any roles that do not exist already, they will be created.  If you specify any roles that are not associated with this band already, they will be added.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/PersonBandRolePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were modified and/or added successfully.  The modified/added role or roles are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the band occurred - no new roles were created.
          schema:
            type: array
            description: Array containing the role or roles that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        201:
          description: The specified role or roles were modified/created and/or added to the band successfully.  The modified/created/added role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles were newly created, not just modifications of or references to existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were modified/created and added to the band successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace/create the specified roles this person has had in this band (like instruments played).  Add them to this subcollection in the band if they were not already here.
      description: Replace/create the specified roles this person has had in this band (like instruments played).  Specify roles to be replaced by id or name.  Add them to this subcollection in the band if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandRolesPut
        in: body
        description: An array containing one or more roles specified by id or name.  If you specify a role that exists already, the role will be replaced.  If you specify a role that does not exist, the role will be created.  Either way, if the role is not associated with this band already (in this collection), the role will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more roles specified by id or name.  If you specify a role that exists already, the role will be replaced.  If you specify a role that does not exist, the role will be created.  Either way, if the role is not associated with this band already (in this collection), the role will be added.
          minItems: 1
          items:
            $ref: '#/definitions/PersonBandRolePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were replaced.  They were added to this band if they were not already associated.  The replaced role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned roles are replacements - not brand new roles.
          schema:
            type: array
            description: An array containing the role or roles that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        201:
          description: The specified role or roles were replaced and/or created successfully.  They were added to this band if they were not already associated.  The replaced/created role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the roles are brand new and did not replace any existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/PersonBandRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Remove the specified roles this person has had in this band (like instruments played).
      description: Remove the specified roles this person has had in this band (like instruments played).
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - name: personBandRolesDelete
        in: body
        description: An array of id or name values representing one or more roles to remove from this band.  Use either this request body or the provided query args to select which roles you want to remove.  A remove call to this URI with no particular roles specified will cause ALL roles to be removed from the band.
        schema:
          type: array
          description: An array of id or name values representing one or more roles to remove from this band.  Use either this request body or the provided query args to select which roles you want to remove.  A remove call to this URI with no particular roles specified will cause ALL roles to be removed from the band.
          minItems: 0
          items:
            type: string
            description: The id or name of a role to remove from the band.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified roles were removed from the band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/bands/{band}/roles/{role}:
    get:
      tags:
      - People
      summary: Get the specified role.
      description: Get the specified role and role info.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/roleParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified role with role info.
          schema:
            $ref: '#/definitions/PersonBandRoleWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - People
      summary: Modify the specified role.
      description: Modify the specified role.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/roleParam'
      - name: personBandRolePatch
        in: body
        description: An object containing one or more fields to modify on the specified role.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/PersonBandRolePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was modified successfully.  The role is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/PersonBandRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - People
      summary: Replace the specified role.
      description: Replace the specified role.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/roleParam'
      - name: personBandRolePut
        in: body
        description: A new role to replace the specified role.
        required: true
        schema:
          $ref: '#/definitions/PersonBandRolePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was replaced successfully.  The new role is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/PersonBandRole'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - People
      summary: Remove the specified role from this band.
      description: Delete the specified role from this band.
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/bandParam'
      - $ref: '#/parameters/roleParam'
      responses:
        204:
          description: The specified role was removed from this band successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/roles:
    get:
      tags:
      - People
      summary: Get the collection of roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
      description: Get the collection of roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
          schema:
            $ref: '#/definitions/PersonRoles'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/roles/{role}:
    get:
      tags:
      - People
      summary: Get the specified role.
      description: Get the specified role and role info.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/roleParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified role with role info.
          schema:
            $ref: '#/definitions/PersonRoleWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/cities:
    get:
      tags:
      - People
      summary: Get the collection of city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
      description: Get the collection of city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
          schema:
            $ref: '#/definitions/PersonCities'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /people/{person}/cities/{city}:
    get:
      tags:
      - People
      summary: Get the specified city.
      description: Get the specified city and city info.
      security: []
      parameters:
      - $ref: '#/parameters/personParam'
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified city with city info.
          schema:
            $ref: '#/definitions/PersonCityWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /roles:
    get:
      tags:
      - Roles
      summary: Get the collection of roles with role info.
      description: Get the collection of roles with role info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of roles with role info.
          schema:
            $ref: '#/definitions/Roles'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Roles
      summary: Submit a new role or roles.
      description: Submit a new role or roles to the roles collection.  Roles must be submitted in an array, even if there is only one.
      parameters:
      - name: roles
        in: body
        description: An array containing one or more roles to add to the roles collection.
        required: true
        schema:
          type: array
          description: An array containing one or more roles to add to the roles collection.
          minItems: 1
          items:
            $ref: '#/definitions/RolePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified role or roles were added successfully.  The newly added role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added role or roles including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Role'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Roles
      summary: Modify or create the specified role or roles.
      description: Modify or create the specified role or roles.  Specify an existing role or roles to be modified using role id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: rolesPatch
        in: body
        description: An array containing one or more role modification objects, or new roles.  Specify existing roles to modify by id or name.  If you specify any roles that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more role modification objects, or new roles.  Specify existing roles to modify by id or name.  If you specify any roles that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/RolePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were modified successfully.  The modified role or roles are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new roles were created.
          schema:
            type: array
            description: Array containing the role or roles that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Role'
        201:
          description: The specified role or roles were modified and/or created successfully.  The modified/created role or roles are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the roles were new additions to the collection, not just modifications of existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Role'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Roles
      summary: Replace or create the specified role or roles.
      description: Replace or create the specified role or roles.  Specify existing roles to replace by id or name.  If you specify any roles that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: rolesPut
        in: body
        description: An array containing one or more roles specified by id or name.  If you specify a role that is not found in the collection already, the role will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more roles specified by id or name.  If you specify a role that is not found in the collection already, the role will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/RolePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role or roles were replaced successfully.  The replaced role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new roles were created.
          schema:
            type: array
            description: An array containing the role or roles that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Role'
        201:
          description: The specified role or roles were replaced and/or created successfully.  The replaced/created role or roles are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the roles were new additions to the collection, not just replacements of existing roles.
          schema:
            type: array
            description: An array containing the role or roles that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Role'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Roles
      summary: Delete the specified role or roles.
      description: Delete the specified role or roles.
      parameters:
      - name: rolesDelete
        in: body
        description: 'An array of id or name values representing one or more roles to delete.  Use either this request body or the provided query args to select which roles you want to delete.  WARNING: A DELETE call to this URI with no particular roles specified will cause ALL roles to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more roles to delete.  Use either this request body or the provided query args to select which roles you want to delete.  WARNING: A DELETE call to this URI with no particular roles specified will cause ALL roles to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a role to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified roles were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /roles/{role}:
    get:
      tags:
      - Roles
      summary: Get the specified role.
      description: Get the specified role and role info.
      security: []
      parameters:
      - $ref: '#/parameters/roleParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified role with role info.
          schema:
            $ref: '#/definitions/RoleWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Roles
      summary: Modify the specified role.
      description: Modify the specified role.
      parameters:
      - $ref: '#/parameters/roleParam'
      - name: rolePatch
        in: body
        description: An object containing one or more fields to modify on the specified role.  If you are modifying one of the sub-arrays within a role, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RolePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was modified successfully.  The role is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Role'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Roles
      summary: Replace the specified role.
      description: Replace the specified role.
      parameters:
      - $ref: '#/parameters/roleParam'
      - name: rolePut
        in: body
        description: A new role to replace the specified role.
        required: true
        schema:
          $ref: '#/definitions/RolePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified role was replaced successfully.  The new role is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Role'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Roles
      summary: Delete the specified role.
      description: Delete the specified role.
      parameters:
      - $ref: '#/parameters/roleParam'
      responses:
        204:
          description: The specified role was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/cities:
    get:
      tags:
      - Locations
      summary: Get the collection of cities with city info.
      description: Get the collection of cities with city info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of cities with city info.
          schema:
            $ref: '#/definitions/Cities'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new city or cities.
      description: Submit a new city or cities to the cities collection.  Cities must be submitted in an array, even if there is only one.
      parameters:
      - name: cities
        in: body
        description: An array containing one or more cities to add to the cities collection.
        required: true
        schema:
          type: array
          description: An array containing one or more cities to add to the cities collection.
          minItems: 1
          items:
            $ref: '#/definitions/CityPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified city or cities were added successfully.  The newly added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/City'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or create the specified city or cities.
      description: Modify or create the specified city or cities.  Specify an existing city or cities to be modified using city id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: citiesPatch
        in: body
        description: An array containing one or more city modification objects, or new cities.  Specify existing cities to modify by id or name.  If you specify any cities that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more city modification objects, or new cities.  Specify existing cities to modify by id or name.  If you specify any cities that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/CityPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were modified successfully.  The modified city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new cities were created.
          schema:
            type: array
            description: Array containing the city or cities that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/City'
        201:
          description: The specified city or cities were modified and/or created successfully.  The modified/created city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the cities were new additions to the collection, not just modifications of existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/City'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace or create the specified city or cities.
      description: Replace or create the specified city or cities.  Specify existing cities to replace by id or name.  If you specify any cities that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: citiesPut
        in: body
        description: An array containing one or more cities specified by id or name.  If you specify a city that is not found in the collection already, the city will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more cities specified by id or name.  If you specify a city that is not found in the collection already, the city will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/CityPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were replaced successfully.  The replaced city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new cities were created.
          schema:
            type: array
            description: An array containing the city or cities that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/City'
        201:
          description: The specified city or cities were replaced and/or created successfully.  The replaced/created city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the cities were new additions to the collection, not just replacements of existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/City'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified city or cities.
      description: Delete the specified city or cities.
      parameters:
      - name: citiesDelete
        in: body
        description: 'An array of id or name values representing one or more cities to delete.  Use either this request body or the provided query args to select which cities you want to delete.  WARNING: A DELETE call to this URI with no particular cities specified will cause ALL cities to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more cities to delete.  Use either this request body or the provided query args to select which cities you want to delete.  WARNING: A DELETE call to this URI with no particular cities specified will cause ALL cities to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a city to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified cities were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/cities/{city}:
    get:
      tags:
      - Locations
      summary: Get the specified city.
      description: Get the specified city and city info.
      security: []
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified city with city info.
          schema:
            $ref: '#/definitions/CityWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified city.
      description: Modify the specified city.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityPatch
        in: body
        description: An object containing one or more fields to modify on the specified city.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/CityPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was modified successfully.  The city is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/City'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified city.
      description: Replace the specified city.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityPut
        in: body
        description: A new city to replace the specified city.
        required: true
        schema:
          $ref: '#/definitions/CityPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was replaced successfully.  The new city is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/City'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified city.
      description: Delete the specified city.
      parameters:
      - $ref: '#/parameters/cityParam'
      responses:
        204:
          description: The specified city was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/cities/{city}/regions:
    get:
      tags:
      - Locations
      summary: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      description: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      security: []
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
          schema:
            $ref: '#/definitions/CityRegions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      description: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  Regions must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityRegions
        in: body
        description: An array containing one or more new or existing regions to add to the regions collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing regions to add to the regions collection.
          minItems: 1
          items:
            $ref: '#/definitions/CityRegionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were added to this city successfully.  The newly added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the city occurred - no new regions were created.
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        201:
          description: The specified region or regions were created and/or added to this city successfully.  The newly added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.'
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      description: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  Specify the region or regions to be modified/added using region id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityRegionsPatch
        in: body
        description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this city already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this city already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/CityRegionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were modified and/or added successfully.  The modified/added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the city occurred - no new regions were created.
          schema:
            type: array
            description: Array containing the region or regions that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        201:
          description: The specified region or regions were modified/created and/or added to the city successfully.  The modified/created/added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were modified/created and added to the city successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  Add them to this subcollection in the city if they were not already here.
      description: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  Specify regions to be replaced by id or name.  Add them to this subcollection in the city if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityRegionsPut
        in: body
        description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this city already (in this collection), the region will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this city already (in this collection), the region will be added.
          minItems: 1
          items:
            $ref: '#/definitions/CityRegionPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were replaced.  They were added to this city if they were not already associated.  The replaced region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned regions are replacements - not brand new regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        201:
          description: The specified region or regions were replaced and/or created successfully.  They were added to this city if they were not already associated.  The replaced/created region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions are brand new and did not replace any existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CityRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      description: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
      parameters:
      - $ref: '#/parameters/cityParam'
      - name: cityRegionsDelete
        in: body
        description: An array of id or name values representing one or more regions to remove from this city.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the city.
        schema:
          type: array
          description: An array of id or name values representing one or more regions to remove from this city.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the city.
          minItems: 0
          items:
            type: string
            description: The id or name of a region to remove from the city.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified regions were removed from the city successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/cities/{city}/regions/{region}:
    get:
      tags:
      - Locations
      summary: Get the specified region.
      description: Get the specified region and region info.
      security: []
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified region with region info.
          schema:
            $ref: '#/definitions/CityRegionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified region.
      description: Modify the specified region.
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/regionParam'
      - name: cityRegionPatch
        in: body
        description: An object containing one or more fields to modify on the specified region.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/CityRegionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was modified successfully.  The region is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CityRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified region.
      description: Replace the specified region.
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/regionParam'
      - name: cityRegionPut
        in: body
        description: A new region to replace the specified region.
        required: true
        schema:
          $ref: '#/definitions/CityRegionPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was replaced successfully.  The new region is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CityRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified region from this city.
      description: Delete the specified region from this city.
      parameters:
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/regionParam'
      responses:
        204:
          description: The specified region was removed from this city successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states:
    get:
      tags:
      - Locations
      summary: Get the collection of states/provinces/prefectures.
      description: Get the collection of states, provinces, prefectures, or other administrative areas where bands or artists play.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of states, provinces, prefectures, or other administrative areas where bands or artists play.
          schema:
            $ref: '#/definitions/States'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new state or states.
      description: Submit a new state or states to the states collection.  States must be submitted in an array, even if there is only one.
      parameters:
      - name: states
        in: body
        description: An array containing one or more states to add to the states collection.
        required: true
        schema:
          type: array
          description: An array containing one or more states to add to the states collection.
          minItems: 1
          items:
            $ref: '#/definitions/StatePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified state or states were added successfully.  The newly added state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added state or states including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/State'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or create the specified state or states.
      description: Modify or create the specified state or states.  Specify an existing state or states to be modified using state id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: statesPatch
        in: body
        description: An array containing one or more state modification objects, or new states.  Specify existing states to modify by id or name.  If you specify any states that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more state modification objects, or new states.  Specify existing states to modify by id or name.  If you specify any states that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/StatePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were modified successfully.  The modified state or states are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new states were created.
          schema:
            type: array
            description: Array containing the state or states that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/State'
        201:
          description: The specified state or states were modified and/or created successfully.  The modified/created state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the states were new additions to the collection, not just modifications of existing states.
          schema:
            type: array
            description: An array containing the state or states that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/State'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace or create the specified state or states.
      description: Replace or create the specified state or states.  Specify existing states to replace by id or name.  If you specify any states that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: statesPut
        in: body
        description: An array containing one or more states specified by id or name.  If you specify a state that is not found in the collection already, the state will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more states specified by id or name.  If you specify a state that is not found in the collection already, the state will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/StatePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were replaced successfully.  The replaced state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new states were created.
          schema:
            type: array
            description: An array containing the state or states that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/State'
        201:
          description: The specified state or states were replaced and/or created successfully.  The replaced/created state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the states were new additions to the collection, not just replacements of existing states.
          schema:
            type: array
            description: An array containing the state or states that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/State'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified state or states.
      description: Delete the specified state or states.
      parameters:
      - name: statesDelete
        in: body
        description: 'An array of id or name values representing one or more states to delete.  Use either this request body or the provided query args to select which states you want to delete.  WARNING: A DELETE call to this URI with no particular states specified will cause ALL states to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more states to delete.  Use either this request body or the provided query args to select which states you want to delete.  WARNING: A DELETE call to this URI with no particular states specified will cause ALL states to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a state to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified states were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states/{state}:
    get:
      tags:
      - Locations
      summary: Get the specified state.
      description: Get the specified state and state info.
      security: []
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified state with state info.
          schema:
            $ref: '#/definitions/StateWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified state.
      description: Modify the specified state.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: statePatch
        in: body
        description: An object containing one or more fields to modify on the specified state.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/StatePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was modified successfully.  The state is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/State'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified state.
      description: Replace the specified state.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: statePut
        in: body
        description: A new state to replace the specified state.
        required: true
        schema:
          $ref: '#/definitions/StatePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was replaced successfully.  The new state is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/State'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified state.
      description: Delete the specified state.
      parameters:
      - $ref: '#/parameters/stateParam'
      responses:
        204:
          description: The specified state was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states/{state}/cities:
    get:
      tags:
      - Locations
      summary: Get the collection of cities that belong to or are located in this state/province/prefecture.
      description: Get the collection of cities that belong to or are located in this state/province/prefecture.
      security: []
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of cities that belong to or are located in this state/province/prefecture.
          schema:
            $ref: '#/definitions/StateCities'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of cities that belong to or are located in this state/province/prefecture.
      description: Submit a new set of cities that belong to or are located in this state/province/prefecture.  Cities must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateCities
        in: body
        description: An array containing one or more new or existing cities to add to the cities collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing cities to add to the cities collection.
          minItems: 1
          items:
            $ref: '#/definitions/StateCityPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were added to this state successfully.  The newly added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the state occurred - no new cities were created.
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        201:
          description: The specified city or cities were created and/or added to this state successfully.  The newly added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.'
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified cities that belong to or are located in this state/province/prefecture.
      description: Modify or add the specified cities that belong to or are located in this state/province/prefecture.  Specify the city or cities to be modified/added using city id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateCitiesPatch
        in: body
        description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this state already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this state already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/StateCityPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were modified and/or added successfully.  The modified/added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the state occurred - no new cities were created.
          schema:
            type: array
            description: Array containing the city or cities that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        201:
          description: The specified city or cities were modified/created and/or added to the state successfully.  The modified/created/added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were modified/created and added to the state successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified cities that belong to or are located in this state/province/prefecture.  Add them to this subcollection in the state if they were not already here.
      description: Replace/create the specified cities that belong to or are located in this state/province/prefecture.  Specify cities to be replaced by id or name.  Add them to this subcollection in the state if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateCitiesPut
        in: body
        description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this state already (in this collection), the city will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this state already (in this collection), the city will be added.
          minItems: 1
          items:
            $ref: '#/definitions/StateCityPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were replaced.  They were added to this state if they were not already associated.  The replaced city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned cities are replacements - not brand new cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        201:
          description: The specified city or cities were replaced and/or created successfully.  They were added to this state if they were not already associated.  The replaced/created city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities are brand new and did not replace any existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified cities that belong to or are located in this state/province/prefecture.
      description: Remove the specified cities that belong to or are located in this state/province/prefecture.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateCitiesDelete
        in: body
        description: An array of id or name values representing one or more cities to remove from this state.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the state.
        schema:
          type: array
          description: An array of id or name values representing one or more cities to remove from this state.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the state.
          minItems: 0
          items:
            type: string
            description: The id or name of a city to remove from the state.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified cities were removed from the state successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states/{state}/cities/{city}:
    get:
      tags:
      - Locations
      summary: Get the specified city.
      description: Get the specified city and city info.
      security: []
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified city with city info.
          schema:
            $ref: '#/definitions/StateCityWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified city.
      description: Modify the specified city.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/cityParam'
      - name: stateCityPatch
        in: body
        description: An object containing one or more fields to modify on the specified city.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/StateCityPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was modified successfully.  The city is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/StateCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified city.
      description: Replace the specified city.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/cityParam'
      - name: stateCityPut
        in: body
        description: A new city to replace the specified city.
        required: true
        schema:
          $ref: '#/definitions/StateCityPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was replaced successfully.  The new city is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/StateCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified city from this state.
      description: Delete the specified city from this state.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/cityParam'
      responses:
        204:
          description: The specified city was removed from this state successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states/{state}/regions:
    get:
      tags:
      - Locations
      summary: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      description: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      security: []
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
          schema:
            $ref: '#/definitions/StateRegions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      description: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  Regions must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateRegions
        in: body
        description: An array containing one or more new or existing regions to add to the regions collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing regions to add to the regions collection.
          minItems: 1
          items:
            $ref: '#/definitions/StateRegionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were added to this state successfully.  The newly added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the state occurred - no new regions were created.
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        201:
          description: The specified region or regions were created and/or added to this state successfully.  The newly added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.'
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      description: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  Specify the region or regions to be modified/added using region id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateRegionsPatch
        in: body
        description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this state already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this state already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/StateRegionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were modified and/or added successfully.  The modified/added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the state occurred - no new regions were created.
          schema:
            type: array
            description: Array containing the region or regions that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        201:
          description: The specified region or regions were modified/created and/or added to the state successfully.  The modified/created/added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were modified/created and added to the state successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  Add them to this subcollection in the state if they were not already here.
      description: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  Specify regions to be replaced by id or name.  Add them to this subcollection in the state if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateRegionsPut
        in: body
        description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this state already (in this collection), the region will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this state already (in this collection), the region will be added.
          minItems: 1
          items:
            $ref: '#/definitions/StateRegionPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were replaced.  They were added to this state if they were not already associated.  The replaced region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned regions are replacements - not brand new regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        201:
          description: The specified region or regions were replaced and/or created successfully.  They were added to this state if they were not already associated.  The replaced/created region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions are brand new and did not replace any existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/StateRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      description: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
      parameters:
      - $ref: '#/parameters/stateParam'
      - name: stateRegionsDelete
        in: body
        description: An array of id or name values representing one or more regions to remove from this state.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the state.
        schema:
          type: array
          description: An array of id or name values representing one or more regions to remove from this state.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the state.
          minItems: 0
          items:
            type: string
            description: The id or name of a region to remove from the state.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified regions were removed from the state successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/states/{state}/regions/{region}:
    get:
      tags:
      - Locations
      summary: Get the specified region.
      description: Get the specified region and region info.
      security: []
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified region with region info.
          schema:
            $ref: '#/definitions/StateRegionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified region.
      description: Modify the specified region.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/regionParam'
      - name: stateRegionPatch
        in: body
        description: An object containing one or more fields to modify on the specified region.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/StateRegionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was modified successfully.  The region is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/StateRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified region.
      description: Replace the specified region.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/regionParam'
      - name: stateRegionPut
        in: body
        description: A new region to replace the specified region.
        required: true
        schema:
          $ref: '#/definitions/StateRegionPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was replaced successfully.  The new region is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/StateRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified region from this state.
      description: Delete the specified region from this state.
      parameters:
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/regionParam'
      responses:
        204:
          description: The specified region was removed from this state successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries:
    get:
      tags:
      - Locations
      summary: Get the collection of countries with country info.
      description: Get the collection of countries with country info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of countries with country info.
          schema:
            $ref: '#/definitions/Countries'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new country or countries.
      description: Submit a new country or countries to the countries collection.  Countries must be submitted in an array, even if there is only one.
      parameters:
      - name: countries
        in: body
        description: An array containing one or more countries to add to the countries collection.
        required: true
        schema:
          type: array
          description: An array containing one or more countries to add to the countries collection.
          minItems: 1
          items:
            $ref: '#/definitions/CountryPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified country or countries were added successfully.  The newly added country or countries are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added country or countries including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Country'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or create the specified country or countries.
      description: Modify or create the specified country or countries.  Specify an existing country or countries to be modified using country id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: countriesPatch
        in: body
        description: An array containing one or more country modification objects, or new countries.  Specify existing countries to modify by id or name.  If you specify any countries that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more country modification objects, or new countries.  Specify existing countries to modify by id or name.  If you specify any countries that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/CountryPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country or countries were modified successfully.  The modified country or countries are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new countries were created.
          schema:
            type: array
            description: Array containing the country or countries that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Country'
        201:
          description: The specified country or countries were modified and/or created successfully.  The modified/created country or countries are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the countries were new additions to the collection, not just modifications of existing countries.
          schema:
            type: array
            description: An array containing the country or countries that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Country'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace or create the specified country or countries.
      description: Replace or create the specified country or countries.  Specify existing countries to replace by id or name.  If you specify any countries that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: countriesPut
        in: body
        description: An array containing one or more countries specified by id or name.  If you specify a country that is not found in the collection already, the country will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more countries specified by id or name.  If you specify a country that is not found in the collection already, the country will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/CountryPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country or countries were replaced successfully.  The replaced country or countries are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new countries were created.
          schema:
            type: array
            description: An array containing the country or countries that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Country'
        201:
          description: The specified country or countries were replaced and/or created successfully.  The replaced/created country or countries are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the countries were new additions to the collection, not just replacements of existing countries.
          schema:
            type: array
            description: An array containing the country or countries that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Country'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified country or countries.
      description: Delete the specified country or countries.
      parameters:
      - name: countriesDelete
        in: body
        description: 'An array of id or name values representing one or more countries to delete.  Use either this request body or the provided query args to select which countries you want to delete.  WARNING: A DELETE call to this URI with no particular countries specified will cause ALL countries to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more countries to delete.  Use either this request body or the provided query args to select which countries you want to delete.  WARNING: A DELETE call to this URI with no particular countries specified will cause ALL countries to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a country to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified countries were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries/{country}:
    get:
      tags:
      - Locations
      summary: Get the specified country.
      description: Get the specified country and country info.
      security: []
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified country with country info.
          schema:
            $ref: '#/definitions/CountryWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified country.
      description: Modify the specified country.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryPatch
        in: body
        description: An object containing one or more fields to modify on the specified country.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/CountryPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country was modified successfully.  The country is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Country'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified country.
      description: Replace the specified country.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryPut
        in: body
        description: A new country to replace the specified country.
        required: true
        schema:
          $ref: '#/definitions/CountryPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country was replaced successfully.  The new country is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Country'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified country.
      description: Delete the specified country.
      parameters:
      - $ref: '#/parameters/countryParam'
      responses:
        204:
          description: The specified country was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries/{country}/states:
    get:
      tags:
      - Locations
      summary: Get the collection of states/provinces/prefectures that belong to or are located in this country.
      description: Get the collection of states/provinces/prefectures that belong to or are located in this country.
      security: []
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of states/provinces/prefectures that belong to or are located in this country.
          schema:
            $ref: '#/definitions/CountryStates'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of states/provinces/prefectures that belong to or are located in this country.
      description: Submit a new set of states/provinces/prefectures that belong to or are located in this country.  States must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryStates
        in: body
        description: An array containing one or more new or existing states to add to the states collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing states to add to the states collection.
          minItems: 1
          items:
            $ref: '#/definitions/CountryStatePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were added to this country successfully.  The newly added state or states are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the country occurred - no new states were created.
          schema:
            type: array
            description: An array containing the newly added state or states including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        201:
          description: The specified state or states were created and/or added to this country successfully.  The newly added state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states were newly created, not just modifications of or references to existing states.'
          schema:
            type: array
            description: An array containing the newly added state or states including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified states/provinces/prefectures that belong to or are located in this country.
      description: Modify or add the specified states/provinces/prefectures that belong to or are located in this country.  Specify the state or states to be modified/added using state id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryStatesPatch
        in: body
        description: An array containing one or more partial state objects specified by id or name along with the fields you want to modify and their new values.  If you specify any states that do not exist already, they will be created.  If you specify any states that are not associated with this country already, they will be added.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial state objects specified by id or name along with the fields you want to modify and their new values.  If you specify any states that do not exist already, they will be created.  If you specify any states that are not associated with this country already, they will be added.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/CountryStatePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were modified and/or added successfully.  The modified/added state or states are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the country occurred - no new states were created.
          schema:
            type: array
            description: Array containing the state or states that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        201:
          description: The specified state or states were modified/created and/or added to the country successfully.  The modified/created/added state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states were newly created, not just modifications of or references to existing states.
          schema:
            type: array
            description: An array containing the state or states that were modified/created and added to the country successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified states/provinces/prefectures that belong to or are located in this country.  Add them to this subcollection in the country if they were not already here.
      description: Replace/create the specified states/provinces/prefectures that belong to or are located in this country.  Specify states to be replaced by id or name.  Add them to this subcollection in the country if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryStatesPut
        in: body
        description: An array containing one or more states specified by id or name.  If you specify a state that exists already, the state will be replaced.  If you specify a state that does not exist, the state will be created.  Either way, if the state is not associated with this country already (in this collection), the state will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more states specified by id or name.  If you specify a state that exists already, the state will be replaced.  If you specify a state that does not exist, the state will be created.  Either way, if the state is not associated with this country already (in this collection), the state will be added.
          minItems: 1
          items:
            $ref: '#/definitions/CountryStatePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were replaced.  They were added to this country if they were not already associated.  The replaced state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned states are replacements - not brand new states.
          schema:
            type: array
            description: An array containing the state or states that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        201:
          description: The specified state or states were replaced and/or created successfully.  They were added to this country if they were not already associated.  The replaced/created state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states are brand new and did not replace any existing states.
          schema:
            type: array
            description: An array containing the state or states that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified states/provinces/prefectures that belong to or are located in this country.
      description: Remove the specified states/provinces/prefectures that belong to or are located in this country.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryStatesDelete
        in: body
        description: An array of id or name values representing one or more states to remove from this country.  Use either this request body or the provided query args to select which states you want to remove.  A remove call to this URI with no particular states specified will cause ALL states to be removed from the country.
        schema:
          type: array
          description: An array of id or name values representing one or more states to remove from this country.  Use either this request body or the provided query args to select which states you want to remove.  A remove call to this URI with no particular states specified will cause ALL states to be removed from the country.
          minItems: 0
          items:
            type: string
            description: The id or name of a state to remove from the country.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified states were removed from the country successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries/{country}/states/{state}:
    get:
      tags:
      - Locations
      summary: Get the specified state.
      description: Get the specified state and state info.
      security: []
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified state with state info.
          schema:
            $ref: '#/definitions/CountryStateWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified state.
      description: Modify the specified state.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/stateParam'
      - name: countryStatePatch
        in: body
        description: An object containing one or more fields to modify on the specified state.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/CountryStatePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was modified successfully.  The state is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CountryState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified state.
      description: Replace the specified state.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/stateParam'
      - name: countryStatePut
        in: body
        description: A new state to replace the specified state.
        required: true
        schema:
          $ref: '#/definitions/CountryStatePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was replaced successfully.  The new state is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CountryState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified state from this country.
      description: Delete the specified state from this country.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/stateParam'
      responses:
        204:
          description: The specified state was removed from this country successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries/{country}/regions:
    get:
      tags:
      - Locations
      summary: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      description: Get the collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      security: []
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
          schema:
            $ref: '#/definitions/CountryRegions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      description: Submit a new set of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  Regions must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryRegions
        in: body
        description: An array containing one or more new or existing regions to add to the regions collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing regions to add to the regions collection.
          minItems: 1
          items:
            $ref: '#/definitions/CountryRegionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were added to this country successfully.  The newly added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the country occurred - no new regions were created.
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        201:
          description: The specified region or regions were created and/or added to this country successfully.  The newly added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.'
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      description: Modify or add the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  Specify the region or regions to be modified/added using region id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryRegionsPatch
        in: body
        description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this country already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this country already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/CountryRegionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were modified and/or added successfully.  The modified/added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the country occurred - no new regions were created.
          schema:
            type: array
            description: Array containing the region or regions that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        201:
          description: The specified region or regions were modified/created and/or added to the country successfully.  The modified/created/added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were modified/created and added to the country successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  Add them to this subcollection in the country if they were not already here.
      description: Replace/create the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  Specify regions to be replaced by id or name.  Add them to this subcollection in the country if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryRegionsPut
        in: body
        description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this country already (in this collection), the region will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this country already (in this collection), the region will be added.
          minItems: 1
          items:
            $ref: '#/definitions/CountryRegionPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were replaced.  They were added to this country if they were not already associated.  The replaced region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned regions are replacements - not brand new regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        201:
          description: The specified region or regions were replaced and/or created successfully.  They were added to this country if they were not already associated.  The replaced/created region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions are brand new and did not replace any existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/CountryRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      description: Remove the specified any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
      parameters:
      - $ref: '#/parameters/countryParam'
      - name: countryRegionsDelete
        in: body
        description: An array of id or name values representing one or more regions to remove from this country.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the country.
        schema:
          type: array
          description: An array of id or name values representing one or more regions to remove from this country.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the country.
          minItems: 0
          items:
            type: string
            description: The id or name of a region to remove from the country.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified regions were removed from the country successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/countries/{country}/regions/{region}:
    get:
      tags:
      - Locations
      summary: Get the specified region.
      description: Get the specified region and region info.
      security: []
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified region with region info.
          schema:
            $ref: '#/definitions/CountryRegionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified region.
      description: Modify the specified region.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/regionParam'
      - name: countryRegionPatch
        in: body
        description: An object containing one or more fields to modify on the specified region.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/CountryRegionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was modified successfully.  The region is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CountryRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified region.
      description: Replace the specified region.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/regionParam'
      - name: countryRegionPut
        in: body
        description: A new region to replace the specified region.
        required: true
        schema:
          $ref: '#/definitions/CountryRegionPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was replaced successfully.  The new region is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/CountryRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified region from this country.
      description: Delete the specified region from this country.
      parameters:
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/regionParam'
      responses:
        204:
          description: The specified region was removed from this country successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions:
    get:
      tags:
      - Locations
      summary: Get the collection of regions with region info.
      description: Get the collection of regions with region info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of regions with region info.
          schema:
            $ref: '#/definitions/Regions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new region or regions.
      description: Submit a new region or regions to the regions collection.  Regions must be submitted in an array, even if there is only one.
      parameters:
      - name: regions
        in: body
        description: An array containing one or more regions to add to the regions collection.
        required: true
        schema:
          type: array
          description: An array containing one or more regions to add to the regions collection.
          minItems: 1
          items:
            $ref: '#/definitions/RegionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified region or regions were added successfully.  The newly added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Region'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or create the specified region or regions.
      description: Modify or create the specified region or regions.  Specify an existing region or regions to be modified using region id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: regionsPatch
        in: body
        description: An array containing one or more region modification objects, or new regions.  Specify existing regions to modify by id or name.  If you specify any regions that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more region modification objects, or new regions.  Specify existing regions to modify by id or name.  If you specify any regions that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/RegionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were modified successfully.  The modified region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new regions were created.
          schema:
            type: array
            description: Array containing the region or regions that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Region'
        201:
          description: The specified region or regions were modified and/or created successfully.  The modified/created region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the regions were new additions to the collection, not just modifications of existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Region'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace or create the specified region or regions.
      description: Replace or create the specified region or regions.  Specify existing regions to replace by id or name.  If you specify any regions that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: regionsPut
        in: body
        description: An array containing one or more regions specified by id or name.  If you specify a region that is not found in the collection already, the region will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more regions specified by id or name.  If you specify a region that is not found in the collection already, the region will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/RegionPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were replaced successfully.  The replaced region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new regions were created.
          schema:
            type: array
            description: An array containing the region or regions that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Region'
        201:
          description: The specified region or regions were replaced and/or created successfully.  The replaced/created region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the regions were new additions to the collection, not just replacements of existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Region'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified region or regions.
      description: Delete the specified region or regions.
      parameters:
      - name: regionsDelete
        in: body
        description: 'An array of id or name values representing one or more regions to delete.  Use either this request body or the provided query args to select which regions you want to delete.  WARNING: A DELETE call to this URI with no particular regions specified will cause ALL regions to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more regions to delete.  Use either this request body or the provided query args to select which regions you want to delete.  WARNING: A DELETE call to this URI with no particular regions specified will cause ALL regions to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a region to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified regions were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}:
    get:
      tags:
      - Locations
      summary: Get the specified region.
      description: Get the specified region and region info.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified region with region info.
          schema:
            $ref: '#/definitions/RegionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified region.
      description: Modify the specified region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionPatch
        in: body
        description: An object containing one or more fields to modify on the specified region.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RegionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was modified successfully.  The region is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Region'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified region.
      description: Replace the specified region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionPut
        in: body
        description: A new region to replace the specified region.
        required: true
        schema:
          $ref: '#/definitions/RegionPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was replaced successfully.  The new region is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Region'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Delete the specified region.
      description: Delete the specified region.
      parameters:
      - $ref: '#/parameters/regionParam'
      responses:
        204:
          description: The specified region was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/cities:
    get:
      tags:
      - Locations
      summary: Get the collection of cities that belong to or are located in this region.
      description: Get the collection of cities that belong to or are located in this region.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of cities that belong to or are located in this region.
          schema:
            $ref: '#/definitions/RegionCities'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of cities that belong to or are located in this region.
      description: Submit a new set of cities that belong to or are located in this region.  Cities must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCities
        in: body
        description: An array containing one or more new or existing cities to add to the cities collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing cities to add to the cities collection.
          minItems: 1
          items:
            $ref: '#/definitions/RegionCityPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were added to this region successfully.  The newly added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the region occurred - no new cities were created.
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        201:
          description: The specified city or cities were created and/or added to this region successfully.  The newly added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.'
          schema:
            type: array
            description: An array containing the newly added city or cities including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified cities that belong to or are located in this region.
      description: Modify or add the specified cities that belong to or are located in this region.  Specify the city or cities to be modified/added using city id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCitiesPatch
        in: body
        description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial city objects specified by id or name along with the fields you want to modify and their new values.  If you specify any cities that do not exist already, they will be created.  If you specify any cities that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/RegionCityPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were modified and/or added successfully.  The modified/added city or cities are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the region occurred - no new cities were created.
          schema:
            type: array
            description: Array containing the city or cities that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        201:
          description: The specified city or cities were modified/created and/or added to the region successfully.  The modified/created/added city or cities are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities were newly created, not just modifications of or references to existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were modified/created and added to the region successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified cities that belong to or are located in this region.  Add them to this subcollection in the region if they were not already here.
      description: Replace/create the specified cities that belong to or are located in this region.  Specify cities to be replaced by id or name.  Add them to this subcollection in the region if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCitiesPut
        in: body
        description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this region already (in this collection), the city will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more cities specified by id or name.  If you specify a city that exists already, the city will be replaced.  If you specify a city that does not exist, the city will be created.  Either way, if the city is not associated with this region already (in this collection), the city will be added.
          minItems: 1
          items:
            $ref: '#/definitions/RegionCityPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city or cities were replaced.  They were added to this region if they were not already associated.  The replaced city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned cities are replacements - not brand new cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        201:
          description: The specified city or cities were replaced and/or created successfully.  They were added to this region if they were not already associated.  The replaced/created city or cities are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the cities are brand new and did not replace any existing cities.
          schema:
            type: array
            description: An array containing the city or cities that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified cities that belong to or are located in this region.
      description: Remove the specified cities that belong to or are located in this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCitiesDelete
        in: body
        description: An array of id or name values representing one or more cities to remove from this region.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the region.
        schema:
          type: array
          description: An array of id or name values representing one or more cities to remove from this region.  Use either this request body or the provided query args to select which cities you want to remove.  A remove call to this URI with no particular cities specified will cause ALL cities to be removed from the region.
          minItems: 0
          items:
            type: string
            description: The id or name of a city to remove from the region.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified cities were removed from the region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/cities/{city}:
    get:
      tags:
      - Locations
      summary: Get the specified city.
      description: Get the specified city and city info.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/cityParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified city with city info.
          schema:
            $ref: '#/definitions/RegionCityWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified city.
      description: Modify the specified city.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/cityParam'
      - name: regionCityPatch
        in: body
        description: An object containing one or more fields to modify on the specified city.  If you are modifying one of the sub-arrays within a city, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RegionCityPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was modified successfully.  The city is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified city.
      description: Replace the specified city.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/cityParam'
      - name: regionCityPut
        in: body
        description: A new city to replace the specified city.
        required: true
        schema:
          $ref: '#/definitions/RegionCityPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified city was replaced successfully.  The new city is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionCity'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified city from this region.
      description: Delete the specified city from this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/cityParam'
      responses:
        204:
          description: The specified city was removed from this region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/states:
    get:
      tags:
      - Locations
      summary: Get the collection of states/provinces/prefectures that belong to or are located in this region.
      description: Get the collection of states/provinces/prefectures that belong to or are located in this region.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of states/provinces/prefectures that belong to or are located in this region.
          schema:
            $ref: '#/definitions/RegionStates'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of states/provinces/prefectures that belong to or are located in this region.
      description: Submit a new set of states/provinces/prefectures that belong to or are located in this region.  States must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionStates
        in: body
        description: An array containing one or more new or existing states to add to the states collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing states to add to the states collection.
          minItems: 1
          items:
            $ref: '#/definitions/RegionStatePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were added to this region successfully.  The newly added state or states are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the region occurred - no new states were created.
          schema:
            type: array
            description: An array containing the newly added state or states including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        201:
          description: The specified state or states were created and/or added to this region successfully.  The newly added state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states were newly created, not just modifications of or references to existing states.'
          schema:
            type: array
            description: An array containing the newly added state or states including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified states/provinces/prefectures that belong to or are located in this region.
      description: Modify or add the specified states/provinces/prefectures that belong to or are located in this region.  Specify the state or states to be modified/added using state id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionStatesPatch
        in: body
        description: An array containing one or more partial state objects specified by id or name along with the fields you want to modify and their new values.  If you specify any states that do not exist already, they will be created.  If you specify any states that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial state objects specified by id or name along with the fields you want to modify and their new values.  If you specify any states that do not exist already, they will be created.  If you specify any states that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/RegionStatePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were modified and/or added successfully.  The modified/added state or states are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the region occurred - no new states were created.
          schema:
            type: array
            description: Array containing the state or states that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        201:
          description: The specified state or states were modified/created and/or added to the region successfully.  The modified/created/added state or states are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states were newly created, not just modifications of or references to existing states.
          schema:
            type: array
            description: An array containing the state or states that were modified/created and added to the region successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified states/provinces/prefectures that belong to or are located in this region.  Add them to this subcollection in the region if they were not already here.
      description: Replace/create the specified states/provinces/prefectures that belong to or are located in this region.  Specify states to be replaced by id or name.  Add them to this subcollection in the region if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionStatesPut
        in: body
        description: An array containing one or more states specified by id or name.  If you specify a state that exists already, the state will be replaced.  If you specify a state that does not exist, the state will be created.  Either way, if the state is not associated with this region already (in this collection), the state will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more states specified by id or name.  If you specify a state that exists already, the state will be replaced.  If you specify a state that does not exist, the state will be created.  Either way, if the state is not associated with this region already (in this collection), the state will be added.
          minItems: 1
          items:
            $ref: '#/definitions/RegionStatePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state or states were replaced.  They were added to this region if they were not already associated.  The replaced state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned states are replacements - not brand new states.
          schema:
            type: array
            description: An array containing the state or states that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        201:
          description: The specified state or states were replaced and/or created successfully.  They were added to this region if they were not already associated.  The replaced/created state or states are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the states are brand new and did not replace any existing states.
          schema:
            type: array
            description: An array containing the state or states that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified states/provinces/prefectures that belong to or are located in this region.
      description: Remove the specified states/provinces/prefectures that belong to or are located in this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionStatesDelete
        in: body
        description: An array of id or name values representing one or more states to remove from this region.  Use either this request body or the provided query args to select which states you want to remove.  A remove call to this URI with no particular states specified will cause ALL states to be removed from the region.
        schema:
          type: array
          description: An array of id or name values representing one or more states to remove from this region.  Use either this request body or the provided query args to select which states you want to remove.  A remove call to this URI with no particular states specified will cause ALL states to be removed from the region.
          minItems: 0
          items:
            type: string
            description: The id or name of a state to remove from the region.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified states were removed from the region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/states/{state}:
    get:
      tags:
      - Locations
      summary: Get the specified state.
      description: Get the specified state and state info.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/stateParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified state with state info.
          schema:
            $ref: '#/definitions/RegionStateWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified state.
      description: Modify the specified state.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/stateParam'
      - name: regionStatePatch
        in: body
        description: An object containing one or more fields to modify on the specified state.  If you are modifying one of the sub-arrays within a state, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RegionStatePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was modified successfully.  The state is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified state.
      description: Replace the specified state.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/stateParam'
      - name: regionStatePut
        in: body
        description: A new state to replace the specified state.
        required: true
        schema:
          $ref: '#/definitions/RegionStatePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified state was replaced successfully.  The new state is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionState'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified state from this region.
      description: Delete the specified state from this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/stateParam'
      responses:
        204:
          description: The specified state was removed from this region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/countries:
    get:
      tags:
      - Locations
      summary: Get the collection of countries that belong to or are located in this region.
      description: Get the collection of countries that belong to or are located in this region.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of countries that belong to or are located in this region.
          schema:
            $ref: '#/definitions/RegionCountries'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of countries that belong to or are located in this region.
      description: Submit a new set of countries that belong to or are located in this region.  Countries must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCountries
        in: body
        description: An array containing one or more new or existing countries to add to the countries collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing countries to add to the countries collection.
          minItems: 1
          items:
            $ref: '#/definitions/RegionCountryPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country or countries were added to this region successfully.  The newly added country or countries are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the region occurred - no new countries were created.
          schema:
            type: array
            description: An array containing the newly added country or countries including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        201:
          description: The specified country or countries were created and/or added to this region successfully.  The newly added country or countries are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the countries were newly created, not just modifications of or references to existing countries.'
          schema:
            type: array
            description: An array containing the newly added country or countries including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified countries that belong to or are located in this region.
      description: Modify or add the specified countries that belong to or are located in this region.  Specify the country or countries to be modified/added using country id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCountriesPatch
        in: body
        description: An array containing one or more partial country objects specified by id or name along with the fields you want to modify and their new values.  If you specify any countries that do not exist already, they will be created.  If you specify any countries that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial country objects specified by id or name along with the fields you want to modify and their new values.  If you specify any countries that do not exist already, they will be created.  If you specify any countries that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/RegionCountryPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country or countries were modified and/or added successfully.  The modified/added country or countries are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the region occurred - no new countries were created.
          schema:
            type: array
            description: Array containing the country or countries that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        201:
          description: The specified country or countries were modified/created and/or added to the region successfully.  The modified/created/added country or countries are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the countries were newly created, not just modifications of or references to existing countries.
          schema:
            type: array
            description: An array containing the country or countries that were modified/created and added to the region successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified countries that belong to or are located in this region.  Add them to this subcollection in the region if they were not already here.
      description: Replace/create the specified countries that belong to or are located in this region.  Specify countries to be replaced by id or name.  Add them to this subcollection in the region if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCountriesPut
        in: body
        description: An array containing one or more countries specified by id or name.  If you specify a country that exists already, the country will be replaced.  If you specify a country that does not exist, the country will be created.  Either way, if the country is not associated with this region already (in this collection), the country will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more countries specified by id or name.  If you specify a country that exists already, the country will be replaced.  If you specify a country that does not exist, the country will be created.  Either way, if the country is not associated with this region already (in this collection), the country will be added.
          minItems: 1
          items:
            $ref: '#/definitions/RegionCountryPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country or countries were replaced.  They were added to this region if they were not already associated.  The replaced country or countries are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned countries are replacements - not brand new countries.
          schema:
            type: array
            description: An array containing the country or countries that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        201:
          description: The specified country or countries were replaced and/or created successfully.  They were added to this region if they were not already associated.  The replaced/created country or countries are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the countries are brand new and did not replace any existing countries.
          schema:
            type: array
            description: An array containing the country or countries that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionCountry'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified countries that belong to or are located in this region.
      description: Remove the specified countries that belong to or are located in this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionCountriesDelete
        in: body
        description: An array of id or name values representing one or more countries to remove from this region.  Use either this request body or the provided query args to select which countries you want to remove.  A remove call to this URI with no particular countries specified will cause ALL countries to be removed from the region.
        schema:
          type: array
          description: An array of id or name values representing one or more countries to remove from this region.  Use either this request body or the provided query args to select which countries you want to remove.  A remove call to this URI with no particular countries specified will cause ALL countries to be removed from the region.
          minItems: 0
          items:
            type: string
            description: The id or name of a country to remove from the region.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified countries were removed from the region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/countries/{country}:
    get:
      tags:
      - Locations
      summary: Get the specified country.
      description: Get the specified country and country info.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/countryParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified country with country info.
          schema:
            $ref: '#/definitions/RegionCountryWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified country.
      description: Modify the specified country.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/countryParam'
      - name: regionCountryPatch
        in: body
        description: An object containing one or more fields to modify on the specified country.  If you are modifying one of the sub-arrays within a country, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RegionCountryPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country was modified successfully.  The country is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionCountry'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified country.
      description: Replace the specified country.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/countryParam'
      - name: regionCountryPut
        in: body
        description: A new country to replace the specified country.
        required: true
        schema:
          $ref: '#/definitions/RegionCountryPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified country was replaced successfully.  The new country is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionCountry'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified country from this region.
      description: Delete the specified country from this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/countryParam'
      responses:
        204:
          description: The specified country was removed from this region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/regions:
    get:
      tags:
      - Locations
      summary: Get the collection of other regions that belong to or are located in this region.
      description: Get the collection of other regions that belong to or are located in this region.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of other regions that belong to or are located in this region.
          schema:
            $ref: '#/definitions/RegionRegions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Locations
      summary: Submit a new set of other regions that belong to or are located in this region.
      description: Submit a new set of other regions that belong to or are located in this region.  Regions must be submitted in an array, even if there is only one.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionRegions
        in: body
        description: An array containing one or more new or existing regions to add to the regions collection.
        required: true
        schema:
          type: array
          description: An array containing one or more new or existing regions to add to the regions collection.
          minItems: 1
          items:
            $ref: '#/definitions/RegionRegionPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were added to this region successfully.  The newly added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only additions to the region occurred - no new regions were created.
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        201:
          description: The specified region or regions were created and/or added to this region successfully.  The newly added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.'
          schema:
            type: array
            description: An array containing the newly added region or regions including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify or add the specified other regions that belong to or are located in this region.
      description: Modify or add the specified other regions that belong to or are located in this region.  Specify the region or regions to be modified/added using region id or name.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionRegionsPatch
        in: body
        description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more partial region objects specified by id or name along with the fields you want to modify and their new values.  If you specify any regions that do not exist already, they will be created.  If you specify any regions that are not associated with this region already, they will be added.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          items:
            $ref: '#/definitions/RegionRegionPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were modified and/or added successfully.  The modified/added region or regions are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that only modifications or additions to the region occurred - no new regions were created.
          schema:
            type: array
            description: Array containing the region or regions that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        201:
          description: The specified region or regions were modified/created and/or added to the region successfully.  The modified/created/added region or regions are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions were newly created, not just modifications of or references to existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were modified/created and added to the region successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace/create the specified other regions that belong to or are located in this region.  Add them to this subcollection in the region if they were not already here.
      description: Replace/create the specified other regions that belong to or are located in this region.  Specify regions to be replaced by id or name.  Add them to this subcollection in the region if they were not already here.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionRegionsPut
        in: body
        description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this region already (in this collection), the region will be added.
        required: true
        schema:
          type: array
          description: An array containing one or more regions specified by id or name.  If you specify a region that exists already, the region will be replaced.  If you specify a region that does not exist, the region will be created.  Either way, if the region is not associated with this region already (in this collection), the region will be added.
          minItems: 1
          items:
            $ref: '#/definitions/RegionRegionPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region or regions were replaced.  They were added to this region if they were not already associated.  The replaced region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 "OK" response code specifically indicates that all of the returned regions are replacements - not brand new regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced successfully.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        201:
          description: The specified region or regions were replaced and/or created successfully.  They were added to this region if they were not already associated.  The replaced/created region or regions are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 "Created" response code specifically indicates that one or more of the regions are brand new and did not replace any existing regions.
          schema:
            type: array
            description: An array containing the region or regions that were replaced or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/RegionRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified other regions that belong to or are located in this region.
      description: Remove the specified other regions that belong to or are located in this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - name: regionRegionsDelete
        in: body
        description: An array of id or name values representing one or more regions to remove from this region.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the region.
        schema:
          type: array
          description: An array of id or name values representing one or more regions to remove from this region.  Use either this request body or the provided query args to select which regions you want to remove.  A remove call to this URI with no particular regions specified will cause ALL regions to be removed from the region.
          minItems: 0
          items:
            type: string
            description: The id or name of a region to remove from the region.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified regions were removed from the region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /locations/regions/{region}/regions/{sub-region}:
    get:
      tags:
      - Locations
      summary: Get the specified region.
      description: Get the specified region and region info.
      security: []
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/subRegionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified region with region info.
          schema:
            $ref: '#/definitions/RegionRegionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Locations
      summary: Modify the specified region.
      description: Modify the specified region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/subRegionParam'
      - name: regionRegionPatch
        in: body
        description: An object containing one or more fields to modify on the specified region.  If you are modifying one of the sub-arrays within a region, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/RegionRegionPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was modified successfully.  The region is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Locations
      summary: Replace the specified region.
      description: Replace the specified region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/subRegionParam'
      - name: regionRegionPut
        in: body
        description: A new region to replace the specified region.
        required: true
        schema:
          $ref: '#/definitions/RegionRegionPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified region was replaced successfully.  The new region is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/RegionRegion'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Locations
      summary: Remove the specified region from this region.
      description: Delete the specified region from this region.
      parameters:
      - $ref: '#/parameters/regionParam'
      - $ref: '#/parameters/subRegionParam'
      responses:
        204:
          description: The specified region was removed from this region successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits:
    get:
      tags:
      - Edit History
      summary: Get the collection of edits.
      description: Get the collection of edit transactions.  An edit is one successful  HTTP POST, PATCH, PUT, or DELETE call performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of edit transactions.  An edit is one successful  HTTP POST, PATCH, PUT, or DELETE call performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
          schema:
            $ref: '#/definitions/Edits'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified edit or edits.
      description: Delete the specified edit or edits.
      parameters:
      - name: editsDelete
        in: body
        description: 'An array of id values representing one or more edits to delete.  Use either this request body or the provided query args to select which edits you want to delete.  WARNING: A DELETE call to this URI with no particular edits specified will cause ALL edits to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id values representing one or more edits to delete.  Use either this request body or the provided query args to select which edits you want to delete.  WARNING: A DELETE call to this URI with no particular edits specified will cause ALL edits to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id of a edit to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified edits were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits/{edit}:
    get:
      tags:
      - Edit History
      summary: Get the specified edit.
      description: Get the specified edit and edit info.
      security: []
      parameters:
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified edit with edit info.
          schema:
            $ref: '#/definitions/EditWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified edit.
      description: Delete the specified edit.
      parameters:
      - $ref: '#/parameters/editParam'
      responses:
        204:
          description: The specified edit was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits/{edit}/revisions:
    get:
      tags:
      - Edit History
      summary: Get the collection of revisions associated with this edit.
      description: Get the collection of revisions associated with this edit.
      security: []
      parameters:
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of revisions associated with this edit.
          schema:
            $ref: '#/definitions/EditRevisions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits/{edit}/revisions/{revision}:
    get:
      tags:
      - Edit History
      summary: Get the specified revision.
      description: Get the specified revision and revision info.
      security: []
      parameters:
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified revision with revision info.
          schema:
            $ref: '#/definitions/EditRevisionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits/{edit}/annotations:
    get:
      tags:
      - Edit History
      summary: Get the collection of annotations associated with this edit.
      description: Get the collection of annotations associated with this edit.
      security: []
      parameters:
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of annotations associated with this edit.
          schema:
            $ref: '#/definitions/EditAnnotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/edits/{edit}/annotations/{annotation}:
    get:
      tags:
      - Edit History
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/EditAnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors:
    get:
      tags:
      - Edit History
      summary: Get the collection of editors.
      description: Get the collection of editors.  An editor is an anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.  Editor records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of editors.  An editor is an anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.  Editor records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
          schema:
            $ref: '#/definitions/Editors'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified editor or editors.
      description: Delete the specified editor or editors.
      parameters:
      - name: editorsDelete
        in: body
        description: 'An array of id or name values representing one or more editors to delete.  Use either this request body or the provided query args to select which editors you want to delete.  WARNING: A DELETE call to this URI with no particular editors specified will cause ALL editors to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or name values representing one or more editors to delete.  Use either this request body or the provided query args to select which editors you want to delete.  WARNING: A DELETE call to this URI with no particular editors specified will cause ALL editors to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or name of a editor to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified editors were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}:
    get:
      tags:
      - Edit History
      summary: Get the specified editor.
      description: Get the specified editor and editor info.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified editor with editor info.
          schema:
            $ref: '#/definitions/EditorWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified editor.
      description: Delete the specified editor.
      parameters:
      - $ref: '#/parameters/editorParam'
      responses:
        204:
          description: The specified editor was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/edits:
    get:
      tags:
      - Edit History
      summary: Get the collection of edits associated with this editor.
      description: Get the collection of edits associated with this editor.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of edits associated with this editor.
          schema:
            $ref: '#/definitions/EditorEdits'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/edits/{edit}:
    get:
      tags:
      - Edit History
      summary: Get the specified edit.
      description: Get the specified edit and edit info.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified edit with edit info.
          schema:
            $ref: '#/definitions/EditorEditWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/revisions:
    get:
      tags:
      - Edit History
      summary: Get the collection of revisions associated with this editor.
      description: Get the collection of revisions associated with this editor.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of revisions associated with this editor.
          schema:
            $ref: '#/definitions/EditorRevisions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/revisions/{revision}:
    get:
      tags:
      - Edit History
      summary: Get the specified revision.
      description: Get the specified revision and revision info.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified revision with revision info.
          schema:
            $ref: '#/definitions/EditorRevisionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/annotations:
    get:
      tags:
      - Edit History
      summary: Get the collection of annotations associated with this editor.
      description: Get the collection of annotations associated with this editor.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of annotations associated with this editor.
          schema:
            $ref: '#/definitions/EditorAnnotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/annotations/{annotation}:
    get:
      tags:
      - Edit History
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/EditorAnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/sessions:
    get:
      tags:
      - Edit History
      summary: Get the collection of sessions associated with this editor.
      description: Get the collection of sessions associated with this editor.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of sessions associated with this editor.
          schema:
            $ref: '#/definitions/EditorSessions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/editors/{editor}/sessions/{session}:
    get:
      tags:
      - Edit History
      summary: Get the specified session.
      description: Get the specified session and session info.
      security: []
      parameters:
      - $ref: '#/parameters/editorParam'
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified session with session info.
          schema:
            $ref: '#/definitions/EditorSessionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/revisions:
    get:
      tags:
      - Edit History
      summary: Get the collection of revisions.
      description: Get the collection of revisions.  A revision is a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of revisions.  A revision is a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
          schema:
            $ref: '#/definitions/Revisions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified revision or revisions.
      description: Delete the specified revision or revisions.
      parameters:
      - name: revisionsDelete
        in: body
        description: 'An array of id values representing one or more revisions to delete.  Use either this request body or the provided query args to select which revisions you want to delete.  WARNING: A DELETE call to this URI with no particular revisions specified will cause ALL revisions to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id values representing one or more revisions to delete.  Use either this request body or the provided query args to select which revisions you want to delete.  WARNING: A DELETE call to this URI with no particular revisions specified will cause ALL revisions to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id of a revision to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified revisions were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/revisions/{revision}:
    get:
      tags:
      - Edit History
      summary: Get the specified revision.
      description: Get the specified revision and revision info.
      security: []
      parameters:
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified revision with revision info.
          schema:
            $ref: '#/definitions/RevisionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified revision.
      description: Delete the specified revision.
      parameters:
      - $ref: '#/parameters/revisionParam'
      responses:
        204:
          description: The specified revision was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/revisions/{revision}/annotations:
    get:
      tags:
      - Edit History
      summary: Get the collection of annotations associated with this revision.
      description: Get the collection of annotations associated with this revision.
      security: []
      parameters:
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of annotations associated with this revision.
          schema:
            $ref: '#/definitions/RevisionAnnotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/revisions/{revision}/annotations/{annotation}:
    get:
      tags:
      - Edit History
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/RevisionAnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/annotations:
    get:
      tags:
      - Edit History
      summary: Get the collection of annotations with annotation info.
      description: Get the collection of annotations.  An annotation is an additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of annotations.  An annotation is an additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.
          schema:
            $ref: '#/definitions/Annotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Edit History
      summary: Submit a new annotation or annotations.
      description: Submit a new annotation or annotations to the annotations collection.  Annotations must be submitted in an array, even if there is only one.
      parameters:
      - name: annotations
        in: body
        description: An array containing one or more annotations to add to the annotations collection.
        required: true
        schema:
          type: array
          description: An array containing one or more annotations to add to the annotations collection.
          minItems: 1
          items:
            $ref: '#/definitions/AnnotationPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified annotation or annotations were added successfully.  The newly added annotation or annotations are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added annotation or annotations including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Annotation'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Edit History
      summary: Modify or create the specified annotation or annotations.
      description: Modify or create the specified annotation or annotations.  Specify an existing annotation or annotations to be modified using annotation id.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: annotationsPatch
        in: body
        description: An array containing one or more annotation modification objects, or new annotations.  Specify existing annotations to modify by id.  If you specify any annotations that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a annotation, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more annotation modification objects, or new annotations.  Specify existing annotations to modify by id.  If you specify any annotations that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a annotation, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/AnnotationPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified annotation or annotations were modified successfully.  The modified annotation or annotations are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new annotations were created.
          schema:
            type: array
            description: Array containing the annotation or annotations that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Annotation'
        201:
          description: The specified annotation or annotations were modified and/or created successfully.  The modified/created annotation or annotations are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the annotations were new additions to the collection, not just modifications of existing annotations.
          schema:
            type: array
            description: An array containing the annotation or annotations that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Annotation'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Edit History
      summary: Replace or create the specified annotation or annotations.
      description: Replace or create the specified annotation or annotations.  Specify existing annotations to replace by id.  If you specify any annotations that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: annotationsPut
        in: body
        description: An array containing one or more annotations specified by id.  If you specify a annotation that is not found in the collection already, the annotation will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more annotations specified by id.  If you specify a annotation that is not found in the collection already, the annotation will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/AnnotationPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified annotation or annotations were replaced successfully.  The replaced annotation or annotations are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new annotations were created.
          schema:
            type: array
            description: An array containing the annotation or annotations that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Annotation'
        201:
          description: The specified annotation or annotations were replaced and/or created successfully.  The replaced/created annotation or annotations are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the annotations were new additions to the collection, not just replacements of existing annotations.
          schema:
            type: array
            description: An array containing the annotation or annotations that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/Annotation'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified annotation or annotations.
      description: Delete the specified annotation or annotations.
      parameters:
      - name: annotationsDelete
        in: body
        description: 'An array of id values representing one or more annotations to delete.  Use either this request body or the provided query args to select which annotations you want to delete.  WARNING: A DELETE call to this URI with no particular annotations specified will cause ALL annotations to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id values representing one or more annotations to delete.  Use either this request body or the provided query args to select which annotations you want to delete.  WARNING: A DELETE call to this URI with no particular annotations specified will cause ALL annotations to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id of a annotation to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified annotations were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/annotations/{annotation}:
    get:
      tags:
      - Edit History
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/AnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Edit History
      summary: Modify the specified annotation.
      description: Modify the specified annotation.
      parameters:
      - $ref: '#/parameters/annotationParam'
      - name: annotationPatch
        in: body
        description: An object containing one or more fields to modify on the specified annotation.  If you are modifying one of the sub-arrays within a annotation, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/AnnotationPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified annotation was modified successfully.  The annotation is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Annotation'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Edit History
      summary: Replace the specified annotation.
      description: Replace the specified annotation.
      parameters:
      - $ref: '#/parameters/annotationParam'
      - name: annotationPut
        in: body
        description: A new annotation to replace the specified annotation.
        required: true
        schema:
          $ref: '#/definitions/AnnotationPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified annotation was replaced successfully.  The new annotation is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/Annotation'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified annotation.
      description: Delete the specified annotation.
      parameters:
      - $ref: '#/parameters/annotationParam'
      responses:
        204:
          description: The specified annotation was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/info-sources:
    get:
      tags:
      - Edit History
      summary: Get the collection of info sources with info source info.
      description: Get the collection of info sources, usually websites, for information about bands, people, or anything else found on Band Map.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of info sources, usually websites, for information about bands, people, or anything else found on Band Map.
          schema:
            $ref: '#/definitions/InfoSources'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Edit History
      summary: Submit a new info source or info sources.
      description: Submit a new info source or info sources to the info sources collection.  Info sources must be submitted in an array, even if there is only one.
      parameters:
      - name: infoSources
        in: body
        description: An array containing one or more info sources to add to the info sources collection.
        required: true
        schema:
          type: array
          description: An array containing one or more info sources to add to the info sources collection.
          minItems: 1
          items:
            $ref: '#/definitions/InfoSourcePost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified info source or info sources were added successfully.  The newly added info source or info sources are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added info source or info sources including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSource'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Edit History
      summary: Modify or create the specified info source or info sources.
      description: Modify or create the specified info source or info sources.  Specify an existing info source or info sources to be modified using info source id or url.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: infoSourcesPatch
        in: body
        description: An array containing one or more info source modification objects, or new info sources.  Specify existing info sources to modify by id or url.  If you specify any info sources that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a info source, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more info source modification objects, or new info sources.  Specify existing info sources to modify by id or url.  If you specify any info sources that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a info source, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/InfoSourcePatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified info source or info sources were modified successfully.  The modified info source or info sources are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new info sources were created.
          schema:
            type: array
            description: Array containing the info source or info sources that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSource'
        201:
          description: The specified info source or info sources were modified and/or created successfully.  The modified/created info source or info sources are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the info sources were new additions to the collection, not just modifications of existing info sources.
          schema:
            type: array
            description: An array containing the info source or info sources that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSource'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Edit History
      summary: Replace or create the specified info source or info sources.
      description: Replace or create the specified info source or info sources.  Specify existing info sources to replace by id or url.  If you specify any info sources that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: infoSourcesPut
        in: body
        description: An array containing one or more info sources specified by id or url.  If you specify a info source that is not found in the collection already, the info source will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more info sources specified by id or url.  If you specify a info source that is not found in the collection already, the info source will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/InfoSourcePut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified info source or info sources were replaced successfully.  The replaced info source or info sources are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new info sources were created.
          schema:
            type: array
            description: An array containing the info source or info sources that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSource'
        201:
          description: The specified info source or info sources were replaced and/or created successfully.  The replaced/created info source or info sources are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the info sources were new additions to the collection, not just replacements of existing info sources.
          schema:
            type: array
            description: An array containing the info source or info sources that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSource'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified info source or info sources.
      description: Delete the specified info source or info sources.
      parameters:
      - name: infoSourcesDelete
        in: body
        description: 'An array of id or url values representing one or more info sources to delete.  Use either this request body or the provided query args to select which info sources you want to delete.  WARNING: A DELETE call to this URI with no particular info sources specified will cause ALL info sources to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or url values representing one or more info sources to delete.  Use either this request body or the provided query args to select which info sources you want to delete.  WARNING: A DELETE call to this URI with no particular info sources specified will cause ALL info sources to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or url of a info source to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified info sources were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/info-sources/{info-source}:
    get:
      tags:
      - Edit History
      summary: Get the specified info source.
      description: Get the specified info source and info source info.
      security: []
      parameters:
      - $ref: '#/parameters/infoSourceParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified info source with info source info.
          schema:
            $ref: '#/definitions/InfoSourceWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Edit History
      summary: Modify the specified info source.
      description: Modify the specified info source.
      parameters:
      - $ref: '#/parameters/infoSourceParam'
      - name: infoSourcePatch
        in: body
        description: An object containing one or more fields to modify on the specified info source.  If you are modifying one of the sub-arrays within a info source, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/InfoSourcePatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified info source was modified successfully.  The info source is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/InfoSource'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Edit History
      summary: Replace the specified info source.
      description: Replace the specified info source.
      parameters:
      - $ref: '#/parameters/infoSourceParam'
      - name: infoSourcePut
        in: body
        description: A new info source to replace the specified info source.
        required: true
        schema:
          $ref: '#/definitions/InfoSourcePutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified info source was replaced successfully.  The new info source is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/InfoSource'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified info source.
      description: Delete the specified info source.
      parameters:
      - $ref: '#/parameters/infoSourceParam'
      responses:
        204:
          description: The specified info source was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/info-source-tags:
    get:
      tags:
      - Edit History
      summary: Get the collection of info source tags.
      description: Get the collection of info source tags describing categories or attributes of info sources.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of info source tags describing categories or attributes of info sources.
          schema:
            $ref: '#/definitions/InfoSourceTags'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Edit History
      summary: Submit a new info source tag or info source tags.
      description: Submit a new info source tag or info source tags to the info source tags collection.  Info source tags must be submitted in an array, even if there is only one.
      parameters:
      - name: infoSourceTags
        in: body
        description: An array containing one or more info source tags to add to the info source tags collection.
        required: true
        schema:
          type: array
          description: An array containing one or more info source tags to add to the info source tags collection.
          minItems: 1
          items:
            $ref: '#/definitions/InfoSourceTagPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified info source tag or info source tags were added successfully.  The newly added info source tag or info source tags are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added info source tags in canonical form.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/InfoSourceTag'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified info source tag or info source tags.
      description: Delete the specified info source tag or info source tags.
      parameters:
      - name: infoSourceTagsDelete
        in: body
        description: 'An array of tags to delete.  Use either this request body or the provided query args to select which tags you want to delete.  WARNING: A DELETE call to this URI with no particular tags specified will cause ALL tags to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of tags to delete.  Use either this request body or the provided query args to select which tags you want to delete.  WARNING: A DELETE call to this URI with no particular tags specified will cause ALL tags to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: A tag to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified info source tags were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /edit-history/info-source-tags/{info-source-tag}:
    get:
      tags:
      - Edit History
      summary: Get the specified info source tag.
      description: Get the specified info source tag.
      security: []
      parameters:
      - $ref: '#/parameters/infoSourceTagParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The tag, in canonical form.
          schema:
            $ref: '#/definitions/InfoSourceTag'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Edit History
      summary: Delete the specified info source tag.
      description: Delete the specified info source tag.
      parameters:
      - $ref: '#/parameters/infoSourceTagParam'
      responses:
        204:
          description: The specified info source tag was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users:
    get:
      tags:
      - Admin
      summary: Get the collection of registered Band Map users.
      description: Get the collection of registered Band Map users.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of registered Band Map users.
          schema:
            $ref: '#/definitions/Users'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    post:
      tags:
      - Admin
      summary: Submit a new user or users.
      description: Submit a new user or users to the users collection.  Users must be submitted in an array, even if there is only one.
      parameters:
      - name: users
        in: body
        description: An array containing one or more users to add to the users collection.
        required: true
        schema:
          type: array
          description: An array containing one or more users to add to the users collection.
          minItems: 1
          items:
            $ref: '#/definitions/UserPost'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        201:
          description: The specified user or users were added successfully.  The newly added user or users are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
          schema:
            type: array
            description: An array containing the newly added user or users including their assigned id and link fields.  The array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/User'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Admin
      summary: Modify or create the specified user or users.
      description: Modify or create the specified user or users.  Specify an existing user or users to be modified using user id or username.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: usersPatch
        in: body
        description: An array containing one or more user modification objects, or new users.  Specify existing users to modify by id or username.  If you specify any users that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a user, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          type: array
          description: An array containing one or more user modification objects, or new users.  Specify existing users to modify by id or username.  If you specify any users that are not found in the collection already, they will be created instead of modified.  If you are modifying one of the sub-arrays within a user, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
          minItems: 1
          items:
            $ref: '#/definitions/UserPatch'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified user or users were modified successfully.  The modified user or users are returned in the response body array.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only modifications occurred - no new users were created.
          schema:
            type: array
            description: Array containing the user or users that were modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/User'
        201:
          description: The specified user or users were modified and/or created successfully.  The modified/created user or users are returned in the response body array with their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the users were new additions to the collection, not just modifications of existing users.
          schema:
            type: array
            description: An array containing the user or users that were created or modified successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/User'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Admin
      summary: Replace or create the specified user or users.
      description: Replace or create the specified user or users.  Specify existing users to replace by id or username.  If you specify any users that are not found in the collection already, they will be created as new and will not replace anything.  The query args for this operation apply only to the returned array confirming your changes.
      parameters:
      - name: usersPut
        in: body
        description: An array containing one or more users specified by id or username.  If you specify a user that is not found in the collection already, the user will be created instead of replaced.
        required: true
        schema:
          type: array
          description: An array containing one or more users specified by id or username.  If you specify a user that is not found in the collection already, the user will be created instead of replaced.
          minItems: 1
          items:
            $ref: '#/definitions/UserPut'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified user or users were replaced successfully.  The replaced user or users are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 200 response code specifically indicates that only replacements occurred - no new users were created.
          schema:
            type: array
            description: An array containing the user or users that were replaced successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/User'
        201:
          description: The specified user or users were replaced and/or created successfully.  The replaced/created user or users are returned in the response body array in their new form.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.  A 201 response code specifically indicates that one or more of the users were new additions to the collection, not just replacements of existing users.
          schema:
            type: array
            description: An array containing the user or users that were replaced and/or created successfully, including their assigned id and link fields.  The response array can be filtered, sorted, and paged with query arg parameters as with the GET response, if desired.
            minItems: 1
            items:
              $ref: '#/definitions/User'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Admin
      summary: Delete the specified user or users.
      description: Delete the specified user or users.
      parameters:
      - name: usersDelete
        in: body
        description: 'An array of id or username values representing one or more users to delete.  Use either this request body or the provided query args to select which users you want to delete.  WARNING: A DELETE call to this URI with no particular users specified will cause ALL users to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id or username values representing one or more users to delete.  Use either this request body or the provided query args to select which users you want to delete.  WARNING: A DELETE call to this URI with no particular users specified will cause ALL users to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id or username of a user to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified users were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}:
    get:
      tags:
      - Admin
      summary: Get the specified user.
      description: Get the specified user and user info.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified user with user info.
          schema:
            $ref: '#/definitions/UserWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
      - Admin
      summary: Modify the specified user.
      description: Modify the specified user.
      parameters:
      - $ref: '#/parameters/userParam'
      - name: userPatch
        in: body
        description: An object containing one or more fields to modify on the specified user.  If you are modifying one of the sub-arrays within a user, you must specify an entire new array to replace the old one.  To instead add or remove items individually to/from the sub-array, POST or DELETE respectively to the nested sub-URL representing the array.
        required: true
        schema:
          $ref: '#/definitions/UserPatchOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified user was modified successfully.  The user is returned with all saved modifications in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
      - Admin
      summary: Replace the specified user.
      description: Replace the specified user.
      parameters:
      - $ref: '#/parameters/userParam'
      - name: userPut
        in: body
        description: A new user to replace the specified user.
        required: true
        schema:
          $ref: '#/definitions/UserPutOne'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The specified user was replaced successfully.  The new user is returned in the response body.  The response fields can be filtered if desired with the query arg parameters.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Admin
      summary: Delete the specified user.
      description: Delete the specified user.
      parameters:
      - $ref: '#/parameters/userParam'
      responses:
        204:
          description: The specified user was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/edits:
    get:
      tags:
      - Admin
      summary: Get the collection of the most recent 10000 edits to Band Map info made by this user.
      description: Get the collection of the most recent 10000 edits to Band Map info made by this user.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of the most recent 10000 edits to Band Map info made by this user.
          schema:
            $ref: '#/definitions/UserEdits'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/edits/{edit}:
    get:
      tags:
      - Admin
      summary: Get the specified edit.
      description: Get the specified edit and edit info.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified edit with edit info.
          schema:
            $ref: '#/definitions/UserEditWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/revisions:
    get:
      tags:
      - Admin
      summary: Get the collection of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
      description: Get the collection of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
          schema:
            $ref: '#/definitions/UserRevisions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/revisions/{revision}:
    get:
      tags:
      - Admin
      summary: Get the specified revision.
      description: Get the specified revision and revision info.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified revision with revision info.
          schema:
            $ref: '#/definitions/UserRevisionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/annotations:
    get:
      tags:
      - Admin
      summary: Get the collection of the most recent 10000 annotations to Band Map facts made by this user.
      description: Get the collection of the most recent 10000 annotations to Band Map facts made by this user.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of the most recent 10000 annotations to Band Map facts made by this user.
          schema:
            $ref: '#/definitions/UserAnnotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/annotations/{annotation}:
    get:
      tags:
      - Admin
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/UserAnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/sessions:
    get:
      tags:
      - Admin
      summary: Get the collection of the most recent 10000 sessions logged on the Band Map website by this user.
      description: Get the collection of the most recent 10000 sessions logged on the Band Map website by this user.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of the most recent 10000 sessions logged on the Band Map website by this user.
          schema:
            $ref: '#/definitions/UserSessions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /users/{user}/sessions/{session}:
    get:
      tags:
      - Admin
      summary: Get the specified session.
      description: Get the specified session and session info.
      security: []
      parameters:
      - $ref: '#/parameters/userParam'
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified session with session info.
          schema:
            $ref: '#/definitions/UserSessionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions:
    get:
      tags:
      - Admin
      summary: Get the collection of sessions with session info.
      description: Get the collection of Band Map website sessions.
      security: []
      parameters:
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of Band Map website sessions.
          schema:
            $ref: '#/definitions/Sessions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Admin
      summary: Delete the specified session or sessions.
      description: Delete the specified session or sessions.
      parameters:
      - name: sessionsDelete
        in: body
        description: 'An array of id values representing one or more sessions to delete.  Use either this request body or the provided query args to select which sessions you want to delete.  WARNING: A DELETE call to this URI with no particular sessions specified will cause ALL sessions to be deleted and the ENTIRE collection to be cleared.'
        schema:
          type: array
          description: 'An array of id values representing one or more sessions to delete.  Use either this request body or the provided query args to select which sessions you want to delete.  WARNING: A DELETE call to this URI with no particular sessions specified will cause ALL sessions to be deleted and the ENTIRE collection to be cleared.'
          minItems: 0
          items:
            type: string
            description: The id of a session to delete.
      - $ref: '#/parameters/targetsParam'
      - $ref: '#/parameters/filterInputParam'
      responses:
        204:
          description: The specified sessions were deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}:
    get:
      tags:
      - Admin
      summary: Get the specified session.
      description: Get the specified session and session info.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified session with session info.
          schema:
            $ref: '#/definitions/SessionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - Admin
      summary: Delete the specified session.
      description: Delete the specified session.
      parameters:
      - $ref: '#/parameters/sessionParam'
      responses:
        204:
          description: The specified session was deleted successfully.
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/edits:
    get:
      tags:
      - Admin
      summary: Get the collection of edits made during this session.
      description: Get the collection of edits made during this session.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of edits made during this session.
          schema:
            $ref: '#/definitions/SessionEdits'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/edits/{edit}:
    get:
      tags:
      - Admin
      summary: Get the specified edit.
      description: Get the specified edit and edit info.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/editParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified edit with edit info.
          schema:
            $ref: '#/definitions/SessionEditWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/revisions:
    get:
      tags:
      - Admin
      summary: Get the collection of revisions made during this session.
      description: Get the collection of revisions made during this session.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of revisions made during this session.
          schema:
            $ref: '#/definitions/SessionRevisions'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/revisions/{revision}:
    get:
      tags:
      - Admin
      summary: Get the specified revision.
      description: Get the specified revision and revision info.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/revisionParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified revision with revision info.
          schema:
            $ref: '#/definitions/SessionRevisionWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/annotations:
    get:
      tags:
      - Admin
      summary: Get the collection of annotations made during this session.
      description: Get the collection of annotations made during this session.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/limitParam'
      - $ref: '#/parameters/offsetParam'
      - $ref: '#/parameters/sortParam'
      - $ref: '#/parameters/filterParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: The collection of annotations made during this session.
          schema:
            $ref: '#/definitions/SessionAnnotations'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
  /sessions/{session}/annotations/{annotation}:
    get:
      tags:
      - Admin
      summary: Get the specified annotation.
      description: Get the specified annotation and annotation info.
      security: []
      parameters:
      - $ref: '#/parameters/sessionParam'
      - $ref: '#/parameters/annotationParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/noFieldsParam'
      responses:
        200:
          description: An object representing the specified annotation with annotation info.
          schema:
            $ref: '#/definitions/SessionAnnotationWithWarnings'
        default:
          description: Error object in case an unexpected error occurs.
          schema:
            $ref: '#/definitions/Errors'
parameters:
  limitParam:
    name: limit
    in: query
    type: integer
    description: The maximum number of objects to return at once.
    minimum: 0
    maximum: 10000000

  offsetParam:
    name: offset
    in: query
    type: integer
    description: Used to begin retrieving results from the middle of a collection, a zero-based offset from the start of the collection.
    minimum: 0 

  sortParam:
    name: sort
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of fields to sort returned objects on, where the first specified field will be the primary sort, second field will be the secondary sort, and so on.  Use <field>:asc or <field>:desc to specify ascending or descending sorts, ascending is default.
    minItems: 0
    maxItems: 1000
    items:
      type: string

  filterParam:
    name: filter
    in: query
    type: string
    description: A filter expression for filtering returned objects.  Works as described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering), and additionally allows a 'contains' or 'ct' operator for filtering on string field values.
  fieldsParam:
    name: fields
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of fields (attributes) of the objects or nested sub-objects returned at this resource.  Dot notation (like field.subfield) can be used to address nested sub-object fields.  Only the fields specified will be returned.
    minItems: 0
    maxItems: 1000
    items:
      type: string

  noFieldsParam:
    name: no-fields
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of fields (attributes) of the objects or nested sub-objects returned at this resource.  Dot notation (like field.subfield) can be used to address nested sub-object fields.  The fields specified will not be returned.
    minItems: 0
    maxItems: 1000
    items:
      type: string

  prettyParam:
    name: pretty
    in: query
    type: boolean
    description: 'If false, whitespace will not be included in JSON responses.  Default is true: JSON responses will be formatted with indentation and line breaks.'
    default: true

  helpParam:
    name: help
    in: query
    allowEmptyValue: true
    type: boolean
    description: Instead of the normal output, retrieve a human-readable, HTML formatted description of the resource.
    default: true

  docParam:
    name: doc
    in: query
    allowEmptyValue: true
    type: boolean
    description: Instead of the normal output, retrieve a human-readable, HTML formatted description of the resource.
    default: true

  schemaParam:
    name: schema
    in: query
    allowEmptyValue: true
    type: boolean
    description: Instead of the normal output, retrieve a machine-readable [JSON schema](http://json-schema.org/) describing the resource.
    default: true

  annotationsParam:
    name: annotations
    in: query
    allowEmptyValue: true
    type: boolean
    description: Include any existing editor annotations on all returned objects and nested sub-objects (citations for facts or additional relevant info).
    default: true

  idsParam:
    name: ids
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of IDs specifying the targets in this collection to operate on.
    minItems: 0
    maxItems: 10000000
    items:
      type: string

  namesParam:
    name: names
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of names specifying the targets in this collection to operate on.
    minItems: 0
    maxItems: 10000000
    items:
      type: string

  targetsParam:
    name: targets
    in: query
    type: array
    collectionFormat: csv
    description: A comma-delimited list of ids or names specifying the targets in this collection to operate on.
    minItems: 0
    maxItems: 10000000
    items:
      type: string

  filterInputParam:
    name: filter
    in: query
    type: string
    description: A filter expression for filtering target objects.  Works as described in the [Microsoft API Guidelines](https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering), and additionally allows a 'contains' or 'ct' operator for filtering on string field values.  The objects in this collection targeted by the filter will be operated on.
  connectionParam:
    name: connection
    in: path
    type: string
    description: 'A specification of the target connection.  In the URL, a connection can be specified in either of two ways: canonical id (like "123-456"), or name id (like "band a-band b").  The ordering of bands in either way does not matter (that is, "band a-band b" will address the same connection as "band b-band a").  If you are specifying bands by name, preserve any spaces between words in the name in the URL - they will be processed normally.'
    required: true

  stateParam:
    name: state
    in: path
    type: string
    description: The ID or name of the target state/province/prefecture (state names are typically abbreviated, like "WA" for "Washington").  If you are specifying by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true

  userParam:
    name: user
    in: path
    type: string
    description: The ID or username of the target user.
    required: true

  bandParam:
    name: band
    in: path
    type: string
    description: The id or name of the target band.  If you are specifying the band by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  personParam:
    name: person
    in: path
    type: string
    description: The id or name of the target person.  If you are specifying the person by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  roleParam:
    name: role
    in: path
    type: string
    description: The id or name of the target role.  If you are specifying the role by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  cityParam:
    name: city
    in: path
    type: string
    description: The id or name of the target city.  If you are specifying the city by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  connectedBandParam:
    name: connected-band
    in: path
    type: string
    description: The id or name of the target connected band.  If you are specifying the connected band by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  webLinkParam:
    name: web-link
    in: path
    type: string
    description: The url of the target web link.
    required: true
  regionParam:
    name: region
    in: path
    type: string
    description: The id or name of the target region.  If you are specifying the region by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  countryParam:
    name: country
    in: path
    type: string
    description: The id or name of the target country.  If you are specifying the country by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  subRegionParam:
    name: sub-region
    in: path
    type: string
    description: The id or name of the target region.  If you are specifying the region by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  editParam:
    name: edit
    in: path
    type: string
    description: The id of the target edit.
    required: true
  revisionParam:
    name: revision
    in: path
    type: string
    description: The id of the target revision.
    required: true
  annotationParam:
    name: annotation
    in: path
    type: string
    description: The id of the target annotation.
    required: true
  editorParam:
    name: editor
    in: path
    type: string
    description: The id or name of the target editor.  If you are specifying the editor by name, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  sessionParam:
    name: session
    in: path
    type: string
    description: The id of the target session.
    required: true
  infoSourceParam:
    name: info-source
    in: path
    type: string
    description: The id or url of the target info source.  If you are specifying the info source by url, preserve any spaces between words in the name in the URL - they will be processed normally.
    required: true
  infoSourceTagParam:
    name: info-source-tag
    in: path
    type: string
    description: The target info source tag.
    required: true
definitions:
  APIRootListing:
    properties:
      version:
        type: string
        description: "API version served from this root (example: '1.0')."
      description:
        type: string
        description: API description.
      resources:
        description: Listing of available resources.
        properties:
          bands:
            description: Object containing info about the bands resource.
            properties:
              link:
                type: string
                description: Link to the bands resource.
              description:
                type: string
                description: Description of the bands resource.
          people:
            description: Object containing info about the people resource.
            properties:
              link:
                type: string
                description: Link to the people resource.
              description:
                type: string
                description: Description of the people resource.
          roles:
            description: Object containing info about the roles resource.
            properties:
              link:
                type: string
                description: Link to the roles resource.
              description:
                type: string
                description: Description of the roles resource.
          connections:
            description: Object containing info about the connections resource.
            properties:
              link:
                type: string
                description: Link to the roles resource.
              description:
                type: string
                description: Description of the roles resource.
          locations:
            description: Object containing info about the locations resources.
            properties:
              link:
                type: string
                description: Link to the locations resources listing.
              description:
                type: string
                description: Description of the locations resources listing.
          admin:
            description: Object containing info about the admin resources.
            properties:
              link:
                type: string
                description: Link to the admin resources listing.
              description:
                type: string
                description: Description of the admin resources listing.

  Bands:
    description: The collection of bands with band info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this bands collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first band in the collection that is being returned in the bands array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of bands that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of bands in this collection, or if a 'filter' argument was given, the total number of bands after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      bands:
        type: array
        items:
          $ref: '#/definitions/Band'
      bandsCount:
        type: integer
        description: The number of bands actually returned in the bands array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Band:
    description: A band and its related band info.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this band.
        minLength: 1
        maxLength: 255
        example: Band Name
      clickCount:
        type: integer
        description: The number of times have people clicked on this band in the Band Map app.
        minimum: 0
        example: 123
      people:
        type: array
        description: An array containing the band members or other people associated with this band.
        minItems: 0
        uniqueItems: true
        items:
          description: A band member or other person associated with this band.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this person.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this person.
              example: https://www.seattlebandmap.com/api/people/123
            name:
              type: string
              description: The name of this person.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An array containing the roles this person has had in this band (like instruments played).
              minItems: 0
              uniqueItems: true
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                    type: integer
                    description: The unique, stable ID of this role.
                    minimum: 0
                    example: 123
                  link:
                    type: string
                    description: A stable, absolute URL linking to this role.
                    example: https://www.seattlebandmap.com/api/roles/123
                  name:
                    type: string
                    description: The name of this role.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '2020-04-20'
            rolesCount:
              type: integer
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
              minimum: 0
              example: 123
            activeDates:
              type: array
              description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      peopleCount:
        type: integer
        description: The total number of people in or associated with this band.  Should be equal to people.length.
        minimum: 0
        example: 123
      cities:
        type: array
        description: An array containing the city or cities this band has been based in, ordered by most recent to oldest.
        minItems: 0
        uniqueItems: true
        items:
          description: A city this band has been based in.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An array containing the active dates that this band was based in this city during.  This array will only be present if a values are known.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      citiesCount:
        type: integer
        description: The total number of cities this band has been based in.  Should be equal to cities.length.
        minimum: 0
        example: 123
      connectedBands:
        type: array
        description: An array containing the other bands this band is connected to.
        minItems: 0
        uniqueItems: true
        items:
          description: A band that this band is connected to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this connected band.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this connected band.
              example: https://www.seattlebandmap.com/api/bands/123
            name:
              type: string
              description: The name of this connected band.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      connectedBandsCount:
        type: integer
        description: The total number of other bands connected to this band.  Should be equal to connectedBands.length.
        minimum: 0
        example: 123
      webLinks:
        type: array
        description: An array of web links related to this band.
        minItems: 0
        uniqueItems: true
        items:
          description: A web link related to this band.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: A description of this web link.  This field will only be present if a value was entered.
              example: Band Name on Social Media Website
      webLinksCount:
        type: integer
        description: The total number of web links related to this band.  Should be equal to webLinks.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  This array will only be present if a values are known.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  BandWithWarnings:
    description: A band and its related band info.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this band.
        minLength: 1
        maxLength: 255
        example: Band Name
      clickCount:
        type: integer
        description: The number of times have people clicked on this band in the Band Map app.
        minimum: 0
        example: 123
      people:
        type: array
        description: An array containing the band members or other people associated with this band.
        minItems: 0
        uniqueItems: true
        items:
          description: A band member or other person associated with this band.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this person.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this person.
              example: https://www.seattlebandmap.com/api/people/123
            name:
              type: string
              description: The name of this person.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An array containing the roles this person has had in this band (like instruments played).
              minItems: 0
              uniqueItems: true
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                    type: integer
                    description: The unique, stable ID of this role.
                    minimum: 0
                    example: 123
                  link:
                    type: string
                    description: A stable, absolute URL linking to this role.
                    example: https://www.seattlebandmap.com/api/roles/123
                  name:
                    type: string
                    description: The name of this role.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '2020-04-20'
            rolesCount:
              type: integer
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
              minimum: 0
              example: 123
            activeDates:
              type: array
              description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      peopleCount:
        type: integer
        description: The total number of people in or associated with this band.  Should be equal to people.length.
        minimum: 0
        example: 123
      cities:
        type: array
        description: An array containing the city or cities this band has been based in, ordered by most recent to oldest.
        minItems: 0
        uniqueItems: true
        items:
          description: A city this band has been based in.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An array containing the active dates that this band was based in this city during.  This array will only be present if a values are known.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      citiesCount:
        type: integer
        description: The total number of cities this band has been based in.  Should be equal to cities.length.
        minimum: 0
        example: 123
      connectedBands:
        type: array
        description: An array containing the other bands this band is connected to.
        minItems: 0
        uniqueItems: true
        items:
          description: A band that this band is connected to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this connected band.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this connected band.
              example: https://www.seattlebandmap.com/api/bands/123
            name:
              type: string
              description: The name of this connected band.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      connectedBandsCount:
        type: integer
        description: The total number of other bands connected to this band.  Should be equal to connectedBands.length.
        minimum: 0
        example: 123
      webLinks:
        type: array
        description: An array of web links related to this band.
        minItems: 0
        uniqueItems: true
        items:
          description: A web link related to this band.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: A description of this web link.  This field will only be present if a value was entered.
              example: Band Name on Social Media Website
      webLinksCount:
        type: integer
        description: The total number of web links related to this band.  Should be equal to webLinks.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  This array will only be present if a values are known.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPost:
    description: A new band to create.
    required:
    - name
    properties:
      name:
        type: string
        description: The name of the new band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Band Name
      people:
        type: array
        description: An optional array containing the band members or other people associated with this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing person to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this person.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      cities:
        type: array
        description: An optional array containing the city or cities this band has been based in, ordered by most recent to oldest.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An optional array containing the active dates that this band was based in this city during.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      connectedBands:
        type: array
        description: An optional array containing the other bands this band is connected to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing connected band to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      webLinks:
        type: array
        description: An optional array of web links related to this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: For new web links only.  An optional description of this web link.
              example: Band Name on Social Media Website
      activeDates:
        type: array
        description: An optional array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPatch:
    description: An existing band to modify, or a new band to create.  Specify an existing band by id or name.  If no id is specified, and no band exists with the specified name, a new band will be created.  The name of an existing band can be changed by specifying the band by id, along with the new name.
    properties:
      id:
        type: integer
        description: The ID of an existing band to modify.
        minimum: 0
      name:
        type: string
        description: The name of the band to modify or create.  Or if an existing band was specified by id, an optional new name for the existing band.
        minLength: 1
        maxLength: 255
        example: Band Name
      people:
        type: array
        description: An optional array containing the band members or other people associated with this band.  If specified for an existing band, this array will completely replace the existing people with the new people for this band.  To instead add or remove people individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing person to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing person, this array will completely replace the existing roles with the new roles for this person.  To instead add or remove roles individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this person.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      cities:
        type: array
        description: An optional array containing the city or cities this band has been based in, ordered by most recent to oldest.  If specified for an existing band, this array will completely replace the existing cities with the new cities for this band.  To instead add or remove cities individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An optional array containing the active dates that this band was based in this city during.  If specified for an existing city, this array will completely replace the existing active dates with the new active dates for this city.  To instead add or remove active dates individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      connectedBands:
        type: array
        description: An optional array containing the other bands this band is connected to.  If specified for an existing band, this array will completely replace the existing connected bands with the new connected bands for this band.  To instead add or remove connected bands individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing connected band to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      webLinks:
        type: array
        description: An optional array of web links related to this band.  If specified for an existing band, this array will completely replace the existing web links with the new web links for this band.  To instead add or remove web links individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: An optional description of this web link.
              example: Band Name on Social Media Website
      activeDates:
        type: array
        description: An optional array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  If specified for an existing band, this array will completely replace the existing active dates with the new active dates for this band.  To instead add or remove active dates individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPut:
    description: 'An existing band to replace, or a new band to create.  BEWARE: When replacing an existing band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing band by id or name.'
    required:
    - name
    properties:
      id:
        type: integer
        description: The ID of an existing band to replace.
        minimum: 0
      name:
        type: string
        description: The name of the band to replace or create.  Or if an existing band was specified by id, the new name for the band that will replace the original.
        minLength: 1
        maxLength: 255
        example: Band Name
      people:
        type: array
        description: An optional array containing the band members or other people associated with this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing person to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this person.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      cities:
        type: array
        description: An optional array containing the city or cities this band has been based in, ordered by most recent to oldest.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An optional array containing the active dates that this band was based in this city during.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      connectedBands:
        type: array
        description: An optional array containing the other bands this band is connected to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing connected band to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      webLinks:
        type: array
        description: An optional array of web links related to this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: For new web links only.  An optional description of this web link.
              example: Band Name on Social Media Website
      activeDates:
        type: array
        description: An optional array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  If specified for an existing band, this array will completely replace the existing active dates with the new active dates for this band.  To instead add or remove active dates individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPatchOne:
    description: The new fields on the existing band to modify.
    properties:
      name:
        type: string
        description: An optional new name for this band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Band Name
      people:
        type: array
        description: An optional array containing the band members or other people associated with this band.  If specified, this array will completely replace the existing people with the new people for this band.  To instead add or remove people individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing person to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing person, this array will completely replace the existing roles with the new roles for this person.  To instead add or remove roles individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this person.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      cities:
        type: array
        description: An optional array containing the city or cities this band has been based in, ordered by most recent to oldest.  If specified, this array will completely replace the existing cities with the new cities for this band.  To instead add or remove cities individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An optional array containing the active dates that this band was based in this city during.  If specified, this array will completely replace the existing active dates with the new active dates for this city.  To instead add or remove active dates individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      connectedBands:
        type: array
        description: An optional array containing the other bands this band is connected to.  If specified, this array will completely replace the existing connected bands with the new connected bands for this band.  To instead add or remove connected bands individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing connected band to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      webLinks:
        type: array
        description: An optional array of web links related to this band.  If specified, this array will completely replace the existing web links with the new web links for this band.  To instead add or remove web links individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: An optional description of this web link.
              example: Band Name on Social Media Website
      activeDates:
        type: array
        description: An optional array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.  If specified, this array will completely replace the existing active dates with the new active dates for this band.  To instead add or remove active dates individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPutOne:
    description: 'A new band to replace the previous one.  BEWARE: When replacing an existing band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    required:
    - name
    properties:
      name:
        type: string
        description: The name of the new band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Band Name
      people:
        type: array
        description: An optional array containing the band members or other people associated with this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing person to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
              minLength: 1
              maxLength: 255
              example: Person Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this person.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      cities:
        type: array
        description: An optional array containing the city or cities this band has been based in, ordered by most recent to oldest.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of this city, formatted like "Seattle, WA, USA".
              minLength: 1
              example: Seattle, WA, USA
            activeDates:
              type: array
              description: An optional array containing the active dates that this band was based in this city during.
              items:
                description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      connectedBands:
        type: array
        description: An optional array containing the other bands this band is connected to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing connected band to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
              minLength: 1
              example: Connected Band Name
            description:
              type: string
              description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
              example: 'Shared members: Member One, Member Two.'
      webLinks:
        type: array
        description: An optional array of web links related to this band.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
          properties:
            url:
              type: string
              description: The URL of this band web link.
              example: https://www.socialmediawebsite.com/bands/the-band
            description:
              type: string
              description: For new web links only.  An optional description of this web link.
              example: Band Name on Social Media Website
      activeDates:
        type: array
        description: An optional array containing the dates this band was active.  If per-role, per-person, or per-city active dates are/were given, they will be automatically reflected in this array as well, and do not need to be entered in both places.
        items:
          description: Dates that this band was active.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPeople:
    description: The collection of band members or other people associated with this band.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this people collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands/123/people?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first person in the collection that is being returned in the people array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of people that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of people in this collection, or if a 'filter' argument was given, the total number of people after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      people:
        type: array
        items:
          $ref: '#/definitions/BandPerson'
      peopleCount:
        type: integer
        description: The number of people actually returned in the people array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/people?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/people?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/people?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/people?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPerson:
    description: A band member or other person associated with this band.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this person.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this person.
        example: https://www.seattlebandmap.com/api/people/123
      name:
        type: string
        description: The name of this person.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An array containing the roles this person has had in this band (like instruments played).
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has had in this band (like an instrument played).
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      rolesCount:
        type: integer
        description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  BandPersonWithWarnings:
    description: A band member or other person associated with this band.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this person.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this person.
        example: https://www.seattlebandmap.com/api/people/123
      name:
        type: string
        description: The name of this person.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An array containing the roles this person has had in this band (like instruments played).
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has had in this band (like an instrument played).
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      rolesCount:
        type: integer
        description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonPost:
    description: An existing person to add to this band, or a new person to create and add.  Specify an existing person by id or name.  If no id is specified and no person with the specified name exists, a new person will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing person to add to this band.
        minimum: 0
      name:
        type: string
        description: The name of an existing person to add to this band, or the name of a new person to create and add.  Names for new people must be unique.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  BandPersonPatch:
    description: An existing person to modify, or a new person to create.  Specify an existing person by id or name.  If no id is specified, and no person exists with the specified name, a new person will be created.  The name of an existing person can be changed by specifying the person by id, along with the new name.  In any case, if the person is not already associated with this band, the person will be added to the band.
    properties:
      id:
        type: integer
        description: The ID of an existing person to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing person to add to this band or modify, or the name of a new person to create and add.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing person, this array will completely replace the existing roles with the new roles for this person.  To instead add or remove roles individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  BandPersonPut:
    description: 'An existing person to replace, or a new person to create.  BEWARE: When replacing an existing person, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing person by id or name.  If no id is specified, and no person exists with the specified name, a new person will be created.  In any case, the created or replaced person will be added to this band if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing person to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing person to replace, the name of a new person to create, or if an existing person was specified by id, the new name for the replacement person.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  BandPersonPatchOne:
    description: The new fields on the existing person to modify.
    properties:
      name:
        type: string
        description: An optional new name for this person.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).  If specified, this array will completely replace the existing roles with the new roles for this person.  To instead add or remove roles individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.  If specified, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonPutOne:
    description: 'A new person to replace the previous one.  BEWARE: When replacing an existing person, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new person.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Person Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonRoles:
    description: The collection of roles this person has had in this band (like instruments played).
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this roles collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands/123/people/123/roles?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first role in the collection that is being returned in the roles array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of roles that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of roles in this collection, or if a 'filter' argument was given, the total number of roles after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      roles:
        type: array
        items:
          $ref: '#/definitions/BandPersonRole'
      rolesCount:
        type: integer
        description: The number of roles actually returned in the roles array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/people/123/roles?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/people/123/roles?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/people/123/roles?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/people/123/roles?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonRole:
    description: A role this person has had in this band (like an instrument played).
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  BandPersonRoleWithWarnings:
    description: A role this person has had in this band (like an instrument played).
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonRolePost:
    description: An existing role to add to this person, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing role to add to this person.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to add to this person, or the name of a new role to create and add.  Names for new roles must be unique.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPersonRolePatch:
    description: An existing role to modify, or a new role to create.  Specify an existing role by id or name.  If no id is specified, and no role exists with the specified name, a new role will be created.  The name of an existing role can be changed by specifying the role by id, along with the new name.  In any case, if the role is not already associated with this person, the role will be added to the person.
    properties:
      id:
        type: integer
        description: The ID of an existing role to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to add to this person or modify, or the name of a new role to create and add.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPersonRolePut:
    description: 'An existing role to replace, or a new role to create.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing role by id or name.  If no id is specified, and no role exists with the specified name, a new role will be created.  In any case, the created or replaced role will be added to this person if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing role to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to replace, the name of a new role to create, or if an existing role was specified by id, the new name for the replacement role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandPersonRolePatchOne:
    description: The new fields on the existing role to modify.
    properties:
      name:
        type: string
        description: An optional new name for this role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.  If specified, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandPersonRolePutOne:
    description: 'A new role to replace the previous one.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandCities:
    description: The collection of city or cities this band has been based in, ordered by most recent to oldest.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this cities collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands/123/cities?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first city in the collection that is being returned in the cities array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of cities that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of cities in this collection, or if a 'filter' argument was given, the total number of cities after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      cities:
        type: array
        items:
          $ref: '#/definitions/BandCity'
      citiesCount:
        type: integer
        description: The number of cities actually returned in the cities array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/cities?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/cities?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/cities?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/cities?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandCity:
    description: A city this band has been based in.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An array containing the active dates that this band was based in this city during.  This array will only be present if a values are known.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  BandCityWithWarnings:
    description: A city this band has been based in.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An array containing the active dates that this band was based in this city during.  This array will only be present if a values are known.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandCityPost:
    description: An existing city to add to this band, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing city to add to this band.
        minimum: 0
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An optional array containing the active dates that this band was based in this city during.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandCityPatch:
    description: An existing city to modify, or a new city to create.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  The name of an existing city can be changed by specifying the city by id, along with the new name.  In any case, if the city is not already associated with this band, the city will be added to the band.
    properties:
      id:
        type: integer
        description: The ID of an existing city to modify.
        minimum: 0
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An optional array containing the active dates that this band was based in this city during.  If specified for an existing city, this array will completely replace the existing active dates with the new active dates for this city.  To instead add or remove active dates individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandCityPut:
    description: 'An existing city to replace, or a new city to create.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  In any case, the created or replaced city will be added to this band if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing city to replace.
        minimum: 0
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An optional array containing the active dates that this band was based in this city during.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  BandCityPatchOne:
    description: The new fields on the existing city to modify.
    properties:
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An optional array containing the active dates that this band was based in this city during.  If specified, this array will completely replace the existing active dates with the new active dates for this city.  To instead add or remove active dates individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandCityPutOne:
    description: 'A new city to replace the previous one.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of this city, formatted like "Seattle, WA, USA".
        minLength: 1
        example: Seattle, WA, USA
      activeDates:
        type: array
        description: An optional array containing the active dates that this band was based in this city during.
        items:
          description: Active dates that this band was based in this city during.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this band started being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this band stopped being based in this city from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandConnectedBands:
    description: The collection of other bands this band is connected to.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this connected bands collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands/123/connected-bands?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first connected band in the collection that is being returned in the connected bands array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of connected bands that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of connected bands in this collection, or if a 'filter' argument was given, the total number of connected bands after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      connectedBands:
        type: array
        items:
          $ref: '#/definitions/BandConnectedBand'
      connectedBandsCount:
        type: integer
        description: The number of connected bands actually returned in the connected bands array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/connected-bands?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/connected-bands?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/connected-bands?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/connected-bands?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandConnectedBand:
    description: A band that this band is connected to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this connected band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this connected band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this connected band.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
  BandConnectedBandWithWarnings:
    description: A band that this band is connected to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this connected band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this connected band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this connected band.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandConnectedBandPost:
    description: An existing connected band to add to this band, or a new connected band to create and add.  Specify an existing connected band by id or name.  If no id is specified and no connected band with the specified name exists, a new connected band will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing connected band to add to this band.
        minimum: 0
      name:
        type: string
        description: The name of an existing connected band to add to this band, or the name of a new connected band to create and add.  Names for new connected bands must be unique.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
  BandConnectedBandPatch:
    description: An existing connected band to modify, or a new connected band to create.  Specify an existing connected band by id or name.  If no id is specified, and no connected band exists with the specified name, a new connected band will be created.  The name of an existing connected band can be changed by specifying the connected band by id, along with the new name.  In any case, if the connected band is not already associated with this band, the connected band will be added to the band.
    properties:
      id:
        type: integer
        description: The ID of an existing connected band to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing connected band to add to this band or modify, or the name of a new connected band to create and add.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
  BandConnectedBandPut:
    description: 'An existing connected band to replace, or a new connected band to create.  BEWARE: When replacing an existing connected band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing connected band by id or name.  If no id is specified, and no connected band exists with the specified name, a new connected band will be created.  In any case, the created or replaced connected band will be added to this band if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing connected band to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing connected band to replace, the name of a new connected band to create, or if an existing connected band was specified by id, the new name for the replacement connected band.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
  BandConnectedBandPatchOne:
    description: The new fields on the existing connected band to modify.
    properties:
      name:
        type: string
        description: An optional new name for this connected band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandConnectedBandPutOne:
    description: 'A new connected band to replace the previous one.  BEWARE: When replacing an existing connected band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new connected band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Connected Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        example: 'Shared members: Member One, Member Two.'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandWebLinks:
    description: The collection of web links related to this band.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this web links collection or collection segment.
        example: https://www.seattlebandmap.com/api/bands/123/web-links?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first web link in the collection that is being returned in the web links array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of web links that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of web links in this collection, or if a 'filter' argument was given, the total number of web links after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      webLinks:
        type: array
        items:
          $ref: '#/definitions/BandWebLink'
      webLinksCount:
        type: integer
        description: The number of web links actually returned in the web links array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/web-links?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/web-links?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/bands/123/web-links?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/bands/123/web-links?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandWebLink:
    description: A web link related to this band.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: A description of this web link.  This field will only be present if a value was entered.
        example: Band Name on Social Media Website
  BandWebLinkWithWarnings:
    description: A web link related to this band.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: A description of this web link.  This field will only be present if a value was entered.
        example: Band Name on Social Media Website
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandWebLinkPost:
    description: An existing web link to add to this band, or a new web link to create and add.  Specify an existing web link by url.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: For new web links only.  An optional description of this web link.
        example: Band Name on Social Media Website
  BandWebLinkPatch:
    description: An existing web link to modify, or a new web link to create.  Specify an existing web link by url.  If no url is specified, a new web link will be created.  In any case, if the web link is not already associated with this band, the web link will be added to the band.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: An optional description of this web link.
        example: Band Name on Social Media Website
  BandWebLinkPut:
    description: 'An existing web link to replace, or a new web link to create.  BEWARE: When replacing an existing web link, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing web link by url.  If no url is specified, a new web link will be created.  In any case, the created or replaced web link will be added to this band if they were not already associated.'
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: For new web links only.  An optional description of this web link.
        example: Band Name on Social Media Website
  BandWebLinkPatchOne:
    description: The new fields on the existing web link to modify.
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: An optional description of this web link.
        example: Band Name on Social Media Website
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  BandWebLinkPutOne:
    description: 'A new web link to replace the previous one.  BEWARE: When replacing an existing web link, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      url:
        type: string
        description: The URL of this band web link.
        example: https://www.socialmediawebsite.com/bands/the-band
      description:
        type: string
        description: An optional description of this web link.
        example: Band Name on Social Media Website
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Connections:
    description: The collection of connections between bands, with descriptions of what connects them (for example, shared members).  Connections can be POSTed and DELETEd, and their descriptions can be PATCHed, but they can't be replaced with PUT since a their id is fixed once their two bands are defined.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this connections collection or collection segment.
        example: https://www.seattlebandmap.com/api/connections?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first connection in the collection that is being returned in the connections array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of connections that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of connections in this collection, or if a 'filter' argument was given, the total number of connections after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      connections:
        type: array
        items:
          $ref: '#/definitions/Connection'
      connectionsCount:
        type: integer
        description: The number of connections actually returned in the connections array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/connections?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/connections?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/connections?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/connections?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Connection:
    description: A connection between two bands, with a description of what connects them.
    properties:
      id:
        type: string
        description: The unique, stable ID of this connection.  It will be a string of the form "<band1-id>-<band2-id>".
        minimum: 0
        example: 123-789
      link:
        type: string
        description: A stable, absolute URL linking to this connection.
        example: https://www.seattlebandmap.com/api/connections/123-789
      band1:
        description: The first band.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the first band.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to the first band.
            example: https://www.seattlebandmap.com/api/bands/123
          name:
            type: string
            description: The name of the first band.
            minLength: 1
            example: Band Name
      band2:
        description: The second band.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the second band.
            minimum: 0
            example: 789
          link:
            type: string
            description: A stable, absolute URL linking to the second band.
            example: https://www.seattlebandmap.com/api/bands/789
          name:
            type: string
            description: The name of the second band.
            minLength: 1
            example: Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'
  ConnectionWithWarnings:
    description: A connection between two bands, with a description of what connects them.
    properties:
      id:
        type: string
        description: The unique, stable ID of this connection.  It will be a string of the form "<band1-id>-<band2-id>".
        minimum: 0
        example: 123-789
      link:
        type: string
        description: A stable, absolute URL linking to this connection.
        example: https://www.seattlebandmap.com/api/connections/123-789
      band1:
        description: The first band.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the first band.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to the first band.
            example: https://www.seattlebandmap.com/api/bands/123
          name:
            type: string
            description: The name of the first band.
            minLength: 1
            example: Band Name
      band2:
        description: The second band.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the second band.
            minimum: 0
            example: 789
          link:
            type: string
            description: A stable, absolute URL linking to the second band.
            example: https://www.seattlebandmap.com/api/bands/789
          name:
            type: string
            description: The name of the second band.
            minLength: 1
            example: Band Name
      description:
        type: string
        description: 'A brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  ConnectionPost:
    description: A new connection to create.
    required:
    - band1
    - band2
    properties:
      band1:
        description: The first band.  Specify by either id or name.  The first and second bands must already exist before creating a new connection.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the first band.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of the first band.
            minLength: 1
            example: Band Name
      band2:
        description: The second band.  Specify by either id or name.  The first and second bands must already exist before creating a new connection.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the second band.
            minimum: 0
            example: 789
          name:
            type: string
            description: The name of the second band.
            minLength: 1
            example: Band Name
      description:
        type: string
        description: 'An optional brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'
  ConnectionPatch:
    description: 'An existing connection to modify (only descriptions can be modified), or a new connection to create.  Existing connections can be specified in any of three ways: canonical id (like "123-789"), name id (like "band a-band b", also supplied in the connection "id" field) or by including either the id or name of both "band1" and "band2" objects (and not specifying a connection id).  The ordering of bands in any of the three methods does not matter (that is, "band a-band b" will address the same connection as "band b-band a").'
    properties:
      id:
        type: string
        description: An optional id of an existing connection to modify.  A string of the form "<band1>-<band2>" where <band1> and <band2> are either the id or the name of two existing bands.  The order does not matter ("123-789" will address the same connection as "789-123").
        minimum: 0
        example: 123-789
      band1:
        description: Either the first band in a new connection, or the first band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the first band.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of the first band.
            minLength: 1
            example: Band Name
      band2:
        description: Either the second band in a new connection, or the second band in an existing connection that was not already specified with the connection id.  Either way, specify by either id or name.  The first and second bands must already exist before creating a new connection.
        properties:
          id:
            type: integer
            description: The unique, stable ID of the second band.
            minimum: 0
            example: 789
          name:
            type: string
            description: The name of the second band.
            minLength: 1
            example: Band Name
      description:
        type: string
        description: 'An optional brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'
  ConnectionPatchOne:
    description: An object specifying a new description for an existing connection.
    properties:
      description:
        type: string
        description: 'An optional brief description of the connection, like "Shared members: Member One, Member Two.".'
        maxLength: 10000
        example: 'Shared members: Member One, Member Two.'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  People:
    description: The collection of people with person info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this people collection or collection segment.
        example: https://www.seattlebandmap.com/api/people?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first person in the collection that is being returned in the people array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of people that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of people in this collection, or if a 'filter' argument was given, the total number of people after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      people:
        type: array
        items:
          $ref: '#/definitions/Person'
      peopleCount:
        type: integer
        description: The number of people actually returned in the people array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Person:
    description: A person associated with one or more bands.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this person.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this person.
        example: https://www.seattlebandmap.com/api/people/123
      name:
        type: string
        description: The name of this person.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An array containing the bands this person is a member of or is associated with.
        minItems: 0
        uniqueItems: true
        items:
          description: A band this person is a member of or is associated with.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this band.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this band.
              example: https://www.seattlebandmap.com/api/bands/123
            name:
              type: string
              description: The name of this band.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An array containing the roles this person has had in this band (like instruments played).
              minItems: 0
              uniqueItems: true
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                    type: integer
                    description: The unique, stable ID of this role.
                    minimum: 0
                    example: 123
                  link:
                    type: string
                    description: A stable, absolute URL linking to this role.
                    example: https://www.seattlebandmap.com/api/roles/123
                  name:
                    type: string
                    description: The name of this role.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '2020-04-20'
            rolesCount:
              type: integer
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
              minimum: 0
              example: 123
            activeDates:
              type: array
              description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      bandsCount:
        type: integer
        description: The total number of bands this person is a member of or is associated with.  Should be equal to bands.length.
        minimum: 0
        example: 123
      roles:
        type: array
        description: An array containing the roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has or has had.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
      rolesCount:
        type: integer
        description: The total number of roles this person has had, across all their bands.  Should be equal to roles.length.
        minimum: 0
        example: 123
      cities:
        type: array
        description: An array containing the city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
        minItems: 0
        uniqueItems: true
        items:
          description: A city this person has been based in in one or more of their bands.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  Should be equal to cities.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the dates this person was active across any/all of their bands.  If per-band-role active dates are/were given, they will be automatically reflected in this array, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Dates that this person was active in bands.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  PersonWithWarnings:
    description: A person associated with one or more bands.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this person.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this person.
        example: https://www.seattlebandmap.com/api/people/123
      name:
        type: string
        description: The name of this person.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An array containing the bands this person is a member of or is associated with.
        minItems: 0
        uniqueItems: true
        items:
          description: A band this person is a member of or is associated with.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this band.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this band.
              example: https://www.seattlebandmap.com/api/bands/123
            name:
              type: string
              description: The name of this band.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An array containing the roles this person has had in this band (like instruments played).
              minItems: 0
              uniqueItems: true
              items:
                description: A role this person has had in this band (like an instrument played).
                properties:
                  id:
                    type: integer
                    description: The unique, stable ID of this role.
                    minimum: 0
                    example: 123
                  link:
                    type: string
                    description: A stable, absolute URL linking to this role.
                    example: https://www.seattlebandmap.com/api/roles/123
                  name:
                    type: string
                    description: The name of this role.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                          example: '2020-04-20'
            rolesCount:
              type: integer
              description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
              minimum: 0
              example: 123
            activeDates:
              type: array
              description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
              items:
                description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      bandsCount:
        type: integer
        description: The total number of bands this person is a member of or is associated with.  Should be equal to bands.length.
        minimum: 0
        example: 123
      roles:
        type: array
        description: An array containing the roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has or has had.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
      rolesCount:
        type: integer
        description: The total number of roles this person has had, across all their bands.  Should be equal to roles.length.
        minimum: 0
        example: 123
      cities:
        type: array
        description: An array containing the city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
        minItems: 0
        uniqueItems: true
        items:
          description: A city this person has been based in in one or more of their bands.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  Should be equal to cities.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the dates this person was active across any/all of their bands.  If per-band-role active dates are/were given, they will be automatically reflected in this array, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Dates that this person was active in bands.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person stopped being active.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonPost:
    description: A new person to create.
    required:
    - name
    properties:
      name:
        type: string
        description: The name of the new person.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An optional array containing the bands this person is a member of or is associated with.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing band to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this band.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
  PersonPatch:
    description: An existing person to modify, or a new person to create.  Specify an existing person by id or name.  If no id is specified, and no person exists with the specified name, a new person will be created.  The name of an existing person can be changed by specifying the person by id, along with the new name.
    properties:
      id:
        type: integer
        description: The ID of an existing person to modify.
        minimum: 0
      name:
        type: string
        description: The name of the person to modify or create.  Or if an existing person was specified by id, an optional new name for the existing person.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An optional array containing the bands this person is a member of or is associated with.  If specified for an existing person, this array will completely replace the existing bands with the new bands for this person.  To instead add or remove bands individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing band to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing band, this array will completely replace the existing roles with the new roles for this band.  To instead add or remove roles individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this band.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
  PersonPut:
    description: 'An existing person to replace, or a new person to create.  BEWARE: When replacing an existing person, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing person by id or name.'
    required:
    - name
    properties:
      id:
        type: integer
        description: The ID of an existing person to replace.
        minimum: 0
      name:
        type: string
        description: The name of the person to replace or create.  Or if an existing person was specified by id, the new name for the person that will replace the original.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An optional array containing the bands this person is a member of or is associated with.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing band to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this band.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
  PersonPatchOne:
    description: The new fields on the existing person to modify.
    properties:
      name:
        type: string
        description: An optional new name for this person.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An optional array containing the bands this person is a member of or is associated with.  If specified, this array will completely replace the existing bands with the new bands for this person.  To instead add or remove bands individually to/from the person, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing band to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing band, this array will completely replace the existing roles with the new roles for this band.  To instead add or remove roles individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this band.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonPutOne:
    description: 'A new person to replace the previous one.  BEWARE: When replacing an existing person, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    required:
    - name
    properties:
      name:
        type: string
        description: The name of the new person.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Person Name
      bands:
        type: array
        description: An optional array containing the bands this person is a member of or is associated with.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing band to add to this person.
              minimum: 0
            name:
              type: string
              description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
              minLength: 1
              maxLength: 255
              example: Band Name
            roles:
              type: array
              description: An optional array containing the roles this person has had in this band (like instruments played).
              default: []
              minItems: 0
              uniqueItems: true
              items:
                description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
                properties:
                  id:
                    type: integer
                    description: The ID of an existing role to add to this band.
                    minimum: 0
                  name:
                    type: string
                    description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
                    minLength: 1
                    example: Guitarist
                  activeDates:
                    type: array
                    description: An optional array containing the active dates that this person had this role in this band.
                    items:
                      description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                      properties:
                        from:
                          type: string
                          format: date
                          description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '1980-04-20'
                        until:
                          type: string
                          format: date
                          description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                          example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBands:
    description: The collection of bands this person is a member of or is associated with.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this bands collection or collection segment.
        example: https://www.seattlebandmap.com/api/people/123/bands?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first band in the collection that is being returned in the bands array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of bands that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of bands in this collection, or if a 'filter' argument was given, the total number of bands after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      bands:
        type: array
        items:
          $ref: '#/definitions/PersonBand'
      bandsCount:
        type: integer
        description: The number of bands actually returned in the bands array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/bands?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/bands?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/bands?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/bands?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBand:
    description: A band this person is a member of or is associated with.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this band.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An array containing the roles this person has had in this band (like instruments played).
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has had in this band (like an instrument played).
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      rolesCount:
        type: integer
        description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  PersonBandWithWarnings:
    description: A band this person is a member of or is associated with.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this band.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this band.
        example: https://www.seattlebandmap.com/api/bands/123
      name:
        type: string
        description: The name of this band.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An array containing the roles this person has had in this band (like instruments played).
        minItems: 0
        uniqueItems: true
        items:
          description: A role this person has had in this band (like an instrument played).
          properties:
            id:
              type: integer
              description: The unique, stable ID of this role.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this role.
              example: https://www.seattlebandmap.com/api/roles/123
            name:
              type: string
              description: The name of this role.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
                    example: '2020-04-20'
      rolesCount:
        type: integer
        description: The total number of roles this person is known to have had in this band.  Should be equal to roles.length.
        minimum: 0
        example: 123
      activeDates:
        type: array
        description: An array containing the active dates that this person played in or was associated with this band (in any role).  If per-role active dates are/were given, they will be automatically reflected in this array as well, but they cannot be entered here directly.  This array will only be present if a values are known.
        items:
          description: Active dates that this person played in or was associated with this band (in any role).  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started playing in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person played in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandPost:
    description: An existing band to add to this person, or a new band to create and add.  Specify an existing band by id or name.  If no id is specified and no band with the specified name exists, a new band will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing band to add to this person.
        minimum: 0
      name:
        type: string
        description: The name of an existing band to add to this person, or the name of a new band to create and add.  Names for new bands must be unique.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  PersonBandPatch:
    description: An existing band to modify, or a new band to create.  Specify an existing band by id or name.  If no id is specified, and no band exists with the specified name, a new band will be created.  The name of an existing band can be changed by specifying the band by id, along with the new name.  In any case, if the band is not already associated with this person, the band will be added to the person.
    properties:
      id:
        type: integer
        description: The ID of an existing band to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing band to add to this person or modify, or the name of a new band to create and add.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).  If specified for an existing band, this array will completely replace the existing roles with the new roles for this band.  To instead add or remove roles individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  PersonBandPut:
    description: 'An existing band to replace, or a new band to create.  BEWARE: When replacing an existing band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing band by id or name.  If no id is specified, and no band exists with the specified name, a new band will be created.  In any case, the created or replaced band will be added to this person if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing band to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing band to replace, the name of a new band to create, or if an existing band was specified by id, the new name for the replacement band.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
  PersonBandPatchOne:
    description: The new fields on the existing band to modify.
    properties:
      name:
        type: string
        description: An optional new name for this band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).  If specified, this array will completely replace the existing roles with the new roles for this band.  To instead add or remove roles individually to/from the band, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.  If specified, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandPutOne:
    description: 'A new band to replace the previous one.  BEWARE: When replacing an existing band, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new band.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Band Name
      roles:
        type: array
        description: An optional array containing the roles this person has had in this band (like instruments played).
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing role to add to this band.
              minimum: 0
            name:
              type: string
              description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
              minLength: 1
              example: Guitarist
            activeDates:
              type: array
              description: An optional array containing the active dates that this person had this role in this band.
              items:
                description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
                properties:
                  from:
                    type: string
                    format: date
                    description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '1980-04-20'
                  until:
                    type: string
                    format: date
                    description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
                    example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandRoles:
    description: The collection of roles this person has had in this band (like instruments played).
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this roles collection or collection segment.
        example: https://www.seattlebandmap.com/api/people/123/bands/123/roles?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first role in the collection that is being returned in the roles array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of roles that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of roles in this collection, or if a 'filter' argument was given, the total number of roles after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      roles:
        type: array
        items:
          $ref: '#/definitions/PersonBandRole'
      rolesCount:
        type: integer
        description: The number of roles actually returned in the roles array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/bands/123/roles?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/bands/123/roles?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/bands/123/roles?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/bands/123/roles?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandRole:
    description: A role this person has had in this band (like an instrument played).
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
  PersonBandRoleWithWarnings:
    description: A role this person has had in this band (like an instrument played).
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An array containing the active dates that this person had this role in this band.  This array will only be present if a values are known.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandRolePost:
    description: An existing role to add to this band, or a new role to create and add.  Specify an existing role by id or name.  If no id is specified and no role with the specified name exists, a new role will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing role to add to this band.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to add to this band, or the name of a new role to create and add.  Names for new roles must be unique.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  PersonBandRolePatch:
    description: An existing role to modify, or a new role to create.  Specify an existing role by id or name.  If no id is specified, and no role exists with the specified name, a new role will be created.  The name of an existing role can be changed by specifying the role by id, along with the new name.  In any case, if the role is not already associated with this band, the role will be added to the band.
    properties:
      id:
        type: integer
        description: The ID of an existing role to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to add to this band or modify, or the name of a new role to create and add.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.  If specified for an existing role, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  PersonBandRolePut:
    description: 'An existing role to replace, or a new role to create.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing role by id or name.  If no id is specified, and no role exists with the specified name, a new role will be created.  In any case, the created or replaced role will be added to this band if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing role to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing role to replace, the name of a new role to create, or if an existing role was specified by id, the new name for the replacement role.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
  PersonBandRolePatchOne:
    description: The new fields on the existing role to modify.
    properties:
      name:
        type: string
        description: An optional new name for this role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.  If specified, this array will completely replace the existing active dates with the new active dates for this role.  To instead add or remove active dates individually to/from the role, POST or DELETE respectively to the nested sub-URL representing this array.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonBandRolePutOne:
    description: 'A new role to replace the previous one.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      activeDates:
        type: array
        description: An optional array containing the active dates that this person had this role in this band.
        items:
          description: Active dates that this person had this role in this band.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
          properties:
            from:
              type: string
              format: date
              description: 'The date this person started having this role in this band from.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '1980-04-20'
            until:
              type: string
              format: date
              description: 'The date this person had this role in this band until.  The format is the ISO 8601 standard date format: YYYY-MM-DD.'
              example: '2020-04-20'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonRoles:
    description: The collection of roles this person has had, across all their bands.  People's roles cannot be submitted here but should instead be posted as per-band roles to specific bands at /people/{person}/bands/{band}/roles or /bands/{band}/people/{person}/roles.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this roles collection or collection segment.
        example: https://www.seattlebandmap.com/api/people/123/roles?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first role in the collection that is being returned in the roles array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of roles that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of roles in this collection, or if a 'filter' argument was given, the total number of roles after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      roles:
        type: array
        items:
          $ref: '#/definitions/PersonRole'
      rolesCount:
        type: integer
        description: The number of roles actually returned in the roles array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/roles?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/roles?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/roles?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/roles?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonRole:
    description: A role this person has or has had.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
  PersonRoleWithWarnings:
    description: A role this person has or has had.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonCities:
    description: The collection of city or cities this person is or has been based in, across all their bands, ordered by most recent to oldest.  People's cities cannot be submitted here but should instead be posted as per-band cities to specific bands at /bands/{band}/cities.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this cities collection or collection segment.
        example: https://www.seattlebandmap.com/api/people/123/cities?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first city in the collection that is being returned in the cities array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of cities that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of cities in this collection, or if a 'filter' argument was given, the total number of cities after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      cities:
        type: array
        items:
          $ref: '#/definitions/PersonCity'
      citiesCount:
        type: integer
        description: The number of cities actually returned in the cities array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/cities?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/cities?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/people/123/cities?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/people/123/cities?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  PersonCity:
    description: A city this person has been based in in one or more of their bands.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
  PersonCityWithWarnings:
    description: A city this person has been based in in one or more of their bands.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Roles:
    description: The collection of roles with role info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this roles collection or collection segment.
        example: https://www.seattlebandmap.com/api/roles?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first role in the collection that is being returned in the roles array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of roles that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of roles in this collection, or if a 'filter' argument was given, the total number of roles after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      rolesCount:
        type: integer
        description: The number of roles actually returned in the roles array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/roles?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/roles?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/roles?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/roles?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Role:
    description: A role people have in bands, like guitarist or vocalist or producer.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
  RoleWithWarnings:
    description: A role people have in bands, like guitarist or vocalist or producer.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this role.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this role.
        example: https://www.seattlebandmap.com/api/roles/123
      name:
        type: string
        description: The name of this role.
        minLength: 1
        example: Guitarist
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RolePost:
    description: A new role to create.
    properties:
      name:
        type: string
        description: The name of the new role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
  RolePatch:
    description: An existing role to modify, or a new role to create.  Specify an existing role by id or name.  If no id is specified, and no role exists with the specified name, a new role will be created.  The name of an existing role can be changed by specifying the role by id, along with the new name.
    properties:
      id:
        type: integer
        description: The ID of an existing role to modify.
        minimum: 0
      name:
        type: string
        description: The name of the role to modify or create.  Or if an existing role was specified by id, an optional new name for the existing role.
        minLength: 1
        example: Guitarist
  RolePut:
    description: 'An existing role to replace, or a new role to create.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing role by id or name.'
    properties:
      id:
        type: integer
        description: The ID of an existing role to replace.
        minimum: 0
      name:
        type: string
        description: The name of the role to replace or create.  Or if an existing role was specified by id, the new name for the role that will replace the original.
        minLength: 1
        example: Guitarist
  RolePatchOne:
    description: The new fields on the existing role to modify.
    properties:
      name:
        type: string
        description: An optional new name for this role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RolePutOne:
    description: 'A new role to replace the previous one.  BEWARE: When replacing an existing role, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new role.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Guitarist
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Cities:
    description: The collection of cities with city info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this cities collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/cities?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first city in the collection that is being returned in the cities array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of cities that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of cities in this collection, or if a 'filter' argument was given, the total number of cities after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      cities:
        type: array
        items:
          $ref: '#/definitions/City'
      citiesCount:
        type: integer
        description: The number of cities actually returned in the cities array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/cities?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/cities?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/cities?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/cities?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  City:
    description: A city where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
      state:
        description: The state/province/prefecture that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this state/province/prefecture.
            example: https://www.seattlebandmap.com/api/locations/states/123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this city belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CityWithWarnings:
    description: A city where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
      state:
        description: The state/province/prefecture that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this state/province/prefecture.
            example: https://www.seattlebandmap.com/api/locations/states/123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country that this city belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this city belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityPost:
    description: A new city to create.
    properties:
      name:
        type: string
        description: The name of the new city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      state:
        description: The state to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this city.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CityPatch:
    description: An existing city to modify, or a new city to create.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  The name of an existing city can be changed by specifying the city by id, along with the new name.
    properties:
      id:
        type: integer
        description: The ID of an existing city to modify.
        minimum: 0
      name:
        type: string
        description: The name of the city to modify or create.  Or if an existing city was specified by id, an optional new name for the existing city.
        minLength: 1
        example: Seattle
      state:
        description: The state to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  If specified for an existing city, this array will completely replace the existing regions with the new regions for this city.  To instead add or remove regions individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this city.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CityPut:
    description: 'An existing city to replace, or a new city to create.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing city by id or name.'
    properties:
      id:
        type: integer
        description: The ID of an existing city to replace.
        minimum: 0
      name:
        type: string
        description: The name of the city to replace or create.  Or if an existing city was specified by id, the new name for the city that will replace the original.
        minLength: 1
        example: Seattle
      state:
        description: The state to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this city.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CityPatchOne:
    description: The new fields on the existing city to modify.
    properties:
      name:
        type: string
        description: An optional new name for this city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      state:
        description: The state to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.  If specified, this array will completely replace the existing regions with the new regions for this city.  To instead add or remove regions individually to/from the city, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this city.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityPutOne:
    description: 'A new city to replace the previous one.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      state:
        description: The state to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this state/province/prefecture.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington state.
            minLength: 1
            maxLength: 255
            example: WA
      country:
        description: The country to associate with this city.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this city.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityRegions:
    description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this city belongs to.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this regions collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/cities/123/regions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first region in the collection that is being returned in the regions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of regions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of regions in this collection, or if a 'filter' argument was given, the total number of regions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      regions:
        type: array
        items:
          $ref: '#/definitions/CityRegion'
      regionsCount:
        type: integer
        description: The number of regions actually returned in the regions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/cities/123/regions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/cities/123/regions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/cities/123/regions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/cities/123/regions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityRegion:
    description: A region that this city belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CityRegionWithWarnings:
    description: A region that this city belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityRegionPost:
    description: An existing region to add to this city, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing region to add to this city.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this city, or the name of a new region to create and add.  Names for new regions must be unique.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CityRegionPatch:
    description: An existing region to modify, or a new region to create.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  The name of an existing region can be changed by specifying the region by id, along with the new name.  In any case, if the region is not already associated with this city, the region will be added to the city.
    properties:
      id:
        type: integer
        description: The ID of an existing region to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this city or modify, or the name of a new region to create and add.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CityRegionPut:
    description: 'An existing region to replace, or a new region to create.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  In any case, the created or replaced region will be added to this city if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing region to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to replace, the name of a new region to create, or if an existing region was specified by id, the new name for the replacement region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CityRegionPatchOne:
    description: The new fields on the existing region to modify.
    properties:
      name:
        type: string
        description: An optional new name for this region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CityRegionPutOne:
    description: 'A new region to replace the previous one.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  States:
    description: The collection of states, provinces, prefectures, or other administrative areas where bands or artists play.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this states collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/states?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first state in the collection that is being returned in the states array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of states that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of states in this collection, or if a 'filter' argument was given, the total number of states after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      states:
        type: array
        items:
          $ref: '#/definitions/State'
      statesCount:
        type: integer
        description: The number of states actually returned in the states array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  State:
    description: A state, province, prefecture, or other administrative area where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state/province/prefecture.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this state/province/prefecture.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An array containing the cities that belong to or are located in this state/province/prefecture.
        minItems: 0
        uniqueItems: true
        items:
          description: A city that belongs to or is located in this state/province/prefecture.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities that belong to or are located in this state/province/prefecture.  Should be equal to cities.length.
        minimum: 0
        example: 123
      country:
        description: The country that this state belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this state/province/prefecture belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  StateWithWarnings:
    description: A state, province, prefecture, or other administrative area where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state/province/prefecture.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this state/province/prefecture.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An array containing the cities that belong to or are located in this state/province/prefecture.
        minItems: 0
        uniqueItems: true
        items:
          description: A city that belongs to or is located in this state/province/prefecture.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities that belong to or are located in this state/province/prefecture.  Should be equal to cities.length.
        minimum: 0
        example: 123
      country:
        description: The country that this state belongs to and/or is located in.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this country.
            example: https://www.seattlebandmap.com/api/locations/countries/123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this state/province/prefecture belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StatePost:
    description: A new state to create.
    properties:
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this state/province/prefecture.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this state.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      country:
        description: The country to associate with this state.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this state.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  StatePatch:
    description: An existing state to modify, or a new state to create.  Specify an existing state by id or name.  If no id is specified, and no state exists with the specified name, a new state will be created.  The name of an existing state can be changed by specifying the state by id, along with the new name.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state/province/prefecture.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this state/province/prefecture.  If specified for an existing state, this array will completely replace the existing cities with the new cities for this state.  To instead add or remove cities individually to/from the state, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this state.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      country:
        description: The country to associate with this state.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  If specified for an existing state, this array will completely replace the existing regions with the new regions for this state.  To instead add or remove regions individually to/from the state, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this state.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  StatePut:
    description: 'An existing state to replace, or a new state to create.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing state by id or name.'
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state/province/prefecture.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this state/province/prefecture.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this state.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      country:
        description: The country to associate with this state.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this state.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  StatePatchOne:
    description: The new fields on the existing state to modify.
    properties:
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this state/province/prefecture.  If specified, this array will completely replace the existing cities with the new cities for this state.  To instead add or remove cities individually to/from the state, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this state.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      country:
        description: The country to associate with this state.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.  If specified, this array will completely replace the existing regions with the new regions for this state.  To instead add or remove regions individually to/from the state, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this state.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StatePutOne:
    description: 'A new state to replace the previous one.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of this state/province/prefecture, often a capitalized abreviation, like "WA" for Washington State.
        minLength: 1
        maxLength: 255
        example: WA
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this state/province/prefecture.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this state.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      country:
        description: The country to associate with this state.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this country.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
            minLength: 1
            maxLength: 255
            example: USA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this state.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateCities:
    description: The collection of cities that belong to or are located in this state/province/prefecture.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this cities collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/states/123/cities?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first city in the collection that is being returned in the cities array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of cities that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of cities in this collection, or if a 'filter' argument was given, the total number of cities after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      cities:
        type: array
        items:
          $ref: '#/definitions/StateCity'
      citiesCount:
        type: integer
        description: The number of cities actually returned in the cities array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states/123/cities?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states/123/cities?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states/123/cities?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states/123/cities?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateCity:
    description: A city that belongs to or is located in this state/province/prefecture.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
  StateCityWithWarnings:
    description: A city that belongs to or is located in this state/province/prefecture.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateCityPost:
    description: An existing city to add to this state, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing city to add to this state.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to add to this state, or the name of a new city to create and add.  Names for new cities must be unique.
        minLength: 1
        example: Seattle
  StateCityPatch:
    description: An existing city to modify, or a new city to create.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  The name of an existing city can be changed by specifying the city by id, along with the new name.  In any case, if the city is not already associated with this state, the city will be added to the state.
    properties:
      id:
        type: integer
        description: The ID of an existing city to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to add to this state or modify, or the name of a new city to create and add.
        minLength: 1
        example: Seattle
  StateCityPut:
    description: 'An existing city to replace, or a new city to create.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  In any case, the created or replaced city will be added to this state if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing city to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to replace, the name of a new city to create, or if an existing city was specified by id, the new name for the replacement city.
        minLength: 1
        example: Seattle
  StateCityPatchOne:
    description: The new fields on the existing city to modify.
    properties:
      name:
        type: string
        description: An optional new name for this city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateCityPutOne:
    description: 'A new city to replace the previous one.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateRegions:
    description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this state/province/prefecture belongs to.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this regions collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/states/123/regions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first region in the collection that is being returned in the regions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of regions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of regions in this collection, or if a 'filter' argument was given, the total number of regions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      regions:
        type: array
        items:
          $ref: '#/definitions/StateRegion'
      regionsCount:
        type: integer
        description: The number of regions actually returned in the regions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states/123/regions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states/123/regions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/states/123/regions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/states/123/regions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateRegion:
    description: A region that this state/province/prefecture belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  StateRegionWithWarnings:
    description: A region that this state/province/prefecture belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateRegionPost:
    description: An existing region to add to this state, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing region to add to this state.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this state, or the name of a new region to create and add.  Names for new regions must be unique.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  StateRegionPatch:
    description: An existing region to modify, or a new region to create.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  The name of an existing region can be changed by specifying the region by id, along with the new name.  In any case, if the region is not already associated with this state, the region will be added to the state.
    properties:
      id:
        type: integer
        description: The ID of an existing region to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this state or modify, or the name of a new region to create and add.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  StateRegionPut:
    description: 'An existing region to replace, or a new region to create.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  In any case, the created or replaced region will be added to this state if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing region to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to replace, the name of a new region to create, or if an existing region was specified by id, the new name for the replacement region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  StateRegionPatchOne:
    description: The new fields on the existing region to modify.
    properties:
      name:
        type: string
        description: An optional new name for this region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  StateRegionPutOne:
    description: 'A new region to replace the previous one.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Countries:
    description: The collection of countries with country info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this countries collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/countries?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first country in the collection that is being returned in the countries array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of countries that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of countries in this collection, or if a 'filter' argument was given, the total number of countries after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      countries:
        type: array
        items:
          $ref: '#/definitions/Country'
      countriesCount:
        type: integer
        description: The number of countries actually returned in the countries array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Country:
    description: A country where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this country.
        example: https://www.seattlebandmap.com/api/locations/countries/123
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An array containing the states/provinces/prefectures that belong to or are located in this country.
        minItems: 0
        uniqueItems: true
        items:
          description: A state/province/prefecture that belongs to or is located in this state/province/prefecture.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this state.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this state.
              example: https://www.seattlebandmap.com/api/locations/states/123
            name:
              type: string
              description: The name of this state.
              minLength: 1
              maxLength: 255
              example: WA
      statesCount:
        type: integer
        description: The total number of states/provinces/prefectures that belong to or are located in this country.
        minimum: 0
        example: 123
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this country belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CountryWithWarnings:
    description: A country where bands or artists play.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this country.
        example: https://www.seattlebandmap.com/api/locations/countries/123
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An array containing the states/provinces/prefectures that belong to or are located in this country.
        minItems: 0
        uniqueItems: true
        items:
          description: A state/province/prefecture that belongs to or is located in this state/province/prefecture.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this state.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this state.
              example: https://www.seattlebandmap.com/api/locations/states/123
            name:
              type: string
              description: The name of this state.
              minLength: 1
              maxLength: 255
              example: WA
      statesCount:
        type: integer
        description: The total number of states/provinces/prefectures that belong to or are located in this country.
        minimum: 0
        example: 123
      regions:
        type: array
        description: An array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
        minItems: 0
        uniqueItems: true
        items:
          description: A region that this country belongs to.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryPost:
    description: A new country to create.
    properties:
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this country.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CountryPatch:
    description: An existing country to modify, or a new country to create.  Specify an existing country by id or name.  If no id is specified, and no country exists with the specified name, a new country will be created.  The name of an existing country can be changed by specifying the country by id, along with the new name.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this country.  If specified for an existing country, this array will completely replace the existing states with the new states for this country.  To instead add or remove states individually to/from the country, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  If specified for an existing country, this array will completely replace the existing regions with the new regions for this country.  To instead add or remove regions individually to/from the country, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CountryPut:
    description: 'An existing country to replace, or a new country to create.  BEWARE: When replacing an existing country, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing country by id or name.'
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this country.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  CountryPatchOne:
    description: The new fields on the existing country to modify.
    properties:
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this country.  If specified, this array will completely replace the existing states with the new states for this country.  To instead add or remove states individually to/from the country, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.  If specified, this array will completely replace the existing regions with the new regions for this country.  To instead add or remove regions individually to/from the country, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryPutOne:
    description: 'A new country to replace the previous one.  BEWARE: When replacing an existing country, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of this country, often a capitalized abreviation, like "USA" for the United States.
        minLength: 1
        maxLength: 255
        example: USA
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this country.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      regions:
        type: array
        description: An optional array of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this country.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryStates:
    description: The collection of states/provinces/prefectures that belong to or are located in this country.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this states collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/countries/123/states?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first state in the collection that is being returned in the states array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of states that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of states in this collection, or if a 'filter' argument was given, the total number of states after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      states:
        type: array
        items:
          $ref: '#/definitions/CountryState'
      statesCount:
        type: integer
        description: The number of states actually returned in the states array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries/123/states?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries/123/states?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries/123/states?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries/123/states?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryState:
    description: A state/province/prefecture that belongs to or is located in this state/province/prefecture.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this state.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state.
        minLength: 1
        maxLength: 255
        example: WA
  CountryStateWithWarnings:
    description: A state/province/prefecture that belongs to or is located in this state/province/prefecture.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this state.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryStatePost:
    description: An existing state to add to this country, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing state to add to this country.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to add to this country, or the name of a new state to create and add.  Names for new states must be unique.
        minLength: 1
        maxLength: 255
        example: WA
  CountryStatePatch:
    description: An existing state to modify, or a new state to create.  Specify an existing state by id or name.  If no id is specified, and no state exists with the specified name, a new state will be created.  The name of an existing state can be changed by specifying the state by id, along with the new name.  In any case, if the state is not already associated with this country, the state will be added to the country.
    properties:
      id:
        type: integer
        description: The ID of an existing state to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to add to this country or modify, or the name of a new state to create and add.
        minLength: 1
        maxLength: 255
        example: WA
  CountryStatePut:
    description: 'An existing state to replace, or a new state to create.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing state by id or name.  If no id is specified, and no state exists with the specified name, a new state will be created.  In any case, the created or replaced state will be added to this country if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing state to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to replace, the name of a new state to create, or if an existing state was specified by id, the new name for the replacement state.
        minLength: 1
        maxLength: 255
        example: WA
  CountryStatePatchOne:
    description: The new fields on the existing state to modify.
    properties:
      name:
        type: string
        description: An optional new name for this state.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryStatePutOne:
    description: 'A new state to replace the previous one.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new state.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryRegions:
    description: The collection of any "regions" (free-form groupings of countries, states, cities, and/or other regions) that this country belongs to.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this regions collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/countries/123/regions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first region in the collection that is being returned in the regions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of regions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of regions in this collection, or if a 'filter' argument was given, the total number of regions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      regions:
        type: array
        items:
          $ref: '#/definitions/CountryRegion'
      regionsCount:
        type: integer
        description: The number of regions actually returned in the regions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries/123/regions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries/123/regions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/countries/123/regions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/countries/123/regions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryRegion:
    description: A region that this country belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CountryRegionWithWarnings:
    description: A region that this country belongs to.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryRegionPost:
    description: An existing region to add to this country, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing region to add to this country.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this country, or the name of a new region to create and add.  Names for new regions must be unique.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CountryRegionPatch:
    description: An existing region to modify, or a new region to create.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  The name of an existing region can be changed by specifying the region by id, along with the new name.  In any case, if the region is not already associated with this country, the region will be added to the country.
    properties:
      id:
        type: integer
        description: The ID of an existing region to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this country or modify, or the name of a new region to create and add.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CountryRegionPut:
    description: 'An existing region to replace, or a new region to create.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  In any case, the created or replaced region will be added to this country if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing region to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to replace, the name of a new region to create, or if an existing region was specified by id, the new name for the replacement region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  CountryRegionPatchOne:
    description: The new fields on the existing region to modify.
    properties:
      name:
        type: string
        description: An optional new name for this region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  CountryRegionPutOne:
    description: 'A new region to replace the previous one.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Regions:
    description: The collection of regions with region info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this regions collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/regions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first region in the collection that is being returned in the regions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of regions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of regions in this collection, or if a 'filter' argument was given, the total number of regions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      regions:
        type: array
        items:
          $ref: '#/definitions/Region'
      regionsCount:
        type: integer
        description: The number of regions actually returned in the regions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Region:
    description: A free-form grouping of countries, states, cities, and/or other regions.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An array containing the cities that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A city that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities that belong to or are located in this region.  Should be equal to cities.length.
        minimum: 0
        example: 123
      states:
        type: array
        description: An array containing the states/provinces/prefectures that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A state/province/prefecture that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this state.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this state.
              example: https://www.seattlebandmap.com/api/locations/states/123
            name:
              type: string
              description: The name of this state.
              minLength: 1
              maxLength: 255
              example: WA
      statesCount:
        type: integer
        description: The total number of states/provinces/prefectures that belong to or are located in this region.
        minimum: 0
        example: 123
      countries:
        type: array
        description: An array containing the countries that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A country that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this country.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this country.
              example: https://www.seattlebandmap.com/api/locations/countries/123
            name:
              type: string
              description: The name of this country.
              minLength: 1
              maxLength: 255
              example: USA
      countriesCount:
        type: integer
        description: The total number of countries that belong to or are located in this region.
        minimum: 0
        example: 123
      regions:
        type: array
        description: An array containing the other regions that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: Another region that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      regionsCount:
        type: integer
        description: The total number of other regions that belong to or are located in this region.
        minimum: 0
        example: 123
  RegionWithWarnings:
    description: A free-form grouping of countries, states, cities, and/or other regions.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: The stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An array containing the cities that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A city that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this city.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this city.
              example: https://www.seattlebandmap.com/api/locations/cities/123
            name:
              type: string
              description: The name of this city.
              minLength: 1
              example: Seattle
      citiesCount:
        type: integer
        description: The total number of cities that belong to or are located in this region.  Should be equal to cities.length.
        minimum: 0
        example: 123
      states:
        type: array
        description: An array containing the states/provinces/prefectures that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A state/province/prefecture that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this state.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this state.
              example: https://www.seattlebandmap.com/api/locations/states/123
            name:
              type: string
              description: The name of this state.
              minLength: 1
              maxLength: 255
              example: WA
      statesCount:
        type: integer
        description: The total number of states/provinces/prefectures that belong to or are located in this region.
        minimum: 0
        example: 123
      countries:
        type: array
        description: An array containing the countries that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: A country that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this country.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this country.
              example: https://www.seattlebandmap.com/api/locations/countries/123
            name:
              type: string
              description: The name of this country.
              minLength: 1
              maxLength: 255
              example: USA
      countriesCount:
        type: integer
        description: The total number of countries that belong to or are located in this region.
        minimum: 0
        example: 123
      regions:
        type: array
        description: An array containing the other regions that belong to or are located in this region.
        minItems: 0
        uniqueItems: true
        items:
          description: Another region that belongs to or is located in this region.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this region.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this region.
              example: https://www.seattlebandmap.com/api/locations/regions/123
            name:
              type: string
              description: The name of this region.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      regionsCount:
        type: integer
        description: The total number of other regions that belong to or are located in this region.
        minimum: 0
        example: 123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionPost:
    description: A new region to create.
    properties:
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this region.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      countries:
        type: array
        description: An optional array containing the countries that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing country to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
              minLength: 1
              maxLength: 255
              example: USA
      regions:
        type: array
        description: An optional array containing the other regions that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  RegionPatch:
    description: An existing region to modify, or a new region to create.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  The name of an existing region can be changed by specifying the region by id, along with the new name.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this region.  If specified for an existing region, this array will completely replace the existing cities with the new cities for this region.  To instead add or remove cities individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this region.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this region.  If specified for an existing region, this array will completely replace the existing states with the new states for this region.  To instead add or remove states individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      countries:
        type: array
        description: An optional array containing the countries that belong to or are located in this region.  If specified for an existing region, this array will completely replace the existing countries with the new countries for this region.  To instead add or remove countries individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing country to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
              minLength: 1
              maxLength: 255
              example: USA
      regions:
        type: array
        description: An optional array containing the other regions that belong to or are located in this region.  If specified for an existing region, this array will completely replace the existing regions with the new regions for this region.  To instead add or remove regions individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  RegionPut:
    description: 'An existing region to replace, or a new region to create.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing region by id or name.'
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this region.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      countries:
        type: array
        description: An optional array containing the countries that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing country to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
              minLength: 1
              maxLength: 255
              example: USA
      regions:
        type: array
        description: An optional array containing the other regions that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
  RegionPatchOne:
    description: The new fields on the existing region to modify.
    properties:
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this region.  If specified, this array will completely replace the existing cities with the new cities for this region.  To instead add or remove cities individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this region.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this region.  If specified, this array will completely replace the existing states with the new states for this region.  To instead add or remove states individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      countries:
        type: array
        description: An optional array containing the countries that belong to or are located in this region.  If specified, this array will completely replace the existing countries with the new countries for this region.  To instead add or remove countries individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing country to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
              minLength: 1
              maxLength: 255
              example: USA
      regions:
        type: array
        description: An optional array containing the other regions that belong to or are located in this region.  If specified, this array will completely replace the existing regions with the new regions for this region.  To instead add or remove regions individually to/from the region, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionPutOne:
    description: 'A new region to replace the previous one.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      cities:
        type: array
        description: An optional array containing the cities that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing city to add to this region.
              minimum: 0
            name:
              type: string
              description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
              minLength: 1
              example: Seattle
      states:
        type: array
        description: An optional array containing the states/provinces/prefectures that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing state to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
              minLength: 1
              maxLength: 255
              example: WA
      countries:
        type: array
        description: An optional array containing the countries that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing country to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
              minLength: 1
              maxLength: 255
              example: USA
      regions:
        type: array
        description: An optional array containing the other regions that belong to or are located in this region.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing region to add to this region.
              minimum: 0
              example: 123
            name:
              type: string
              description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
              minLength: 1
              maxLength: 255
              example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCities:
    description: The collection of cities that belong to or are located in this region.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this cities collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/regions/123/cities?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first city in the collection that is being returned in the cities array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of cities that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of cities in this collection, or if a 'filter' argument was given, the total number of cities after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      cities:
        type: array
        items:
          $ref: '#/definitions/RegionCity'
      citiesCount:
        type: integer
        description: The number of cities actually returned in the cities array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/cities?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/cities?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/cities?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/cities?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCity:
    description: A city that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
  RegionCityWithWarnings:
    description: A city that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this city.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this city.
        example: https://www.seattlebandmap.com/api/locations/cities/123
      name:
        type: string
        description: The name of this city.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCityPost:
    description: An existing city to add to this region, or a new city to create and add.  Specify an existing city by id or name.  If no id is specified and no city with the specified name exists, a new city will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing city to add to this region.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to add to this region, or the name of a new city to create and add.  Names for new cities must be unique.
        minLength: 1
        example: Seattle
  RegionCityPatch:
    description: An existing city to modify, or a new city to create.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  The name of an existing city can be changed by specifying the city by id, along with the new name.  In any case, if the city is not already associated with this region, the city will be added to the region.
    properties:
      id:
        type: integer
        description: The ID of an existing city to modify.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to add to this region or modify, or the name of a new city to create and add.
        minLength: 1
        example: Seattle
  RegionCityPut:
    description: 'An existing city to replace, or a new city to create.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing city by id or name.  If no id is specified, and no city exists with the specified name, a new city will be created.  In any case, the created or replaced city will be added to this region if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing city to replace.
        minimum: 0
      name:
        type: string
        description: The name of an existing city to replace, the name of a new city to create, or if an existing city was specified by id, the new name for the replacement city.
        minLength: 1
        example: Seattle
  RegionCityPatchOne:
    description: The new fields on the existing city to modify.
    properties:
      name:
        type: string
        description: An optional new name for this city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCityPutOne:
    description: 'A new city to replace the previous one.  BEWARE: When replacing an existing city, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new city.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        example: Seattle
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionStates:
    description: The collection of states/provinces/prefectures that belong to or are located in this region.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this states collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/regions/123/states?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first state in the collection that is being returned in the states array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of states that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of states in this collection, or if a 'filter' argument was given, the total number of states after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      states:
        type: array
        items:
          $ref: '#/definitions/RegionState'
      statesCount:
        type: integer
        description: The number of states actually returned in the states array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/states?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/states?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/states?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/states?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionState:
    description: A state/province/prefecture that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this state.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state.
        minLength: 1
        maxLength: 255
        example: WA
  RegionStateWithWarnings:
    description: A state/province/prefecture that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this state.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this state.
        example: https://www.seattlebandmap.com/api/locations/states/123
      name:
        type: string
        description: The name of this state.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionStatePost:
    description: An existing state to add to this region, or a new state to create and add.  Specify an existing state by id or name.  If no id is specified and no state with the specified name exists, a new state will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing state to add to this region.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to add to this region, or the name of a new state to create and add.  Names for new states must be unique.
        minLength: 1
        maxLength: 255
        example: WA
  RegionStatePatch:
    description: An existing state to modify, or a new state to create.  Specify an existing state by id or name.  If no id is specified, and no state exists with the specified name, a new state will be created.  The name of an existing state can be changed by specifying the state by id, along with the new name.  In any case, if the state is not already associated with this region, the state will be added to the region.
    properties:
      id:
        type: integer
        description: The ID of an existing state to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to add to this region or modify, or the name of a new state to create and add.
        minLength: 1
        maxLength: 255
        example: WA
  RegionStatePut:
    description: 'An existing state to replace, or a new state to create.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing state by id or name.  If no id is specified, and no state exists with the specified name, a new state will be created.  In any case, the created or replaced state will be added to this region if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing state to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing state to replace, the name of a new state to create, or if an existing state was specified by id, the new name for the replacement state.
        minLength: 1
        maxLength: 255
        example: WA
  RegionStatePatchOne:
    description: The new fields on the existing state to modify.
    properties:
      name:
        type: string
        description: An optional new name for this state.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionStatePutOne:
    description: 'A new state to replace the previous one.  BEWARE: When replacing an existing state, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new state.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: WA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCountries:
    description: The collection of countries that belong to or are located in this region.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this countries collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/regions/123/countries?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first country in the collection that is being returned in the countries array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of countries that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of countries in this collection, or if a 'filter' argument was given, the total number of countries after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      countries:
        type: array
        items:
          $ref: '#/definitions/RegionCountry'
      countriesCount:
        type: integer
        description: The number of countries actually returned in the countries array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/countries?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/countries?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/countries?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/countries?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCountry:
    description: A country that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this country.
        example: https://www.seattlebandmap.com/api/locations/countries/123
      name:
        type: string
        description: The name of this country.
        minLength: 1
        maxLength: 255
        example: USA
  RegionCountryWithWarnings:
    description: A country that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this country.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this country.
        example: https://www.seattlebandmap.com/api/locations/countries/123
      name:
        type: string
        description: The name of this country.
        minLength: 1
        maxLength: 255
        example: USA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCountryPost:
    description: An existing country to add to this region, or a new country to create and add.  Specify an existing country by id or name.  If no id is specified and no country with the specified name exists, a new country will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing country to add to this region.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing country to add to this region, or the name of a new country to create and add.  Names for new countries must be unique.
        minLength: 1
        maxLength: 255
        example: USA
  RegionCountryPatch:
    description: An existing country to modify, or a new country to create.  Specify an existing country by id or name.  If no id is specified, and no country exists with the specified name, a new country will be created.  The name of an existing country can be changed by specifying the country by id, along with the new name.  In any case, if the country is not already associated with this region, the country will be added to the region.
    properties:
      id:
        type: integer
        description: The ID of an existing country to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing country to add to this region or modify, or the name of a new country to create and add.
        minLength: 1
        maxLength: 255
        example: USA
  RegionCountryPut:
    description: 'An existing country to replace, or a new country to create.  BEWARE: When replacing an existing country, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing country by id or name.  If no id is specified, and no country exists with the specified name, a new country will be created.  In any case, the created or replaced country will be added to this region if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing country to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing country to replace, the name of a new country to create, or if an existing country was specified by id, the new name for the replacement country.
        minLength: 1
        maxLength: 255
        example: USA
  RegionCountryPatchOne:
    description: The new fields on the existing country to modify.
    properties:
      name:
        type: string
        description: An optional new name for this country.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: USA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionCountryPutOne:
    description: 'A new country to replace the previous one.  BEWARE: When replacing an existing country, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new country.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: USA
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionRegions:
    description: The collection of other regions that belong to or are located in this region.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this regions collection or collection segment.
        example: https://www.seattlebandmap.com/api/locations/regions/123/regions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first region in the collection that is being returned in the regions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of regions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of regions in this collection, or if a 'filter' argument was given, the total number of regions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      regions:
        type: array
        items:
          $ref: '#/definitions/RegionRegion'
      regionsCount:
        type: integer
        description: The number of regions actually returned in the regions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/regions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/regions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/locations/regions/123/regions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/locations/regions/123/regions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionRegion:
    description: Another region that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  RegionRegionWithWarnings:
    description: Another region that belongs to or is located in this region.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this region.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this region.
        example: https://www.seattlebandmap.com/api/locations/regions/123
      name:
        type: string
        description: The name of this region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionRegionPost:
    description: An existing region to add to this region, or a new region to create and add.  Specify an existing region by id or name.  If no id is specified and no region with the specified name exists, a new region will be created and added.
    properties:
      id:
        type: integer
        description: The ID of an existing region to add to this region.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this region, or the name of a new region to create and add.  Names for new regions must be unique.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  RegionRegionPatch:
    description: An existing region to modify, or a new region to create.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  The name of an existing region can be changed by specifying the region by id, along with the new name.  In any case, if the region is not already associated with this region, the region will be added to the region.
    properties:
      id:
        type: integer
        description: The ID of an existing region to modify.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to add to this region or modify, or the name of a new region to create and add.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  RegionRegionPut:
    description: 'An existing region to replace, or a new region to create.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing region by id or name.  If no id is specified, and no region exists with the specified name, a new region will be created.  In any case, the created or replaced region will be added to this region if they were not already associated.'
    properties:
      id:
        type: integer
        description: The ID of an existing region to replace.
        minimum: 0
        example: 123
      name:
        type: string
        description: The name of an existing region to replace, the name of a new region to create, or if an existing region was specified by id, the new name for the replacement region.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
  RegionRegionPatchOne:
    description: The new fields on the existing region to modify.
    properties:
      name:
        type: string
        description: An optional new name for this region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RegionRegionPutOne:
    description: 'A new region to replace the previous one.  BEWARE: When replacing an existing region, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      name:
        type: string
        description: The name of the new region.  Names must be unique.  If a name is specified that already exists, Band Map will attempt to add a suffix to the new name to make it unique, or return an error if no suitable suffix can be found.  On a successful creation, the name returned in the response will be the final chosen name, including the suffix if one was added.
        minLength: 1
        maxLength: 255
        example: Pacific Northwest
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Edits:
    description: The collection of edit transactions.  An edit is one successful  HTTP POST, PATCH, PUT, or DELETE call performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this edits collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/edits?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first edit in the collection that is being returned in the edits array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of edits that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of edits in this collection, or if a 'filter' argument was given, the total number of edits after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      edits:
        type: array
        items:
          $ref: '#/definitions/Edit'
      editsCount:
        type: integer
        description: The number of edits actually returned in the edits array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Edit:
    description: An edit transaction (successful HTTP POST, PATCH, PUT, or DELETE call) performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically created by Band Map and can't be created or modified manually through the API, only read and deleted.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this edit HTTP transaction completed.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      editor:
        description: The editor associated with this edit.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      revisions:
        type: array
        description: An array containing the revisions associated with this edit.
        minItems: 1
        uniqueItems: true
        items:
          description: A revision associated with this edit.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The total number of revisions made for this edit.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations associated with this edit.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this edit.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations associated with this edit.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      request:
        type: string
        description: The full text of the HTTP request that initiated this edit transaction.
        example: 'POST /bands HTTP/1.1\nContent-Length: 19\n\n{"name":"New Band"}'
      session:
        description: The session associated with this edit.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this session.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this session.
            example: https://www.seattlebandmap.com/api/sessions/123
  EditWithWarnings:
    description: An edit transaction (successful HTTP POST, PATCH, PUT, or DELETE call) performed by a Band Map user.  Edits are made up of one or more revisions.  Edit records are automatically created by Band Map and can't be created or modified manually through the API, only read and deleted.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this edit HTTP transaction completed.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      editor:
        description: The editor associated with this edit.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      revisions:
        type: array
        description: An array containing the revisions associated with this edit.
        minItems: 1
        uniqueItems: true
        items:
          description: A revision associated with this edit.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The total number of revisions made for this edit.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations associated with this edit.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this edit.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations associated with this edit.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      request:
        type: string
        description: The full text of the HTTP request that initiated this edit transaction.
        example: 'POST /bands HTTP/1.1\nContent-Length: 19\n\n{"name":"New Band"}'
      session:
        description: The session associated with this edit.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this session.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this session.
            example: https://www.seattlebandmap.com/api/sessions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditRevisions:
    description: The collection of revisions associated with this edit.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this revisions collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/revisions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first revision in the collection that is being returned in the revisions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of revisions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of revisions in this collection, or if a 'filter' argument was given, the total number of revisions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      revisions:
        type: array
        items:
          $ref: '#/definitions/EditRevision'
      revisionsCount:
        type: integer
        description: The number of revisions actually returned in the revisions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/revisions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/revisions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/revisions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/revisions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditRevision:
    description: A revision associated with this edit.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
  EditRevisionWithWarnings:
    description: A revision associated with this edit.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditAnnotations:
    description: The collection of annotations associated with this edit.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/EditAnnotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditAnnotation:
    description: A annotation associated with this edit.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
  EditAnnotationWithWarnings:
    description: A annotation associated with this edit.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Editors:
    description: The collection of editors.  An editor is an anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.  Editor records are automatically tracked by Band Map and can't be created or modified manually through the API, only read and deleted.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this editors collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/editors?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first editor in the collection that is being returned in the editors array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of editors that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of editors in this collection, or if a 'filter' argument was given, the total number of editors after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      editors:
        type: array
        items:
          $ref: '#/definitions/Editor'
      editorsCount:
        type: integer
        description: The number of editors actually returned in the editors array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Editor:
    description: An anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this editor.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this editor.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123
      name:
        type: string
        description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
        minLength: 1
        example: bandmapuser
      edits:
        type: array
        description: An array containing the edits associated with this editor.
        minItems: 1
        uniqueItems: true
        items:
          description: A edit associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The total number of edits made by this editor.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array containing the revisions associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The total number of revisions made by this editor.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations made by this editor.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      user:
        description: The user associated with this editor.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this user.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this user.
            example: https://www.seattlebandmap.com/api/users/123
          username:
            type: string
            description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
            minLength: 1
            maxLength: 255
            example: bandmapuser
      ipAddress:
        type: string
        description: The IP address this editor most edited from.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last edit made by this user.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      sessions:
        type: array
        description: An array containing the sessions associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A session associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this session.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this session.
              example: https://www.seattlebandmap.com/api/sessions/123
      sessionsCount:
        type: integer
        description: The total number of sessions logged by this editor.  Should be equal to sessions.length.
        minimum: 0
        example: 123
  EditorWithWarnings:
    description: An anonymous or registered Band Map editor who has performed one or more edits on the Band Map info.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this editor.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this editor.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123
      name:
        type: string
        description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
        minLength: 1
        example: bandmapuser
      edits:
        type: array
        description: An array containing the edits associated with this editor.
        minItems: 1
        uniqueItems: true
        items:
          description: A edit associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The total number of edits made by this editor.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array containing the revisions associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The total number of revisions made by this editor.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations made by this editor.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      user:
        description: The user associated with this editor.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this user.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this user.
            example: https://www.seattlebandmap.com/api/users/123
          username:
            type: string
            description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
            minLength: 1
            maxLength: 255
            example: bandmapuser
      ipAddress:
        type: string
        description: The IP address this editor most edited from.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last edit made by this user.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      sessions:
        type: array
        description: An array containing the sessions associated with this editor.
        minItems: 0
        uniqueItems: true
        items:
          description: A session associated with this editor.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this session.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this session.
              example: https://www.seattlebandmap.com/api/sessions/123
      sessionsCount:
        type: integer
        description: The total number of sessions logged by this editor.  Should be equal to sessions.length.
        minimum: 0
        example: 123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorEdits:
    description: The collection of edits associated with this editor.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this edits collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/edits?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first edit in the collection that is being returned in the edits array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of edits that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of edits in this collection, or if a 'filter' argument was given, the total number of edits after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      edits:
        type: array
        items:
          $ref: '#/definitions/EditorEdit'
      editsCount:
        type: integer
        description: The number of edits actually returned in the edits array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/edits?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/edits?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/edits?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/edits?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorEdit:
    description: A edit associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
  EditorEditWithWarnings:
    description: A edit associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorRevisions:
    description: The collection of revisions associated with this editor.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this revisions collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/revisions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first revision in the collection that is being returned in the revisions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of revisions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of revisions in this collection, or if a 'filter' argument was given, the total number of revisions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      revisions:
        type: array
        items:
          $ref: '#/definitions/EditorRevision'
      revisionsCount:
        type: integer
        description: The number of revisions actually returned in the revisions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/revisions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/revisions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/revisions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/revisions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorRevision:
    description: A revision associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
  EditorRevisionWithWarnings:
    description: A revision associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorAnnotations:
    description: The collection of annotations associated with this editor.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/EditorAnnotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorAnnotation:
    description: A annotation associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
  EditorAnnotationWithWarnings:
    description: A annotation associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorSessions:
    description: The collection of sessions associated with this editor.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this sessions collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/sessions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first session in the collection that is being returned in the sessions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of sessions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of sessions in this collection, or if a 'filter' argument was given, the total number of sessions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      sessions:
        type: array
        items:
          $ref: '#/definitions/EditorSession'
      sessionsCount:
        type: integer
        description: The number of sessions actually returned in the sessions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/sessions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/sessions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/sessions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/editors/123/sessions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  EditorSession:
    description: A session associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
  EditorSessionWithWarnings:
    description: A session associated with this editor.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Revisions:
    description: The collection of revisions.  A revision is a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this revisions collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/revisions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first revision in the collection that is being returned in the revisions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of revisions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of revisions in this collection, or if a 'filter' argument was given, the total number of revisions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      revisions:
        type: array
        items:
          $ref: '#/definitions/Revision'
      revisionsCount:
        type: integer
        description: The number of revisions actually returned in the revisions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/revisions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/revisions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/revisions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/revisions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Revision:
    description: A record of a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      edit:
        description: The edit associated with this revision.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this edit.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this edit.
            example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editor:
        description: The editor associated with this revision.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      type:
        type: string
        description: The type of database transaction this revision involved.
        enum:
        - insert
        - update
        - delete
        example: insert
      oldFact:
        type: string
        description: The previous fact recorded before this revision.  Only present for updates and deletes.
        example: Ben Ireland is a guitarist in Love Battery.
      newFact:
        type: string
        description: The new fact recorded after this revision.  Only present for inserts and updates.
        example: Ben Ireland is a drummer in Love Battery.
      annotations:
        type: array
        description: An array containing the annotations associated with this revision.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this revision.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations associated with this revision.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      table:
        type: string
        description: The database table affected by this revision.
        example: band_person_roles
      column:
        type: string
        description: The database table column affected by this revision.
        example: role_id
      row:
        type: string
        description: The database table row affected by this revision.  In case of tables with composite id columns, the row ids are comma-delimited.
        example: 123,456
      oldValue:
        type: string
        description: The previous value of the cell affected by this revision.  Only present for updates and deletes.
        example: '2'
      newValue:
        type: string
        description: The new value of the cell affected by this revision.  Only present for inserts and updates.
        example: '3'
  RevisionWithWarnings:
    description: A record of a single discrete fact addition or modification to the Band Map database, including a reference to the database cell involved and the edit it was a part of, and the cell contents before and after the revision.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      edit:
        description: The edit associated with this revision.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this edit.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this edit.
            example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editor:
        description: The editor associated with this revision.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      type:
        type: string
        description: The type of database transaction this revision involved.
        enum:
        - insert
        - update
        - delete
        example: insert
      oldFact:
        type: string
        description: The previous fact recorded before this revision.  Only present for updates and deletes.
        example: Ben Ireland is a guitarist in Love Battery.
      newFact:
        type: string
        description: The new fact recorded after this revision.  Only present for inserts and updates.
        example: Ben Ireland is a drummer in Love Battery.
      annotations:
        type: array
        description: An array containing the annotations associated with this revision.
        minItems: 0
        uniqueItems: true
        items:
          description: A annotation associated with this revision.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The total number of annotations associated with this revision.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      table:
        type: string
        description: The database table affected by this revision.
        example: band_person_roles
      column:
        type: string
        description: The database table column affected by this revision.
        example: role_id
      row:
        type: string
        description: The database table row affected by this revision.  In case of tables with composite id columns, the row ids are comma-delimited.
        example: 123,456
      oldValue:
        type: string
        description: The previous value of the cell affected by this revision.  Only present for updates and deletes.
        example: '2'
      newValue:
        type: string
        description: The new value of the cell affected by this revision.  Only present for inserts and updates.
        example: '3'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RevisionAnnotations:
    description: The collection of annotations associated with this revision.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/RevisionAnnotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  RevisionAnnotation:
    description: A annotation associated with this revision.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
  RevisionAnnotationWithWarnings:
    description: A annotation associated with this revision.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Annotations:
    description: The collection of annotations.  An annotation is an additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/Annotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Annotation:
    description: An additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.  POSTed annotations require a revision to be tied to.  Only the "description" field of an annotation is mutable after an initial POST.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      edit:
        description: The edit associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this edit.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this edit.
            example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editor:
        description: The editor associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      fact:
        type: string
        description: The fact this is an annotation for.  A convenience field so that you don't have to look up the fact through the revision.
        example: Ben Ireland is a drummer in Love Battery.
      revision:
        description: The revision associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this revision.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this revision.
            example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      infoSource:
        description: The source for this annotation, if it is a fact citation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this info source.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this info source.
            example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      url:
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this annotation was made.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
  AnnotationWithWarnings:
    description: An additional comment, usually an info source citation, associated with one discrete revision to the Band Map info.  POSTed annotations require a revision to be tied to.  Only the "description" field of an annotation is mutable after an initial POST.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      edit:
        description: The edit associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this edit.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this edit.
            example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editor:
        description: The editor associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this editor.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this editor.
            example: https://www.seattlebandmap.com/api/edit-history/editors/123
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      fact:
        type: string
        description: The fact this is an annotation for.  A convenience field so that you don't have to look up the fact through the revision.
        example: Ben Ireland is a drummer in Love Battery.
      revision:
        description: The revision associated with this annotation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this revision.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this revision.
            example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      infoSource:
        description: The source for this annotation, if it is a fact citation.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this info source.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this info source.
            example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      url:
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this annotation was made.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  AnnotationPost:
    description: A new annotation to create.
    required:
    - revision
    properties:
      edit:
        description: The edit to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing edit to add to this annotation.
            minimum: 0
      editor:
        description: The editor to associate with this annotation.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The ID of an existing editor to add to this annotation.
            minimum: 0
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      revision:
        description: The revision to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing revision to add to this annotation.
            minimum: 0
      infoSource:
        description: The info source to associate with this annotation.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this annotation.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      url:
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this annotation was made.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
  AnnotationPatch:
    description: An existing annotation to modify, or a new annotation to create.  Specify an existing annotation by id.  If no id is specified, a new annotation will be created.
    properties:
      id:
        type: integer
        description: The ID of an existing annotation to modify.
        minimum: 0
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
  AnnotationPut:
    description: 'An existing annotation to replace, or a new annotation to create.  BEWARE: When replacing an existing annotation, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing annotation by id.'
    required:
    - revision
    properties:
      id:
        type: integer
        description: The ID of an existing annotation to replace.
        minimum: 0
      edit:
        description: The edit to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing edit to add to this annotation.
            minimum: 0
      editor:
        description: The editor to associate with this annotation.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The ID of an existing editor to add to this annotation.
            minimum: 0
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      revision:
        description: The revision to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing revision to add to this annotation.
            minimum: 0
      infoSource:
        description: The info source to associate with this annotation.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this annotation.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      url:
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this annotation was made.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
  AnnotationPatchOne:
    description: The new fields on the existing annotation to modify.
    properties:
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  AnnotationPutOne:
    description: 'A new annotation to replace the previous one.  BEWARE: When replacing an existing annotation, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    required:
    - revision
    properties:
      edit:
        description: The edit to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing edit to add to this annotation.
            minimum: 0
      editor:
        description: The editor to associate with this annotation.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The ID of an existing editor to add to this annotation.
            minimum: 0
          name:
            type: string
            description: The name of this editor.  This will be the username for registered editors, or the ip address for anonymous editors.
            minLength: 1
            example: bandmapuser
      revision:
        description: The revision to associate with this annotation.  Specify by id.
        properties:
          id:
            type: integer
            description: The ID of an existing revision to add to this annotation.
            minimum: 0
      infoSource:
        description: The info source to associate with this annotation.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this annotation.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      url:
        type: string
        description: An absolute URL linking to the source or citation for this annotation.  This is usually more specific (a specific page or API request) than the related info source URL.
        example: https://www.bandnewswebsite.com/posts/123
      fullRequest:
        type: string
        description: A copy of the full text of the HTTP request made for citing this annotation.  This is mostly for use by curator bots for when info retrieval required a POST or some kind of more complicated lookup, and it provides for recording the whole HTTP request text needed to verify the annotation.  This should hopefully be unnecessary for human user-supplied annotations.
        example: 'POST /lookup HTTP/1.1\nHost: www.bandnewswebsite.com\nContent-Length: 24\n\n{"bandName":"Some Band"}'
      datetime:
        type: string
        format: dateTime
        description: 'The date and time this annotation was made.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      description:
        type: string
        description: A free-form citation or additional info related to the associated fact/revision.
        minLength: 1
        example: 'Lastname, Firstname. "Article About The Band".  Band News Website.  Published: 1980-04-20T06:09:00-08:00.  Blog Post: https://www.bandnewswebsite.com/posts/123.  Accessed: 1980-04-20T06:09:30-08:00.  Clip: "...this new guitarist Guitarist Name joined The Band today..."'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSources:
    description: The collection of info sources, usually websites, for information about bands, people, or anything else found on Band Map.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this info sources collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first info source in the collection that is being returned in the info sources array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of info sources that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of info sources in this collection, or if a 'filter' argument was given, the total number of info sources after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      infoSources:
        type: array
        items:
          $ref: '#/definitions/InfoSource'
      infoSourcesCount:
        type: integer
        description: The number of info sources actually returned in the info sources array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSource:
    description: A source, usually a website, for information about bands, people, or anything else found on Band Map.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this info source.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this info source.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.  This field will only be present if a value was entered.
        example: Band Name on Social Media Website
      parent:
        description: The parent or containing source for this info source, if one exists.  For example, the Songkick website is the parent of Songkick band and event pages.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this info source.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this info source.
            example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        minItems: 0
        uniqueItems: true
        items:
          description: A child info source for this info source.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this info source.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this info source.
              example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      childrenCount:
        type: integer
        description: The total number of child info sources for this info source.  Should be equal to children.length.
        minimum: 0
        example: 123
      tags:
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: 'A tag describing a category or attribute of this info source.  Band Map attempts to store all tags in a "lower-case-dashed-canonical-format" and makes conversions on newly submitted tags to canonical form like so: TitleCase -> titlecase; camelCase -> camelcase; lowercaseword -> lowercaseword; three word tag -> three-word-tag; underscored_tag -> underscored-tag, so you probably want to submit new tags with words separated by dash, space, or underscore.  Once a tag is created, subsequent lookups are done by removing all dashes, underscores, and spaces, and converting to lower case, then mapping from the lower case to the actual tag, so for example the following mappings apply: yourmultiwordtag -> your-multi-word-tag; your multi word tag -> your-multi-word-tag; YourMultiWordTag -> your-multi-word-tag; yo-urm-ult_iw-o_rdT-Ag -> your-multi-word-tag.'
          type: string
          minLength: 1
          example: wikipedia-band-page
      tagsCount:
        type: integer
        description: The total number of tags for this info source.  Should be equal to tags.length.
        minimum: 0
        example: 123
  InfoSourceWithWarnings:
    description: A source, usually a website, for information about bands, people, or anything else found on Band Map.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this info source.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this info source.
        example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.  This field will only be present if a value was entered.
        example: Band Name on Social Media Website
      parent:
        description: The parent or containing source for this info source, if one exists.  For example, the Songkick website is the parent of Songkick band and event pages.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this info source.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this info source.
            example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        minItems: 0
        uniqueItems: true
        items:
          description: A child info source for this info source.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this info source.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this info source.
              example: https://www.seattlebandmap.com/api/edit-history/info-sources/123
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      childrenCount:
        type: integer
        description: The total number of child info sources for this info source.  Should be equal to children.length.
        minimum: 0
        example: 123
      tags:
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: 'A tag describing a category or attribute of this info source.  Band Map attempts to store all tags in a "lower-case-dashed-canonical-format" and makes conversions on newly submitted tags to canonical form like so: TitleCase -> titlecase; camelCase -> camelcase; lowercaseword -> lowercaseword; three word tag -> three-word-tag; underscored_tag -> underscored-tag, so you probably want to submit new tags with words separated by dash, space, or underscore.  Once a tag is created, subsequent lookups are done by removing all dashes, underscores, and spaces, and converting to lower case, then mapping from the lower case to the actual tag, so for example the following mappings apply: yourmultiwordtag -> your-multi-word-tag; your multi word tag -> your-multi-word-tag; YourMultiWordTag -> your-multi-word-tag; yo-urm-ult_iw-o_rdT-Ag -> your-multi-word-tag.'
          type: string
          minLength: 1
          example: wikipedia-band-page
      tagsCount:
        type: integer
        description: The total number of tags for this info source.  Should be equal to tags.length.
        minimum: 0
        example: 123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSourcePost:
    description: A new info source to create.
    properties:
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.
        example: Band Name on Social Media Website
      parent:
        description: The info source to associate with this info source.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this info source.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source to add to this info source, or a new info source to create and add.  Specify an existing info source by id or url.  If no id is specified and no info source with the specified url exists, a new info source will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing info source to add to this info source.
              minimum: 0
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      tags:
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source tag to add to this info source, or a new info source tag to create and add.  Specify an existing info source tag by string.
          type: string
          minLength: 1
          example: wikipedia-band-page
  InfoSourcePatch:
    description: An existing info source to modify, or a new info source to create.  Specify an existing info source by id or url.  If no id is specified, and no info source exists with the specified url, a new info source will be created.  The url of an existing info source can be changed by specifying the info source by id, along with the new url.
    properties:
      id:
        type: integer
        description: The ID of an existing info source to modify.
        minimum: 0
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.
        example: Band Name on Social Media Website
      parent:
        description: The info source to associate with this info source.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this info source.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.  If specified for an existing info source, this array will completely replace the existing info sources with the new info sources for this info source.  To instead add or remove info sources individually to/from the info source, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source to add to this info source, or a new info source to create and add.  Specify an existing info source by id or url.  If no id is specified and no info source with the specified url exists, a new info source will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing info source to add to this info source.
              minimum: 0
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      tags:
        type: array
        description: An array containing the tags associated with this info source.  If specified for an existing info source, this array will completely replace the existing info source tags with the new info source tags for this info source.  To instead add or remove info source tags individually to/from the info source, POST or DELETE respectively to the nested sub-URL representing this array.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source tag to add to this info source, or a new info source tag to create and add.  Specify an existing info source tag by string.
          type: string
          minLength: 1
          example: wikipedia-band-page
  InfoSourcePut:
    description: 'An existing info source to replace, or a new info source to create.  BEWARE: When replacing an existing info source, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing info source by id or url.'
    properties:
      id:
        type: integer
        description: The ID of an existing info source to replace.
        minimum: 0
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.
        example: Band Name on Social Media Website
      parent:
        description: The info source to associate with this info source.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this info source.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source to add to this info source, or a new info source to create and add.  Specify an existing info source by id or url.  If no id is specified and no info source with the specified url exists, a new info source will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing info source to add to this info source.
              minimum: 0
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      tags:
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source tag to add to this info source, or a new info source tag to create and add.  Specify an existing info source tag by string.
          type: string
          minLength: 1
          example: wikipedia-band-page
  InfoSourcePatchOne:
    description: The new fields on the existing info source to modify.
    properties:
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.
        example: Band Name on Social Media Website
      parent:
        description: The info source to associate with this info source.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this info source.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.  If specified, this array will completely replace the existing info sources with the new info sources for this info source.  To instead add or remove info sources individually to/from the info source, POST or DELETE respectively to the nested sub-URL representing this array.
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source to add to this info source, or a new info source to create and add.  Specify an existing info source by id or url.  If no id is specified and no info source with the specified url exists, a new info source will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing info source to add to this info source.
              minimum: 0
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      tags:
        type: array
        description: An array containing the tags associated with this info source.  If specified, this array will completely replace the existing info source tags with the new info source tags for this info source.  To instead add or remove info source tags individually to/from the info source, POST or DELETE respectively to the nested sub-URL representing this array.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source tag to add to this info source, or a new info source tag to create and add.  Specify an existing info source tag by string.
          type: string
          minLength: 1
          example: wikipedia-band-page
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSourcePutOne:
    description: 'A new info source to replace the previous one.  BEWARE: When replacing an existing info source, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    properties:
      url:
        type: string
        description: The URL of this info source.
        minLength: 1
        example: https://www.socialmediawebsite.com/bands/band-name
      description:
        type: string
        description: A description of this info source.
        example: Band Name on Social Media Website
      parent:
        description: The info source to associate with this info source.  Specify by id or url.
        properties:
          id:
            type: integer
            description: The ID of an existing info source to add to this info source.
            minimum: 0
          url:
            type: string
            description: The URL of this info source.
            minLength: 1
            example: https://www.socialmediawebsite.com/bands/band-name
      children:
        type: array
        description: An array of the child or contained sources for this info source, if any exist.  For example, Songkick band and event pages are children of the Songkick website.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source to add to this info source, or a new info source to create and add.  Specify an existing info source by id or url.  If no id is specified and no info source with the specified url exists, a new info source will be created and added.
          properties:
            id:
              type: integer
              description: The ID of an existing info source to add to this info source.
              minimum: 0
            url:
              type: string
              description: The URL of this info source.
              minLength: 1
              example: https://www.socialmediawebsite.com/bands/band-name
      tags:
        type: array
        description: An array containing the tags associated with this info source.
        default: []
        minItems: 0
        uniqueItems: true
        items:
          description: An existing info source tag to add to this info source, or a new info source tag to create and add.  Specify an existing info source tag by string.
          type: string
          minLength: 1
          example: wikipedia-band-page
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSourceTags:
    description: The collection of info source tags describing categories or attributes of info sources.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this info source tags collection or collection segment.
        example: https://www.seattlebandmap.com/api/edit-history/info-source-tags?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first info source tag in the collection that is being returned in the info source tags array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of info source tags that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of info source tags in this collection, or if a 'filter' argument was given, the total number of info source tags after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      infoSourceTags:
        type: array
        items:
          $ref: '#/definitions/InfoSourceTag'
      infoSourceTagsCount:
        type: integer
        description: The number of info source tags actually returned in the info source tags array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/info-source-tags?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/info-source-tags?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/edit-history/info-source-tags?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/edit-history/info-source-tags?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  InfoSourceTag:
    type: string
    minLength: 1
    description: 'A tag describing a category or attribute of an info source.  Band Map attempts to store all tags in a "lower-case-dashed-canonical-format" and makes conversions on newly submitted tags to canonical form like so: TitleCase -> titlecase; camelCase -> camelcase; lowercaseword -> lowercaseword; three word tag -> three-word-tag; underscored_tag -> underscored-tag, so you probably want to submit new tags with words separated by dash, space, or underscore.  Once a tag is created, subsequent lookups are done by removing all dashes, underscores, and spaces, and converting to lower case, then mapping from the lower case to the actual tag, so for example the following mappings apply: yourmultiwordtag -> your-multi-word-tag; your multi word tag -> your-multi-word-tag; YourMultiWordTag -> your-multi-word-tag; yo-urm-ult_iw-o_rdT-Ag -> your-multi-word-tag.'
    example: wikipedia-band-page
  InfoSourceTagPost:
    type: string
    minLength: 1
    description: 'A new info source tag to create.  Band Map attempts to store all tags in a "lower-case-dashed-canonical-format" and makes conversions on newly submitted tags to canonical form like so: TitleCase -> titlecase; camelCase -> camelcase; lowercaseword -> lowercaseword; three word tag -> three-word-tag; underscored_tag -> underscored-tag, so you probably want to submit new tags with words separated by dash, space, or underscore.  Once a tag is created, subsequent lookups are done by removing all dashes, underscores, and spaces, and converting to lower case, then mapping from the lower case to the actual tag, so for example the following mappings apply: yourmultiwordtag -> your-multi-word-tag; your multi word tag -> your-multi-word-tag; YourMultiWordTag -> your-multi-word-tag; yo-urm-ult_iw-o_rdT-Ag -> your-multi-word-tag.'
    example: wikipedia-band-page
  Users:
    description: The collection of registered Band Map users.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this users collection or collection segment.
        example: https://www.seattlebandmap.com/api/users?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first user in the collection that is being returned in the users array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of users that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of users in this collection, or if a 'filter' argument was given, the total number of users after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      usersCount:
        type: integer
        description: The number of users actually returned in the users array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  User:
    description: A registered Band Map user.  Users do not have to register to browse or edit Band Map info, but if they do they can track their personal editing histories and get credit for their contributions.  Administrators have to register for extra privileges and access.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this user.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this user.
        example: https://www.seattlebandmap.com/api/users/123
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      isVerified:
        type: boolean
        description: True if this user has confirmed their email address and logged in successfully once with their password.
        example: true
      person:
        description: The person record associated with this user, if such an association exists.  Users might want to be associated with their person record for example if a band member of a band in Band Map also uses the Band Map app.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this person.
            example: https://www.seattlebandmap.com/api/people/123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
      edits:
        type: array
        description: An array of the most recent 10000 edits to Band Map info made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: An edit made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The number of edits returned for this user.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The number of revisions returned for this user.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array of the most recent 10000 annotations to Band Map facts made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: An annotation to a Band Map fact made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The number of annotations returned for this user.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      sessions:
        type: array
        description: An array of the most recent 10000 sessions logged on the Band Map website by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: A session logged on the Band Map website by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this session.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this session.
              example: https://www.seattlebandmap.com/api/sessions/123
      sessionsCount:
        type: integer
        description: The number of sessions returned for this user.  Should be equal to sessions.length.
        minimum: 0
        example: 123
      isDeleted:
        type: boolean
        description: True if this user has deleted their registration, but we need to keep the user record so session and edit relations are still coherent.  This field appears for admin requests only.
        example: true
  UserWithWarnings:
    description: A registered Band Map user.  Users do not have to register to browse or edit Band Map info, but if they do they can track their personal editing histories and get credit for their contributions.  Administrators have to register for extra privileges and access.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this user.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this user.
        example: https://www.seattlebandmap.com/api/users/123
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      isVerified:
        type: boolean
        description: True if this user has confirmed their email address and logged in successfully once with their password.
        example: true
      person:
        description: The person record associated with this user, if such an association exists.  Users might want to be associated with their person record for example if a band member of a band in Band Map also uses the Band Map app.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          link:
            type: string
            description: The stable, absolute URL linking to this person.
            example: https://www.seattlebandmap.com/api/people/123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
      edits:
        type: array
        description: An array of the most recent 10000 edits to Band Map info made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: An edit made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The number of edits returned for this user.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The number of revisions returned for this user.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array of the most recent 10000 annotations to Band Map facts made by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: An annotation to a Band Map fact made by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The number of annotations returned for this user.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      sessions:
        type: array
        description: An array of the most recent 10000 sessions logged on the Band Map website by this user.
        minItems: 0
        uniqueItems: true
        items:
          description: A session logged on the Band Map website by this user.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this session.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this session.
              example: https://www.seattlebandmap.com/api/sessions/123
      sessionsCount:
        type: integer
        description: The number of sessions returned for this user.  Should be equal to sessions.length.
        minimum: 0
        example: 123
      isDeleted:
        type: boolean
        description: True if this user has deleted their registration, but we need to keep the user record so session and edit relations are still coherent.  This field appears for admin requests only.
        example: true
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserPost:
    description: A new user to create.
    required:
    - username
    - appRole
    - identityType
    properties:
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      person:
        description: The person to associate with this user.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
  UserPatch:
    description: An existing user to modify, or a new user to create.  Specify an existing user by id or username.  If no id is specified, and no user exists with the specified username, a new user will be created.  The username of an existing user can be changed by specifying the user by id, along with the new username.
    properties:
      id:
        type: integer
        description: The ID of an existing user to modify.
        minimum: 0
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      oldPassword:
        type: string
        description: A confirmation field to double-check the user's old hashed and salted password key for PATCHing password changes (with security precautions like the 'password' field).
        minLength: 8
      person:
        description: The person to associate with this user.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
  UserPut:
    description: 'An existing user to replace, or a new user to create.  BEWARE: When replacing an existing user, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.  Specify an existing user by id or username.'
    required:
    - username
    - appRole
    - identityType
    properties:
      id:
        type: integer
        description: The ID of an existing user to replace.
        minimum: 0
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      oldPassword:
        type: string
        description: A confirmation field to double-check the user's old hashed and salted password key for PATCHing password changes (with security precautions like the 'password' field).
        minLength: 8
      person:
        description: The person to associate with this user.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
  UserPatchOne:
    description: The new fields on the existing user to modify.
    properties:
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      oldPassword:
        type: string
        description: A confirmation field to double-check the user's old hashed and salted password key for PATCHing password changes (with security precautions like the 'password' field).
        minLength: 8
      person:
        description: The person to associate with this user.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserPutOne:
    description: 'A new user to replace the previous one.  BEWARE: When replacing an existing user, ALL FIELDS WILL BE RETURNED TO DEFAULTS IF NEW VALUES ARE NOT SPECIFIED.'
    required:
    - username
    - appRole
    - identityType
    properties:
      username:
        type: string
        description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
        minLength: 1
        maxLength: 255
        example: bandmapuser
      appRole:
        type: string
        description: The role of this user in the Band Map app.  Roles are tied to permissions and access control.
        enum:
        - user
        - bot
        - admin
        example: user
      identityType:
        type: string
        description: The website or method that this user is identified and authenticated with.  'bandmap' identified users use Band Map's own stored email and password hash to authenticate, rather than a third party's API like Google or Facebook.
        enum:
        - bandmap
        example: bandmap
      email:
        type: string
        description: This user's email address.
        minLength: 1
        example: bandmapuser@bandmap.com
      password:
        type: string
        description: The user's new hashed and salted password key.
        minLength: 8
      retypedPassword:
        type: string
        description: A confirmation field to double-check the user's new hashed and salted password key.
        minLength: 8
      oldPassword:
        type: string
        description: A confirmation field to double-check the user's old hashed and salted password key for PATCHing password changes (with security precautions like the 'password' field).
        minLength: 8
      person:
        description: The person to associate with this user.  Specify by id or name.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this person.
            minimum: 0
            example: 123
          name:
            type: string
            description: The name of this person.
            minLength: 1
            maxLength: 255
            example: Person Name
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserEdits:
    description: The collection of the most recent 10000 edits to Band Map info made by this user.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this edits collection or collection segment.
        example: https://www.seattlebandmap.com/api/users/123/edits?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first edit in the collection that is being returned in the edits array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of edits that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of edits in this collection, or if a 'filter' argument was given, the total number of edits after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      edits:
        type: array
        items:
          $ref: '#/definitions/UserEdit'
      editsCount:
        type: integer
        description: The number of edits actually returned in the edits array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/edits?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/edits?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/edits?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/edits?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserEdit:
    description: An edit made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
  UserEditWithWarnings:
    description: An edit made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserRevisions:
    description: The collection of the most recent 10000 discrete revisions (single facts) to Band Map info made by this user.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this revisions collection or collection segment.
        example: https://www.seattlebandmap.com/api/users/123/revisions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first revision in the collection that is being returned in the revisions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of revisions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of revisions in this collection, or if a 'filter' argument was given, the total number of revisions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      revisions:
        type: array
        items:
          $ref: '#/definitions/UserRevision'
      revisionsCount:
        type: integer
        description: The number of revisions actually returned in the revisions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/revisions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/revisions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/revisions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/revisions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserRevision:
    description: A revision made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
  UserRevisionWithWarnings:
    description: A revision made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserAnnotations:
    description: The collection of the most recent 10000 annotations to Band Map facts made by this user.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/users/123/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/UserAnnotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserAnnotation:
    description: An annotation to a Band Map fact made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
  UserAnnotationWithWarnings:
    description: An annotation to a Band Map fact made by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserSessions:
    description: The collection of the most recent 10000 sessions logged on the Band Map website by this user.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this sessions collection or collection segment.
        example: https://www.seattlebandmap.com/api/users/123/sessions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first session in the collection that is being returned in the sessions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of sessions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of sessions in this collection, or if a 'filter' argument was given, the total number of sessions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      sessions:
        type: array
        items:
          $ref: '#/definitions/UserSession'
      sessionsCount:
        type: integer
        description: The number of sessions actually returned in the sessions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/sessions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/sessions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/users/123/sessions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/users/123/sessions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  UserSession:
    description: A session logged on the Band Map website by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
  UserSessionWithWarnings:
    description: A session logged on the Band Map website by this user.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Sessions:
    description: The collection of Band Map website sessions.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this sessions collection or collection segment.
        example: https://www.seattlebandmap.com/api/sessions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first session in the collection that is being returned in the sessions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of sessions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of sessions in this collection, or if a 'filter' argument was given, the total number of sessions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      sessions:
        type: array
        items:
          $ref: '#/definitions/Session'
      sessionsCount:
        type: integer
        description: The number of sessions actually returned in the sessions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  Session:
    description: A user session on the Band Map website.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
      username:
        type: string
        description: The editor name or username logged for this session.  This will be the username for registered users, or the ip address for anonymous users.
        example: bandmapuser
      start:
        type: string
        format: dateTime
        description: 'The date and time this session began.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      end:
        type: string
        format: dateTime
        description: 'The date and time this session ended.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T09:06:00-08:00'
      edits:
        type: array
        description: An array containing the edits made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: An edit made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The number of edits made during this session.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array containing the revisions made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The number of revisions made during this session.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: An annotation made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The number of annotations made during this session.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      user:
        description: The user associated with this session.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this user.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this user.
            example: https://www.seattlebandmap.com/api/users/123
          username:
            type: string
            description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
            minLength: 1
            maxLength: 255
            example: bandmapuser
      ipAddress:
        type: string
        description: The IP address logged for this session.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last request made during this session.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      cookie:
        type: string
        description: The full text of the most recent 'Cookie' or 'Set-Cookie' header received or sent for this session (whichever is most recent), if one exists.
        example: 'Cookie: name=value; token=other-stuff; whatever=stuff'
  SessionWithWarnings:
    description: A user session on the Band Map website.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this session.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this session.
        example: https://www.seattlebandmap.com/api/sessions/123
      username:
        type: string
        description: The editor name or username logged for this session.  This will be the username for registered users, or the ip address for anonymous users.
        example: bandmapuser
      start:
        type: string
        format: dateTime
        description: 'The date and time this session began.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T06:09:00-08:00'
      end:
        type: string
        format: dateTime
        description: 'The date and time this session ended.  The format is the ISO 8601 standard date-time format: YYYY-MM-DDTHH:MM:SS[+/-]HH:MM'
        example: '1980-04-20T09:06:00-08:00'
      edits:
        type: array
        description: An array containing the edits made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: An edit made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this edit.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this edit.
              example: https://www.seattlebandmap.com/api/edit-history/edits/123
      editsCount:
        type: integer
        description: The number of edits made during this session.  Should be equal to edits.length.
        minimum: 0
        example: 123
      revisions:
        type: array
        description: An array containing the revisions made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: A revision made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this revision.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this revision.
              example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      revisionsCount:
        type: integer
        description: The number of revisions made during this session.  Should be equal to revisions.length.
        minimum: 0
        example: 123
      annotations:
        type: array
        description: An array containing the annotations made during this session.
        minItems: 0
        uniqueItems: true
        items:
          description: An annotation made during this session.
          properties:
            id:
              type: integer
              description: The unique, stable ID of this annotation.
              minimum: 0
              example: 123
            link:
              type: string
              description: A stable, absolute URL linking to this annotation.
              example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      annotationsCount:
        type: integer
        description: The number of annotations made during this session.  Should be equal to annotations.length.
        minimum: 0
        example: 123
      user:
        description: The user associated with this session.
        properties:
          id:
            type: integer
            description: The unique, stable ID of this user.
            minimum: 0
            example: 123
          link:
            type: string
            description: A stable, absolute URL linking to this user.
            example: https://www.seattlebandmap.com/api/users/123
          username:
            type: string
            description: The username of this Band Map user.  Edits and session logs will appear under this name, rather than the associated person name (if one exists).
            minLength: 1
            maxLength: 255
            example: bandmapuser
      ipAddress:
        type: string
        description: The IP address logged for this session.  IPv6 addresses are represented according to RFC 5952 (https://tools.ietf.org/html/rfc5952#section-4).
        example: 2001:abcd::666:ef
      userAgent:
        type: string
        description: The 'User-Agent' HTTP header sent with the last request made during this session.
        example: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
      cookie:
        type: string
        description: The full text of the most recent 'Cookie' or 'Set-Cookie' header received or sent for this session (whichever is most recent), if one exists.
        example: 'Cookie: name=value; token=other-stuff; whatever=stuff'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionEdits:
    description: The collection of edits made during this session.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this edits collection or collection segment.
        example: https://www.seattlebandmap.com/api/sessions/123/edits?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first edit in the collection that is being returned in the edits array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of edits that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of edits in this collection, or if a 'filter' argument was given, the total number of edits after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      edits:
        type: array
        items:
          $ref: '#/definitions/SessionEdit'
      editsCount:
        type: integer
        description: The number of edits actually returned in the edits array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/edits?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/edits?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/edits?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/edits?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionEdit:
    description: An edit made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
  SessionEditWithWarnings:
    description: An edit made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this edit.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this edit.
        example: https://www.seattlebandmap.com/api/edit-history/edits/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionRevisions:
    description: The collection of revisions made during this session.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this revisions collection or collection segment.
        example: https://www.seattlebandmap.com/api/sessions/123/revisions?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first revision in the collection that is being returned in the revisions array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of revisions that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of revisions in this collection, or if a 'filter' argument was given, the total number of revisions after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      revisions:
        type: array
        items:
          $ref: '#/definitions/SessionRevision'
      revisionsCount:
        type: integer
        description: The number of revisions actually returned in the revisions array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/revisions?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/revisions?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/revisions?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/revisions?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionRevision:
    description: A revision made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
  SessionRevisionWithWarnings:
    description: A revision made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this revision.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this revision.
        example: https://www.seattlebandmap.com/api/edit-history/revisions/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionAnnotations:
    description: The collection of annotations made during this session.
    properties:
      link:
        type: string
        description: A stable, absolute URL linking to this annotations collection or collection segment.
        example: https://www.seattlebandmap.com/api/sessions/123/annotations?limit=100&offset=200
      offset:
        type: integer
        description: The offset from the first annotation in the collection that is being returned in the annotations array.
        default: 0
        example: 200
      limit:
        type: integer
        description: The maximum number of annotations that will be returned at once.
        default: 10000
        example: 100
      total:
        type: integer
        description: The total number of annotations in this collection, or if a 'filter' argument was given, the total number of annotations after the filter was applied (this may still be more than the number returned if a 'limit' argument was also given).
        example: 1000
      annotations:
        type: array
        items:
          $ref: '#/definitions/SessionAnnotation'
      annotationsCount:
        type: integer
        description: The number of annotations actually returned in the annotations array.
        example: 100
      first:
        type: string
        description: A stable, absolute URL linking to the first segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/annotations?limit=100
      prev:
        type: string
        description: A stable, absolute URL linking to the previous segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/annotations?limit=100&offset=100
      next:
        type: string
        description: A stable, absolute URL linking to the next segment in this collection for the given limit and offset.
        example: https://www.seattlebandmap.com/api/sessions/123/annotations?limit=100&offset=300
      last:
        type: string
        description: A stable, absolute URL linking to the last segment in this collection for the given limit.
        example: https://www.seattlebandmap.com/api/sessions/123/annotations?limit=100&offset=900
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  SessionAnnotation:
    description: An annotation made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
  SessionAnnotationWithWarnings:
    description: An annotation made during this session.
    properties:
      id:
        type: integer
        description: The unique, stable ID of this annotation.
        minimum: 0
        example: 123
      link:
        type: string
        description: A stable, absolute URL linking to this annotation.
        example: https://www.seattlebandmap.com/api/edit-history/annotations/123
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
  ActiveDates:
    description: Active dates for this entry.  An active dates entry with a "from" value but no "until" value indicates currently ongoing activity.
    properties:
      from:
        type: string
        format: date
        description: 'The date this active date range started.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
        example: '1980-04-20'
      until:
        type: string
        format: date
        description: 'The date this active date range ended.  The format is the ISO 8601 standard date format: YYYY-MM-DD.  This field will only be present if a value was entered.'
        example: '2020-04-20'
  Warning:
    properties:
      warning:
        description: An object containing a warning or warnings about the request, usually about a query argument or part of the request body that was invalid and ignored, but not enough to refuse the request.
        properties:
          code:
            type: string
            description: A short warning code identifying this warning.
            enum:
            - invalid-arguments
            - incompatible-arguments
            - unrecognized-fields
            - duplicate-arguments
            - empty-objects-requested
            example: invalid-arguments
          message:
            type: string
            description: A more detailed message describing this warning.
            example: This argument or whatever wasn't quite right.

  Error:
    properties:
      error:
        description: An object containing details about an error.
        properties:
          code:
            type: string
            description: A short error code identifier string describing this error.
            enum:
            - not-found
            - invalid-sort
            - invalid-filter
            - nothing-requested
            - server-error
            - not-implemented-yet
                # Schema Validation:
            - schema-validation-failed
            - object-missing-required-property
            - enum-mismatch
            - maximum
            - maximum-exclusive
            - minimum
            - minimum-exclusive
            - multiple-of
            - pattern
            - required
            - invalid-type
            - array-length-long
            - array-length-short
            - array-unique
            - max-length
            - min-length
            - max-properties
            - min-properties
            example: server-error
          message:
            type: string
            description: A more detailed message describing this error.
            example: There was an error doing the thing.

  Errors:
    properties:
      errors:
        type: array
        description: An array containing one or more errors that occurred processing the request.
        items:
          $ref: '#/definitions/Error'
      warnings:
        type: array
        description: An array containing one or more warnings that occurred processing the request.  This field will only appear if warnings occurred.
        items:
          $ref: '#/definitions/Warning'
